name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight

env:
  PYTHON_VERSION: '3.10'
  COVERAGE_THRESHOLD: 85  # Increased from 80
  PROMETHEUS_PORT: 9090
  ALERTMANAGER_PORT: 9093
  PERFORMANCE_BASELINE: 'main'
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  JAEGER_HOST: localhost
  JAEGER_PORT: 6831

jobs:
  static_analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 mypy black isort bandit safety

      - name: Code Formatting Check
        run: |
          black --check .
          isort --check-only --diff .

      - name: Static Type Checking
        run: |
          mypy .

      - name: Security Analysis
        run: |
          bandit -r src/ -ll
          safety check

      - name: Lint Code
        run: |
          flake8 .

  unit_tests:
    needs: static_analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group: [core, monitoring, market, execution]
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      prometheus:
        image: prom/prometheus
        ports:
          - 9090:9090

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-xdist pytest-cov pytest-asyncio

      - name: Run Unit Tests
        run: |
          pytest tests/${{ matrix.test-group }}/ \
            -n auto \
            --dist loadfile \
            -m "unit" \
            --cov=src/${{ matrix.test-group }} \
            --cov-report=xml:coverage-${{ matrix.test-group }}.xml \
            --junitxml=test-results-${{ matrix.test-group }}.xml

      - name: Upload Coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.test-group }}
          path: coverage-${{ matrix.test-group }}.xml

  integration_tests:
    needs: unit_tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      prometheus:
        image: prom/prometheus
        ports:
          - 9090:9090
      jaeger:
        image: jaegertracing/all-in-one:latest
        ports:
          - 6831:6831/udp
          - 16686:16686

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-timeout pytest-rerunfailures

      - name: Run Integration Tests
        run: |
          pytest tests/integration/ \
            -m "integration" \
            --reruns 3 \
            --reruns-delay 30 \
            --timeout=300 \
            --cov=src \
            --cov-append \
            --cov-report=xml:coverage-integration.xml

      - name: Upload Coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-integration
          path: coverage-integration.xml

  performance_tests:
    needs: integration_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark

      - name: Run Performance Tests
        run: |
          pytest tests/performance/ \
            -m "benchmark" \
            --benchmark-only \
            --benchmark-json=benchmark-results.json

      - name: Compare Performance
        if: github.event_name == 'pull_request'
        run: |
          pytest tests/performance/ \
            --benchmark-only \
            --benchmark-compare \
            --benchmark-compare-fail=min:5%

      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json

  coverage_report:
    needs: [unit_tests, integration_tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Download Coverage Reports
        uses: actions/download-artifact@v3
        with:
          path: coverage-reports

      - name: Combine Coverage Reports
        run: |
          pip install coverage
          coverage combine coverage-reports/*/coverage-*.xml
          coverage report --fail-under=${{ env.COVERAGE_THRESHOLD }}
          coverage xml

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          flags: unittests,integration
          name: codecov-umbrella
          verbose: true

  deploy:
    needs: [coverage_report, performance_tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker Image
        run: |
          docker build -t superchain-arbitrage-agent:${{ github.sha }} .
          docker tag superchain-arbitrage-agent:${{ github.sha }} superchain-arbitrage-agent:latest 