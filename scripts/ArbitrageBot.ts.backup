import { ethers } from 'ethers';
import { Provider, JsonRpcProvider } from '@ethersproject/providers';
import { Contract } from '@ethersproject/contracts';
import { VolumeAnalyzer } from './utils/VolumeAnalyzer';
import { VolumeData } from './types/dex';
import { QUALITY_THRESHOLDS } from './config/constants';
import { DexDataProvider } from './services/DexDataProvider';
import { PairGasOptimizer } from './utils/PairGasOptimizer';

export enum DEX {
    BASESWAP = 'BASESWAP',
    AERODROME = 'AERODROME',
    SUSHISWAP = 'SUSHISWAP',
    PANCAKESWAP = 'PANCAKESWAP',
    UNISWAP_V3 = 'UNISWAP_V3'
}

export interface TransactionWithTo extends ethers.TransactionResponse {
    to: string;
    blockTimestamp?: number;
}

export interface TradeRecord {
    timestamp: number;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    strategy: string;
    profit: number;
    gasUsed: bigint;
    slippage: number;
    duration: number;
}

export interface LiquidityMetrics {
    depth: number;
    volatility: number;
    volume: number;
    tradeDistribution: {
        largeTradesRatio: number;
        mediumTradesRatio: number;
        smallTradesRatio: number;
    };
}

export interface LiquidityAnalysis {
    volumeScore: number;
    depthScore: number;
    volatilityScore: number;
    healthScore: number;
    recentTrades: {
        count: number;
        averageSize: number;
        largestTrade: number;
        timeWeightedVolume: number;
    };
}

export interface Trade {
    timestamp: number;
    amount: bigint;
    price: bigint;
    hash: string;
    blockNumber: number;
}

export interface PoolData {
    reserves: {
        reserve0: bigint;
        reserve1: bigint;
    };
    totalLiquidity: bigint;
    pair: string;
}

export interface MempoolTx {
    hash: string;
    to: string;
    from: string;
    data: string;
    value: bigint;
    gasPrice: bigint;
    maxFeePerGas?: bigint;
    maxPriorityFeePerGas?: bigint;
}

export interface MEVPattern {
    type: string;
    confidence: number;
    gasPricePattern: string;
    blockSpan: number;
    frequency: number;
}

export interface MEVActivityLog {
    timestamp: number;
    blockNumber: number;
    pattern: MEVPattern;
    attackerAddresses: string[];
    victimAddresses: string[];
    estimatedProfit: number;
    gasUsed: bigint;
    details: string;
}

export interface LiquidityDepthAnalysis {
    totalLiquidity: bigint;
    concentrationScore: number;
    healthScore: number;
}

export interface MEVAnalysis {
    sandwichRisk: number;
    frontrunRisk: number;
    backrunRisk: number;
    timingRisk: number;
    estimatedMEVLoss: number;
    detectedPatterns: MEVPattern[];
    riskFactors: {
        liquidityRisk: number;
        volumeRisk: number;
        historicalRisk: number;
        mempoolRisk: number;
    };
}

export interface PriceDataPoint {
    timestamp: number;
    price: number;
    volume: bigint;
    blockNumber: number;
}

export interface LiquiditySnapshot {
    price: number;
    depth: bigint;
    slippage: number;
    timeStamp: number;
}

export interface PriceImpactAnalysis {
    expectedImpact: number;
    worstCase: number;
    confidence: number;
    recommendedMaxSize: bigint;
    liquidityScore: number;
}

export interface CrossPoolLiquidity {
    poolAddress: string;
    liquidity: bigint;
    fee: number;
    utilization: number;
    lastUpdateTime: number;
}

export interface GasCosts {
    current: bigint;
    historical: {
        timestamp: number;
        cost: bigint;
    }[];
    priority: number;
}

export interface SlippageConfig {
    min: number;
    max: number;
    dynamic: boolean;
}

export interface EmergencyCondition {
    type: 'volatility' | 'liquidity' | 'gas' | 'custom';
    threshold: number;
    multiplier: number;
    active: boolean;
}

export interface SlippageEvent {
    type: 'warning' | 'emergency' | 'info';
    timestamp: number;
    tokenAddress: string;
    slippage: number;
    reason: string;
    conditions?: EmergencyCondition[];
    recommendation?: string;
}

export interface HopSlippage {
    dexAddress: string;
    tokenIn: string;
    tokenOut: string;
    expectedSlippage: number;
    maxSlippage: number;
    confidence: number;
}

export interface MultiHopSlippage {
    totalExpectedSlippage: number;
    totalMaxSlippage: number;
    overallConfidence: number;
    hops: HopSlippage[];
    recommendation: string;
}

export interface TokenPairConfig {
    tokenA: {
        address: string;
        symbol: string;
        decimals: number;
    };
    tokenB: {
        address: string;
        symbol: string;
        decimals: number;
    };
    dexes: {
        address: string;
        protocol: string;
        fee?: number;
    }[];
    minLiquidity: bigint;
    maxSlippage: number;
}

export interface ProtocolConfig {
    type: 'lending' | 'dex';
    name: string;
    address: string;
    supportedTokens: string[];
    features: string[];
    maxLeverage?: number;
    borrowFee?: number;
    tradeFee?: number;
}

export interface LendingProtocolState {
    token: string;
    supplyApy: number;
    borrowApy: number;
    totalSupply: bigint;
    availableLiquidity: bigint;
    utilizationRate: number;
    collateralFactor: number;
}

export interface PairStrategy {
    type: 'momentum' | 'mean-reversion' | 'liquidity-driven' | 'correlation';
    timeWindow: number;
    parameters: {
        entryThreshold: number;
        exitThreshold: number;
        stopLoss: number;
        maxPositionSize: bigint;
        minVolume: bigint;
    };
    correlatedPairs?: string[];
}

export interface StrategyState {
    active: boolean;
    lastUpdate: number;
    currentPosition: bigint;
    entryPrice: number;
    profitLoss: number;
    successRate: number;
    totalTrades: number;
}

export interface LiquidityDepthHistory {
    timestamp: number;
    depth: bigint;
    fragmentationIndex: number;
    stability: number;
    concentration: number;
}

export interface DepthAnalysis {
    currentDepth: bigint;
    historicalDepth: {
        mean: bigint;
        volatility: number;
        trend: 'increasing' | 'decreasing' | 'stable';
    };
    fragmentation: {
        index: number;
        largestPoolShare: number;
        poolCount: number;
    };
    stability: {
        score: number;
        confidenceInterval: number;
        lastVolatilitySpike: number;
    };
    slippageEstimate: {
        predicted: number;
        worstCase: number;
        confidence: number;
    };
}

export interface VolumeSnapshot {
    timestamp: number;
    volume: bigint;
    tradeCount: number;
    averageTradeSize: bigint;
    largestTrade: bigint;
}

export interface VolumeAnalysis {
    current: {
        hourly: bigint;
        daily: bigint;
        weekly: bigint;
    };
    historical: {
        average: {
            hourly: bigint;
            daily: bigint;
            weekly: bigint;
        };
        trend: 'increasing' | 'decreasing' | 'stable';
        volatility: number;
    };
    patterns: {
        spikes: number;
        consistency: number;
        distribution: {
            largeTradesPercent: number;
            mediumTradesPercent: number;
            smallTradesPercent: number;
        };
    };
}

export interface PerformanceMetrics {
    overall: {
        successRate: number;
        totalTrades: number;
        totalProfit: number;
        averageProfit: number;
        sharpeRatio: number;
        maxDrawdown: number;
        winLossRatio: number;
    };
    timeFrames: {
        hourly: {
            trades: number;
            profit: number;
            successRate: number;
        };
        daily: {
            trades: number;
            profit: number;
            successRate: number;
        };
        weekly: {
            trades: number;
            profit: number;
            successRate: number;
        };
    };
    byToken: {
        [token: string]: {
            trades: number;
            profit: number;
            successRate: number;
            averageProfit: number;
            bestTrade: number;
            worstTrade: number;
        };
    };
    byStrategy: {
        [strategy: string]: {
            trades: number;
            profit: number;
            successRate: number;
            averageProfit: number;
            riskAdjustedReturn: number;
        };
    };
}

// MempoolMonitor class for tracking pending transactions
class MempoolMonitor {
    private provider: JsonRpcProvider;
    private pendingTxs: Map<string, MempoolTx>;
    private isMonitoring: boolean;

    constructor(provider: JsonRpcProvider) {
        this.provider = provider;
        this.pendingTxs = new Map();
        this.isMonitoring = false;
        this.startMonitoring();
    }

    private startMonitoring() {
        if (this.isMonitoring) return;
        this.isMonitoring = true;

        this.provider.on('pending', async (txHash: string) => {
            try {
                const tx = await this.provider.getTransaction(txHash);
                if (tx && this.isSwapTransaction(tx)) {
                    this.pendingTxs.set(txHash, {
                        hash: tx.hash,
                        to: tx.to || '',
                        from: tx.from,
                        data: tx.data,
                        value: tx.value,
                        gasPrice: tx.gasPrice || 0n,
                        maxFeePerGas: tx.maxFeePerGas,
                        maxPriorityFeePerGas: tx.maxPriorityFeePerGas
                    });
                }
            } catch (error) {
                console.error('Error processing pending transaction:', error);
            }
        });
    }

    private isSwapTransaction(tx: ethers.TransactionResponse): boolean {
        // Common DEX swap function signatures
        const swapSignatures = [
            '0x38ed1739', // swapExactTokensForTokens
            '0x7ff36ab5', // swapExactETHForTokens
            '0x18cbafe5', // swapExactTokensForETH
            '0x8803dbee'  // swapTokensForExactTokens
        ];

        return tx.data && swapSignatures.some(sig => tx.data.startsWith(sig));
    }

    async getPendingSwaps(tokenA: string, tokenB: string): Promise<MempoolTx[]> {
        const relevantTxs: MempoolTx[] = [];

        for (const tx of this.pendingTxs.values()) {
            try {
                const decodedData = this.decodeSwapData(tx.data);
                if (this.isRelevantSwap(decodedData, tokenA, tokenB)) {
                    relevantTxs.push(tx);
                }
            } catch (error) {
                continue;
            }
        }

        return relevantTxs;
    }

    private decodeSwapData(data: string): { path: string[] } {
        const iface = new ethers.Interface([
            'function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)'
        ]);

        try {
            const decoded = iface.parseTransaction({ data });
            const path = decoded.args.path || [];
            return { path };
        } catch (error) {
            throw new Error('Unable to decode swap data');
        }
    }

    private isRelevantSwap(
        decodedData: { path: string[] },
        tokenA: string,
        tokenB: string
    ): boolean {
        const { path } = decodedData;
        const normalizedTokenA = tokenA.toLowerCase();
        const normalizedTokenB = tokenB.toLowerCase();
        return path.some(token => 
            token.toLowerCase() === normalizedTokenA ||
            token.toLowerCase() === normalizedTokenB
        );
    }

    stop() {
        this.isMonitoring = false;
        this.provider.removeAllListeners('pending');
    }
}

interface PairGasStats {
    averageGasUsed: bigint;
    successRate: number;
    failureCount: number;
    optimalGasMultiplier: number;
    historicalGasPrices: { timestamp: number; gasPrice: bigint; success: boolean }[];
    lastOptimization: number;
}

class PairGasOptimizer {
    private pairGasStats: Map<string, PairGasStats> = new Map();
    private readonly OPTIMIZATION_INTERVAL = 3600000; // 1 hour
    private readonly MIN_DATA_POINTS = 10;
    private readonly MAX_HISTORY_POINTS = 100;
    private readonly BASE_GAS_MULTIPLIER = 1.1;
    private readonly MAX_GAS_MULTIPLIER = 2.0;

    updatePairGasStats(
        pair: string,
        gasUsed: bigint,
        gasPrice: bigint,
        success: boolean
    ): void {
        const stats = this.pairGasStats.get(pair) || this.getDefaultStats();
        
        // Update stats
        stats.averageGasUsed = (stats.averageGasUsed * BigInt(stats.historicalGasPrices.length) + gasUsed) / 
            BigInt(stats.historicalGasPrices.length + 1);
        
        if (!success) stats.failureCount++;
        
        stats.successRate = (stats.successRate * stats.historicalGasPrices.length + (success ? 100 : 0)) / 
            (stats.historicalGasPrices.length + 1);

        // Add to history
        stats.historicalGasPrices.push({
            timestamp: Date.now(),
            gasPrice,
            success
        });

        // Trim history if needed
        if (stats.historicalGasPrices.length > this.MAX_HISTORY_POINTS) {
            stats.historicalGasPrices.shift();
        }

        this.pairGasStats.set(pair, stats);
        this.optimizeGasMultiplier(pair);
    }

    getOptimalGasPrice(pair: string, baseGasPrice: bigint): bigint {
        const stats = this.pairGasStats.get(pair) || this.getDefaultStats();
        return baseGasPrice * BigInt(Math.floor(stats.optimalGasMultiplier * 100)) / 100n;
    }

    private optimizeGasMultiplier(pair: string): void {
        const stats = this.pairGasStats.get(pair)!;
        const now = Date.now();

        // Only optimize if enough time has passed and we have enough data points
        if (now - stats.lastOptimization < this.OPTIMIZATION_INTERVAL || 
            stats.historicalGasPrices.length < this.MIN_DATA_POINTS) {
            return;
        }

        const recentHistory = stats.historicalGasPrices.slice(-this.MIN_DATA_POINTS);
        
        // Calculate success rate with current multiplier
        const currentSuccessRate = recentHistory.filter(h => h.success).length / recentHistory.length * 100;

        // Adjust multiplier based on success rate and failure patterns
        let newMultiplier = stats.optimalGasMultiplier;
        
        if (currentSuccessRate < 90) {
            // Increase multiplier if success rate is too low
            newMultiplier = Math.min(
                stats.optimalGasMultiplier * 1.1,
                this.MAX_GAS_MULTIPLIER
            );
        } else if (currentSuccessRate > 98 && stats.optimalGasMultiplier > this.BASE_GAS_MULTIPLIER) {
            // Gradually decrease multiplier if success rate is very high
            newMultiplier = Math.max(
                stats.optimalGasMultiplier * 0.95,
                this.BASE_GAS_MULTIPLIER
            );
        }

        // Update stats
        stats.optimalGasMultiplier = newMultiplier;
        stats.lastOptimization = now;
        this.pairGasStats.set(pair, stats);
    }

    private getDefaultStats(): PairGasStats {
        return {
            averageGasUsed: 0n,
            successRate: 100,
            failureCount: 0,
            optimalGasMultiplier: this.BASE_GAS_MULTIPLIER,
            historicalGasPrices: [],
            lastOptimization: 0
        };
    }
}

export class ArbitrageBot {
    private readonly MEV_PATTERNS = {
        FRONTRUN: {
            minGasIncrease: 1.2,
            maxBlockSpan: 2,
            suspiciousPatterns: ['high-low', 'sudden-spike', 'repeated-address']
        },
        SANDWICH: {
            minGasIncrease: 1.5,
            maxSpread: 2.0,
            maxBlockWindow: 3,
            suspiciousPatterns: ['high-low-high', 'multi-tx-same-block']
        },
        TIMING: {
            maxRepeatCount: 3,
            blockThreshold: 5,
            suspiciousPatterns: ['repeated-failures', 'time-correlation']
        },
        BACKRUN: {
            minGasIncrease: 1.3,
            maxDelay: 2, // blocks
            suspiciousPatterns: ['delayed-high-gas', 'mempool-camping']
        }
    };

    private readonly MEV_PROTECTION = {
        GAS: {
            priorityMultiplier: 1.3,    // Multiply priority fee for protection
            maxBoost: 2.0,              // Maximum gas boost for high-risk situations
            minPriority: 2.0            // Minimum priority fee (gwei)
        },
        SLIPPAGE: {
            baseSlippage: 50,           // 0.5% base slippage
            maxDynamic: 300,            // 3% maximum dynamic slippage
            impactMultiplier: 1.5       // Multiply slippage for high impact trades
        },
        TIMING: {
            maxBlockDelay: 3,           // Maximum blocks to wait
            minConfirmations: 1,        // Minimum confirmations needed
            maxRetries: 3               // Maximum retry attempts
        }
    };

    private readonly SLIPPAGE_CONFIG: SlippageConfig = {
        min: 50,   // 0.5%
        max: 300,  // 3%
        dynamic: true
    };

    private readonly SLIPPAGE_MONITOR_INTERVAL = 60000; // 1 minute
    private slippageEvents: SlippageEvent[] = [];
    private slippageMonitorHandle?: NodeJS.Timeout;

    private provider: Provider;
    private mevActivityLogs: MEVActivityLog[] = [];
    private isRunning: boolean = false;
    private priceHistory: Map<string, PriceDataPoint[]> = new Map();
    private readonly MAX_PRICE_HISTORY_LENGTH = 1000;  // Keep last 1000 price points
    private liquiditySnapshots: Map<string, LiquiditySnapshot[]> = new Map();
    private poolLiquidity: Map<string, CrossPoolLiquidity[]> = new Map();
    private gasCosts: GasCosts = {
        current: 0n,
        historical: [],
        priority: 50
    };

    private emergencyConditions: EmergencyCondition[] = [
        {
            type: 'volatility',
            threshold: 50,  // 50% volatility
            multiplier: 2,  // Double the slippage
            active: false
        },
        {
            type: 'liquidity',
            threshold: 70,  // 70% liquidity drop
            multiplier: 3,  // Triple the slippage
            active: false
        },
        {
            type: 'gas',
            threshold: 1000,  // 1000 gwei
            multiplier: 1.5,  // 1.5x slippage
            active: false
        }
    ];

    private readonly BASE_TOKEN_PAIRS: TokenPairConfig[] = [
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22',  // cbETH
                symbol: 'cbETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0xFDa619b6d20975be80A10332cD39b9a4b0FAa8BB',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                },
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 100  // 1%
        },
        {
            tokenA: {
                address: '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                symbol: 'BALD',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1',  // TOSHI
                symbol: 'TOSHI',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0xb7845eBf06B1E43EF8e475F7A6Dc4C7994d0eF46',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x940181a94A35A4569E4529A3CDfB74e38FD98631',  // DEGEN
                symbol: 'DEGEN',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0x9CD7C03C82F9686fBB86Ba258cA1308B7BEe0F76',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x940181a94A35A4569E4529A3CDfB74e38FD98631',  // DEGEN
                symbol: 'DEGEN',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x9CD7C03C82F9686fBB86Ba258cA1308B7BEe0F76',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('15'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                symbol: 'BALD',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1',  // TOSHI
                symbol: 'TOSHI',
                decimals: 18
            },
            dexes: [
                {
                    address: '0xb7845eBf06B1E43EF8e475F7A6Dc4C7994d0eF46',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',  // Virtual
                symbol: 'Virtual',
                decimals: 18
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',  // AIXBT
                symbol: 'AIXBT',
                decimals: 18
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',
                symbol: 'WETH',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',
                symbol: 'WETH',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
import { ethers } from 'ethers';
import { Provider, JsonRpcProvider } from '@ethersproject/providers';
import { Contract } from '@ethersproject/contracts';
import { VolumeAnalyzer } from './utils/VolumeAnalyzer';
import { VolumeData } from './types/dex';
import { QUALITY_THRESHOLDS } from './config/constants';
import { DexDataProvider } from './services/DexDataProvider';
import { PairGasOptimizer } from './utils/PairGasOptimizer';

export enum DEX {
    BASESWAP = 'BASESWAP',
    AERODROME = 'AERODROME',
    SUSHISWAP = 'SUSHISWAP',
    PANCAKESWAP = 'PANCAKESWAP',
    UNISWAP_V3 = 'UNISWAP_V3'
}

export interface TransactionWithTo extends ethers.TransactionResponse {
    to: string;
    blockTimestamp?: number;
}

export interface TradeRecord {
    timestamp: number;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    strategy: string;
    profit: number;
    gasUsed: bigint;
    slippage: number;
    duration: number;
}

export interface LiquidityMetrics {
    depth: number;
    volatility: number;
    volume: number;
    tradeDistribution: {
        largeTradesRatio: number;
        mediumTradesRatio: number;
        smallTradesRatio: number;
    };
}

export interface LiquidityAnalysis {
    volumeScore: number;
    depthScore: number;
    volatilityScore: number;
    healthScore: number;
    recentTrades: {
        count: number;
        averageSize: number;
        largestTrade: number;
        timeWeightedVolume: number;
    };
}

export interface Trade {
    timestamp: number;
    amount: bigint;
    price: bigint;
    hash: string;
    blockNumber: number;
}

export interface PoolData {
    reserves: {
        reserve0: bigint;
        reserve1: bigint;
    };
    totalLiquidity: bigint;
    pair: string;
}

export interface MempoolTx {
    hash: string;
    to: string;
    from: string;
    data: string;
    value: bigint;
    gasPrice: bigint;
    maxFeePerGas?: bigint;
    maxPriorityFeePerGas?: bigint;
}

export interface MEVPattern {
    type: string;
    confidence: number;
    gasPricePattern: string;
    blockSpan: number;
    frequency: number;
}

export interface MEVActivityLog {
    timestamp: number;
    blockNumber: number;
    pattern: MEVPattern;
    attackerAddresses: string[];
    victimAddresses: string[];
    estimatedProfit: number;
    gasUsed: bigint;
    details: string;
}

export interface LiquidityDepthAnalysis {
    totalLiquidity: bigint;
    concentrationScore: number;
    healthScore: number;
}

export interface MEVAnalysis {
    sandwichRisk: number;
    frontrunRisk: number;
    backrunRisk: number;
    timingRisk: number;
    estimatedMEVLoss: number;
    detectedPatterns: MEVPattern[];
    riskFactors: {
        liquidityRisk: number;
        volumeRisk: number;
        historicalRisk: number;
        mempoolRisk: number;
    };
}

export interface PriceDataPoint {
    timestamp: number;
    price: number;
    volume: bigint;
    blockNumber: number;
}

export interface LiquiditySnapshot {
    price: number;
    depth: bigint;
    slippage: number;
    timeStamp: number;
}

export interface PriceImpactAnalysis {
    expectedImpact: number;
    worstCase: number;
    confidence: number;
    recommendedMaxSize: bigint;
    liquidityScore: number;
}

export interface CrossPoolLiquidity {
    poolAddress: string;
    liquidity: bigint;
    fee: number;
    utilization: number;
    lastUpdateTime: number;
}

export interface GasCosts {
    current: bigint;
    historical: {
        timestamp: number;
        cost: bigint;
    }[];
    priority: number;
}

export interface SlippageConfig {
    min: number;
    max: number;
    dynamic: boolean;
}

export interface EmergencyCondition {
    type: 'volatility' | 'liquidity' | 'gas' | 'custom';
    threshold: number;
    multiplier: number;
    active: boolean;
}

export interface SlippageEvent {
    type: 'warning' | 'emergency' | 'info';
    timestamp: number;
    tokenAddress: string;
    slippage: number;
    reason: string;
    conditions?: EmergencyCondition[];
    recommendation?: string;
}

export interface HopSlippage {
    dexAddress: string;
    tokenIn: string;
    tokenOut: string;
    expectedSlippage: number;
    maxSlippage: number;
    confidence: number;
}

export interface MultiHopSlippage {
    totalExpectedSlippage: number;
    totalMaxSlippage: number;
    overallConfidence: number;
    hops: HopSlippage[];
    recommendation: string;
}

export interface TokenPairConfig {
    tokenA: {
        address: string;
        symbol: string;
        decimals: number;
    };
    tokenB: {
        address: string;
        symbol: string;
        decimals: number;
    };
    dexes: {
        address: string;
        protocol: string;
        fee?: number;
    }[];
    minLiquidity: bigint;
    maxSlippage: number;
}

export interface ProtocolConfig {
    type: 'lending' | 'dex';
    name: string;
    address: string;
    supportedTokens: string[];
    features: string[];
    maxLeverage?: number;
    borrowFee?: number;
    tradeFee?: number;
}

export interface LendingProtocolState {
    token: string;
    supplyApy: number;
    borrowApy: number;
    totalSupply: bigint;
    availableLiquidity: bigint;
    utilizationRate: number;
    collateralFactor: number;
}

export interface PairStrategy {
    type: 'momentum' | 'mean-reversion' | 'liquidity-driven' | 'correlation';
    timeWindow: number;
    parameters: {
        entryThreshold: number;
        exitThreshold: number;
        stopLoss: number;
        maxPositionSize: bigint;
        minVolume: bigint;
    };
    correlatedPairs?: string[];
}

export interface StrategyState {
    active: boolean;
    lastUpdate: number;
    currentPosition: bigint;
    entryPrice: number;
    profitLoss: number;
    successRate: number;
    totalTrades: number;
}

export interface LiquidityDepthHistory {
    timestamp: number;
    depth: bigint;
    fragmentationIndex: number;
    stability: number;
    concentration: number;
}

export interface DepthAnalysis {
    currentDepth: bigint;
    historicalDepth: {
        mean: bigint;
        volatility: number;
        trend: 'increasing' | 'decreasing' | 'stable';
    };
    fragmentation: {
        index: number;
        largestPoolShare: number;
        poolCount: number;
    };
    stability: {
        score: number;
        confidenceInterval: number;
        lastVolatilitySpike: number;
    };
    slippageEstimate: {
        predicted: number;
        worstCase: number;
        confidence: number;
    };
}

export interface VolumeSnapshot {
    timestamp: number;
    volume: bigint;
    tradeCount: number;
    averageTradeSize: bigint;
    largestTrade: bigint;
}

export interface VolumeAnalysis {
    current: {
        hourly: bigint;
        daily: bigint;
        weekly: bigint;
    };
    historical: {
        average: {
            hourly: bigint;
            daily: bigint;
            weekly: bigint;
        };
        trend: 'increasing' | 'decreasing' | 'stable';
        volatility: number;
    };
    patterns: {
        spikes: number;
        consistency: number;
        distribution: {
            largeTradesPercent: number;
            mediumTradesPercent: number;
            smallTradesPercent: number;
        };
    };
}

export interface PerformanceMetrics {
    overall: {
        successRate: number;
        totalTrades: number;
        totalProfit: number;
        averageProfit: number;
        sharpeRatio: number;
        maxDrawdown: number;
        winLossRatio: number;
    };
    timeFrames: {
        hourly: {
            trades: number;
            profit: number;
            successRate: number;
        };
        daily: {
            trades: number;
            profit: number;
            successRate: number;
        };
        weekly: {
            trades: number;
            profit: number;
            successRate: number;
        };
    };
    byToken: {
        [token: string]: {
            trades: number;
            profit: number;
            successRate: number;
            averageProfit: number;
            bestTrade: number;
            worstTrade: number;
        };
    };
    byStrategy: {
        [strategy: string]: {
            trades: number;
            profit: number;
            successRate: number;
            averageProfit: number;
            riskAdjustedReturn: number;
        };
    };
}

// MempoolMonitor class for tracking pending transactions
class MempoolMonitor {
    private provider: JsonRpcProvider;
    private pendingTxs: Map<string, MempoolTx>;
    private isMonitoring: boolean;

    constructor(provider: JsonRpcProvider) {
        this.provider = provider;
        this.pendingTxs = new Map();
        this.isMonitoring = false;
        this.startMonitoring();
    }

    private startMonitoring() {
        if (this.isMonitoring) return;
        this.isMonitoring = true;

        this.provider.on('pending', async (txHash: string) => {
            try {
                const tx = await this.provider.getTransaction(txHash);
                if (tx && this.isSwapTransaction(tx)) {
                    this.pendingTxs.set(txHash, {
                        hash: tx.hash,
                        to: tx.to || '',
                        from: tx.from,
                        data: tx.data,
                        value: tx.value,
                        gasPrice: tx.gasPrice || 0n,
                        maxFeePerGas: tx.maxFeePerGas,
                        maxPriorityFeePerGas: tx.maxPriorityFeePerGas
                    });
                }
            } catch (error) {
                console.error('Error processing pending transaction:', error);
            }
        });
    }

    private isSwapTransaction(tx: ethers.TransactionResponse): boolean {
        // Common DEX swap function signatures
        const swapSignatures = [
            '0x38ed1739', // swapExactTokensForTokens
            '0x7ff36ab5', // swapExactETHForTokens
            '0x18cbafe5', // swapExactTokensForETH
            '0x8803dbee'  // swapTokensForExactTokens
        ];

        return tx.data && swapSignatures.some(sig => tx.data.startsWith(sig));
    }

    async getPendingSwaps(tokenA: string, tokenB: string): Promise<MempoolTx[]> {
        const relevantTxs: MempoolTx[] = [];

        for (const tx of this.pendingTxs.values()) {
            try {
                const decodedData = this.decodeSwapData(tx.data);
                if (this.isRelevantSwap(decodedData, tokenA, tokenB)) {
                    relevantTxs.push(tx);
                }
            } catch (error) {
                continue;
            }
        }

        return relevantTxs;
    }

    private decodeSwapData(data: string): { path: string[] } {
        const iface = new ethers.Interface([
            'function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)'
        ]);

        try {
            const decoded = iface.parseTransaction({ data });
            const path = decoded.args.path || [];
            return { path };
        } catch (error) {
            throw new Error('Unable to decode swap data');
        }
    }

    private isRelevantSwap(
        decodedData: { path: string[] },
        tokenA: string,
        tokenB: string
    ): boolean {
        const { path } = decodedData;
        const normalizedTokenA = tokenA.toLowerCase();
        const normalizedTokenB = tokenB.toLowerCase();
        return path.some(token => 
            token.toLowerCase() === normalizedTokenA ||
            token.toLowerCase() === normalizedTokenB
        );
    }

    stop() {
        this.isMonitoring = false;
        this.provider.removeAllListeners('pending');
    }
}

interface PairGasStats {
    averageGasUsed: bigint;
    successRate: number;
    failureCount: number;
    optimalGasMultiplier: number;
    historicalGasPrices: { timestamp: number; gasPrice: bigint; success: boolean }[];
    lastOptimization: number;
}

class PairGasOptimizer {
    private pairGasStats: Map<string, PairGasStats> = new Map();
    private readonly OPTIMIZATION_INTERVAL = 3600000; // 1 hour
    private readonly MIN_DATA_POINTS = 10;
    private readonly MAX_HISTORY_POINTS = 100;
    private readonly BASE_GAS_MULTIPLIER = 1.1;
    private readonly MAX_GAS_MULTIPLIER = 2.0;

    updatePairGasStats(
        pair: string,
        gasUsed: bigint,
        gasPrice: bigint,
        success: boolean
    ): void {
        const stats = this.pairGasStats.get(pair) || this.getDefaultStats();
        
        // Update stats
        stats.averageGasUsed = (stats.averageGasUsed * BigInt(stats.historicalGasPrices.length) + gasUsed) / 
            BigInt(stats.historicalGasPrices.length + 1);
        
        if (!success) stats.failureCount++;
        
        stats.successRate = (stats.successRate * stats.historicalGasPrices.length + (success ? 100 : 0)) / 
            (stats.historicalGasPrices.length + 1);

        // Add to history
        stats.historicalGasPrices.push({
            timestamp: Date.now(),
            gasPrice,
            success
        });

        // Trim history if needed
        if (stats.historicalGasPrices.length > this.MAX_HISTORY_POINTS) {
            stats.historicalGasPrices.shift();
        }

        this.pairGasStats.set(pair, stats);
        this.optimizeGasMultiplier(pair);
    }

    getOptimalGasPrice(pair: string, baseGasPrice: bigint): bigint {
        const stats = this.pairGasStats.get(pair) || this.getDefaultStats();
        return baseGasPrice * BigInt(Math.floor(stats.optimalGasMultiplier * 100)) / 100n;
    }

    private optimizeGasMultiplier(pair: string): void {
        const stats = this.pairGasStats.get(pair)!;
        const now = Date.now();

        // Only optimize if enough time has passed and we have enough data points
        if (now - stats.lastOptimization < this.OPTIMIZATION_INTERVAL || 
            stats.historicalGasPrices.length < this.MIN_DATA_POINTS) {
            return;
        }

        const recentHistory = stats.historicalGasPrices.slice(-this.MIN_DATA_POINTS);
        
        // Calculate success rate with current multiplier
        const currentSuccessRate = recentHistory.filter(h => h.success).length / recentHistory.length * 100;

        // Adjust multiplier based on success rate and failure patterns
        let newMultiplier = stats.optimalGasMultiplier;
        
        if (currentSuccessRate < 90) {
            // Increase multiplier if success rate is too low
            newMultiplier = Math.min(
                stats.optimalGasMultiplier * 1.1,
                this.MAX_GAS_MULTIPLIER
            );
        } else if (currentSuccessRate > 98 && stats.optimalGasMultiplier > this.BASE_GAS_MULTIPLIER) {
            // Gradually decrease multiplier if success rate is very high
            newMultiplier = Math.max(
                stats.optimalGasMultiplier * 0.95,
                this.BASE_GAS_MULTIPLIER
            );
        }

        // Update stats
        stats.optimalGasMultiplier = newMultiplier;
        stats.lastOptimization = now;
        this.pairGasStats.set(pair, stats);
    }

    private getDefaultStats(): PairGasStats {
        return {
            averageGasUsed: 0n,
            successRate: 100,
            failureCount: 0,
            optimalGasMultiplier: this.BASE_GAS_MULTIPLIER,
            historicalGasPrices: [],
            lastOptimization: 0
        };
    }
}

export class ArbitrageBot {
    private readonly MEV_PATTERNS = {
        FRONTRUN: {
            minGasIncrease: 1.2,
            maxBlockSpan: 2,
            suspiciousPatterns: ['high-low', 'sudden-spike', 'repeated-address']
        },
        SANDWICH: {
            minGasIncrease: 1.5,
            maxSpread: 2.0,
            maxBlockWindow: 3,
            suspiciousPatterns: ['high-low-high', 'multi-tx-same-block']
        },
        TIMING: {
            maxRepeatCount: 3,
            blockThreshold: 5,
            suspiciousPatterns: ['repeated-failures', 'time-correlation']
        },
        BACKRUN: {
            minGasIncrease: 1.3,
            maxDelay: 2, // blocks
            suspiciousPatterns: ['delayed-high-gas', 'mempool-camping']
        }
    };

    private readonly MEV_PROTECTION = {
        GAS: {
            priorityMultiplier: 1.3,    // Multiply priority fee for protection
            maxBoost: 2.0,              // Maximum gas boost for high-risk situations
            minPriority: 2.0            // Minimum priority fee (gwei)
        },
        SLIPPAGE: {
            baseSlippage: 50,           // 0.5% base slippage
            maxDynamic: 300,            // 3% maximum dynamic slippage
            impactMultiplier: 1.5       // Multiply slippage for high impact trades
        },
        TIMING: {
            maxBlockDelay: 3,           // Maximum blocks to wait
            minConfirmations: 1,        // Minimum confirmations needed
            maxRetries: 3               // Maximum retry attempts
        }
    };

    private readonly SLIPPAGE_CONFIG: SlippageConfig = {
        min: 50,   // 0.5%
        max: 300,  // 3%
        dynamic: true
    };

    private readonly SLIPPAGE_MONITOR_INTERVAL = 60000; // 1 minute
    private slippageEvents: SlippageEvent[] = [];
    private slippageMonitorHandle?: NodeJS.Timeout;

    private provider: Provider;
    private mevActivityLogs: MEVActivityLog[] = [];
    private isRunning: boolean = false;
    private priceHistory: Map<string, PriceDataPoint[]> = new Map();
    private readonly MAX_PRICE_HISTORY_LENGTH = 1000;  // Keep last 1000 price points
    private liquiditySnapshots: Map<string, LiquiditySnapshot[]> = new Map();
    private poolLiquidity: Map<string, CrossPoolLiquidity[]> = new Map();
    private gasCosts: GasCosts = {
        current: 0n,
        historical: [],
        priority: 50
    };

    private emergencyConditions: EmergencyCondition[] = [
        {
            type: 'volatility',
            threshold: 50,  // 50% volatility
            multiplier: 2,  // Double the slippage
            active: false
        },
        {
            type: 'liquidity',
            threshold: 70,  // 70% liquidity drop
            multiplier: 3,  // Triple the slippage
            active: false
        },
        {
            type: 'gas',
            threshold: 1000,  // 1000 gwei
            multiplier: 1.5,  // 1.5x slippage
            active: false
        }
    ];

    private readonly BASE_TOKEN_PAIRS: TokenPairConfig[] = [
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22',  // cbETH
                symbol: 'cbETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0xFDa619b6d20975be80A10332cD39b9a4b0FAa8BB',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                },
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 100  // 1%
        },
        {
            tokenA: {
                address: '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                symbol: 'BALD',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1',  // TOSHI
                symbol: 'TOSHI',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0xb7845eBf06B1E43EF8e475F7A6Dc4C7994d0eF46',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x940181a94A35A4569E4529A3CDfB74e38FD98631',  // DEGEN
                symbol: 'DEGEN',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0x9CD7C03C82F9686fBB86Ba258cA1308B7BEe0F76',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x940181a94A35A4569E4529A3CDfB74e38FD98631',  // DEGEN
                symbol: 'DEGEN',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x9CD7C03C82F9686fBB86Ba258cA1308B7BEe0F76',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('15'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                symbol: 'BALD',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1',  // TOSHI
                symbol: 'TOSHI',
                decimals: 18
            },
            dexes: [
                {
                    address: '0xb7845eBf06B1E43EF8e475F7A6Dc4C7994d0eF46',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',  // Virtual
                symbol: 'Virtual',
                decimals: 18
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',  // AIXBT
                symbol: 'AIXBT',
                decimals: 18
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',
                symbol: 'WETH',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',
                symbol: 'WETH',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
import { ethers } from 'ethers';
import { Provider, JsonRpcProvider } from '@ethersproject/providers';
import { Contract } from '@ethersproject/contracts';
import { VolumeAnalyzer } from './utils/VolumeAnalyzer';
import { VolumeData } from './types/dex';
import { QUALITY_THRESHOLDS } from './config/constants';
import { DexDataProvider } from './services/DexDataProvider';
import { PairGasOptimizer } from './utils/PairGasOptimizer';

export enum DEX {
    BASESWAP = 'BASESWAP',
    AERODROME = 'AERODROME',
    SUSHISWAP = 'SUSHISWAP',
    PANCAKESWAP = 'PANCAKESWAP',
    UNISWAP_V3 = 'UNISWAP_V3'
}

export interface TransactionWithTo extends ethers.TransactionResponse {
    to: string;
    blockTimestamp?: number;
}

export interface TradeRecord {
    timestamp: number;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    strategy: string;
    profit: number;
    gasUsed: bigint;
    slippage: number;
    duration: number;
}

export interface LiquidityMetrics {
    depth: number;
    volatility: number;
    volume: number;
    tradeDistribution: {
        largeTradesRatio: number;
        mediumTradesRatio: number;
        smallTradesRatio: number;
    };
}

export interface LiquidityAnalysis {
    volumeScore: number;
    depthScore: number;
    volatilityScore: number;
    healthScore: number;
    recentTrades: {
        count: number;
        averageSize: number;
        largestTrade: number;
        timeWeightedVolume: number;
    };
}

export interface Trade {
    timestamp: number;
    amount: bigint;
    price: bigint;
    hash: string;
    blockNumber: number;
}

export interface PoolData {
    reserves: {
        reserve0: bigint;
        reserve1: bigint;
    };
    totalLiquidity: bigint;
    pair: string;
}

export interface MempoolTx {
    hash: string;
    to: string;
    from: string;
    data: string;
    value: bigint;
    gasPrice: bigint;
    maxFeePerGas?: bigint;
    maxPriorityFeePerGas?: bigint;
}

export interface MEVPattern {
    type: string;
    confidence: number;
    gasPricePattern: string;
    blockSpan: number;
    frequency: number;
}

export interface MEVActivityLog {
    timestamp: number;
    blockNumber: number;
    pattern: MEVPattern;
    attackerAddresses: string[];
    victimAddresses: string[];
    estimatedProfit: number;
    gasUsed: bigint;
    details: string;
}

export interface LiquidityDepthAnalysis {
    totalLiquidity: bigint;
    concentrationScore: number;
    healthScore: number;
}

export interface MEVAnalysis {
    sandwichRisk: number;
    frontrunRisk: number;
    backrunRisk: number;
    timingRisk: number;
    estimatedMEVLoss: number;
    detectedPatterns: MEVPattern[];
    riskFactors: {
        liquidityRisk: number;
        volumeRisk: number;
        historicalRisk: number;
        mempoolRisk: number;
    };
}

export interface PriceDataPoint {
    timestamp: number;
    price: number;
    volume: bigint;
    blockNumber: number;
}

export interface LiquiditySnapshot {
    price: number;
    depth: bigint;
    slippage: number;
    timeStamp: number;
}

export interface PriceImpactAnalysis {
    expectedImpact: number;
    worstCase: number;
    confidence: number;
    recommendedMaxSize: bigint;
    liquidityScore: number;
}

export interface CrossPoolLiquidity {
    poolAddress: string;
    liquidity: bigint;
    fee: number;
    utilization: number;
    lastUpdateTime: number;
}

export interface GasCosts {
    current: bigint;
    historical: {
        timestamp: number;
        cost: bigint;
    }[];
    priority: number;
}

export interface SlippageConfig {
    min: number;
    max: number;
    dynamic: boolean;
}

export interface EmergencyCondition {
    type: 'volatility' | 'liquidity' | 'gas' | 'custom';
    threshold: number;
    multiplier: number;
    active: boolean;
}

export interface SlippageEvent {
    type: 'warning' | 'emergency' | 'info';
    timestamp: number;
    tokenAddress: string;
    slippage: number;
    reason: string;
    conditions?: EmergencyCondition[];
    recommendation?: string;
}

export interface HopSlippage {
    dexAddress: string;
    tokenIn: string;
    tokenOut: string;
    expectedSlippage: number;
    maxSlippage: number;
    confidence: number;
}

export interface MultiHopSlippage {
    totalExpectedSlippage: number;
    totalMaxSlippage: number;
    overallConfidence: number;
    hops: HopSlippage[];
    recommendation: string;
}

export interface TokenPairConfig {
    tokenA: {
        address: string;
        symbol: string;
        decimals: number;
    };
    tokenB: {
        address: string;
        symbol: string;
        decimals: number;
    };
    dexes: {
        address: string;
        protocol: string;
        fee?: number;
    }[];
    minLiquidity: bigint;
    maxSlippage: number;
}

export interface ProtocolConfig {
    type: 'lending' | 'dex';
    name: string;
    address: string;
    supportedTokens: string[];
    features: string[];
    maxLeverage?: number;
    borrowFee?: number;
    tradeFee?: number;
}

export interface LendingProtocolState {
    token: string;
    supplyApy: number;
    borrowApy: number;
    totalSupply: bigint;
    availableLiquidity: bigint;
    utilizationRate: number;
    collateralFactor: number;
}

export interface PairStrategy {
    type: 'momentum' | 'mean-reversion' | 'liquidity-driven' | 'correlation';
    timeWindow: number;
    parameters: {
        entryThreshold: number;
        exitThreshold: number;
        stopLoss: number;
        maxPositionSize: bigint;
        minVolume: bigint;
    };
    correlatedPairs?: string[];
}

export interface StrategyState {
    active: boolean;
    lastUpdate: number;
    currentPosition: bigint;
    entryPrice: number;
    profitLoss: number;
    successRate: number;
    totalTrades: number;
}

export interface LiquidityDepthHistory {
    timestamp: number;
    depth: bigint;
    fragmentationIndex: number;
    stability: number;
    concentration: number;
}

export interface DepthAnalysis {
    currentDepth: bigint;
    historicalDepth: {
        mean: bigint;
        volatility: number;
        trend: 'increasing' | 'decreasing' | 'stable';
    };
    fragmentation: {
        index: number;
        largestPoolShare: number;
        poolCount: number;
    };
    stability: {
        score: number;
        confidenceInterval: number;
        lastVolatilitySpike: number;
    };
    slippageEstimate: {
        predicted: number;
        worstCase: number;
        confidence: number;
    };
}

export interface VolumeSnapshot {
    timestamp: number;
    volume: bigint;
    tradeCount: number;
    averageTradeSize: bigint;
    largestTrade: bigint;
}

export interface VolumeAnalysis {
    current: {
        hourly: bigint;
        daily: bigint;
        weekly: bigint;
    };
    historical: {
        average: {
            hourly: bigint;
            daily: bigint;
            weekly: bigint;
        };
        trend: 'increasing' | 'decreasing' | 'stable';
        volatility: number;
    };
    patterns: {
        spikes: number;
        consistency: number;
        distribution: {
            largeTradesPercent: number;
            mediumTradesPercent: number;
            smallTradesPercent: number;
        };
    };
}

export interface PerformanceMetrics {
    overall: {
        successRate: number;
        totalTrades: number;
        totalProfit: number;
        averageProfit: number;
        sharpeRatio: number;
        maxDrawdown: number;
        winLossRatio: number;
    };
    timeFrames: {
        hourly: {
            trades: number;
            profit: number;
            successRate: number;
        };
        daily: {
            trades: number;
            profit: number;
            successRate: number;
        };
        weekly: {
            trades: number;
            profit: number;
            successRate: number;
        };
    };
    byToken: {
        [token: string]: {
            trades: number;
            profit: number;
            successRate: number;
            averageProfit: number;
            bestTrade: number;
            worstTrade: number;
        };
    };
    byStrategy: {
        [strategy: string]: {
            trades: number;
            profit: number;
            successRate: number;
            averageProfit: number;
            riskAdjustedReturn: number;
        };
    };
}

// MempoolMonitor class for tracking pending transactions
class MempoolMonitor {
    private provider: JsonRpcProvider;
    private pendingTxs: Map<string, MempoolTx>;
    private isMonitoring: boolean;

    constructor(provider: JsonRpcProvider) {
        this.provider = provider;
        this.pendingTxs = new Map();
        this.isMonitoring = false;
        this.startMonitoring();
    }

    private startMonitoring() {
        if (this.isMonitoring) return;
        this.isMonitoring = true;

        this.provider.on('pending', async (txHash: string) => {
            try {
                const tx = await this.provider.getTransaction(txHash);
                if (tx && this.isSwapTransaction(tx)) {
                    this.pendingTxs.set(txHash, {
                        hash: tx.hash,
                        to: tx.to || '',
                        from: tx.from,
                        data: tx.data,
                        value: tx.value,
                        gasPrice: tx.gasPrice || 0n,
                        maxFeePerGas: tx.maxFeePerGas,
                        maxPriorityFeePerGas: tx.maxPriorityFeePerGas
                    });
                }
            } catch (error) {
                console.error('Error processing pending transaction:', error);
            }
        });
    }

    private isSwapTransaction(tx: ethers.TransactionResponse): boolean {
        // Common DEX swap function signatures
        const swapSignatures = [
            '0x38ed1739', // swapExactTokensForTokens
            '0x7ff36ab5', // swapExactETHForTokens
            '0x18cbafe5', // swapExactTokensForETH
            '0x8803dbee'  // swapTokensForExactTokens
        ];

        return tx.data && swapSignatures.some(sig => tx.data.startsWith(sig));
    }

    async getPendingSwaps(tokenA: string, tokenB: string): Promise<MempoolTx[]> {
        const relevantTxs: MempoolTx[] = [];

        for (const tx of this.pendingTxs.values()) {
            try {
                const decodedData = this.decodeSwapData(tx.data);
                if (this.isRelevantSwap(decodedData, tokenA, tokenB)) {
                    relevantTxs.push(tx);
                }
            } catch (error) {
                continue;
            }
        }

        return relevantTxs;
    }

    private decodeSwapData(data: string): { path: string[] } {
        const iface = new ethers.Interface([
            'function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)'
        ]);

        try {
            const decoded = iface.parseTransaction({ data });
            const path = decoded.args.path || [];
            return { path };
        } catch (error) {
            throw new Error('Unable to decode swap data');
        }
    }

    private isRelevantSwap(
        decodedData: { path: string[] },
        tokenA: string,
        tokenB: string
    ): boolean {
        const { path } = decodedData;
        const normalizedTokenA = tokenA.toLowerCase();
        const normalizedTokenB = tokenB.toLowerCase();
        return path.some(token => 
            token.toLowerCase() === normalizedTokenA ||
            token.toLowerCase() === normalizedTokenB
        );
    }

    stop() {
        this.isMonitoring = false;
        this.provider.removeAllListeners('pending');
    }
}

interface PairGasStats {
    averageGasUsed: bigint;
    successRate: number;
    failureCount: number;
    optimalGasMultiplier: number;
    historicalGasPrices: { timestamp: number; gasPrice: bigint; success: boolean }[];
    lastOptimization: number;
}

class PairGasOptimizer {
    private pairGasStats: Map<string, PairGasStats> = new Map();
    private readonly OPTIMIZATION_INTERVAL = 3600000; // 1 hour
    private readonly MIN_DATA_POINTS = 10;
    private readonly MAX_HISTORY_POINTS = 100;
    private readonly BASE_GAS_MULTIPLIER = 1.1;
    private readonly MAX_GAS_MULTIPLIER = 2.0;

    updatePairGasStats(
        pair: string,
        gasUsed: bigint,
        gasPrice: bigint,
        success: boolean
    ): void {
        const stats = this.pairGasStats.get(pair) || this.getDefaultStats();
        
        // Update stats
        stats.averageGasUsed = (stats.averageGasUsed * BigInt(stats.historicalGasPrices.length) + gasUsed) / 
            BigInt(stats.historicalGasPrices.length + 1);
        
        if (!success) stats.failureCount++;
        
        stats.successRate = (stats.successRate * stats.historicalGasPrices.length + (success ? 100 : 0)) / 
            (stats.historicalGasPrices.length + 1);

        // Add to history
        stats.historicalGasPrices.push({
            timestamp: Date.now(),
            gasPrice,
            success
        });

        // Trim history if needed
        if (stats.historicalGasPrices.length > this.MAX_HISTORY_POINTS) {
            stats.historicalGasPrices.shift();
        }

        this.pairGasStats.set(pair, stats);
        this.optimizeGasMultiplier(pair);
    }

    getOptimalGasPrice(pair: string, baseGasPrice: bigint): bigint {
        const stats = this.pairGasStats.get(pair) || this.getDefaultStats();
        return baseGasPrice * BigInt(Math.floor(stats.optimalGasMultiplier * 100)) / 100n;
    }

    private optimizeGasMultiplier(pair: string): void {
        const stats = this.pairGasStats.get(pair)!;
        const now = Date.now();

        // Only optimize if enough time has passed and we have enough data points
        if (now - stats.lastOptimization < this.OPTIMIZATION_INTERVAL || 
            stats.historicalGasPrices.length < this.MIN_DATA_POINTS) {
            return;
        }

        const recentHistory = stats.historicalGasPrices.slice(-this.MIN_DATA_POINTS);
        
        // Calculate success rate with current multiplier
        const currentSuccessRate = recentHistory.filter(h => h.success).length / recentHistory.length * 100;

        // Adjust multiplier based on success rate and failure patterns
        let newMultiplier = stats.optimalGasMultiplier;
        
        if (currentSuccessRate < 90) {
            // Increase multiplier if success rate is too low
            newMultiplier = Math.min(
                stats.optimalGasMultiplier * 1.1,
                this.MAX_GAS_MULTIPLIER
            );
        } else if (currentSuccessRate > 98 && stats.optimalGasMultiplier > this.BASE_GAS_MULTIPLIER) {
            // Gradually decrease multiplier if success rate is very high
            newMultiplier = Math.max(
                stats.optimalGasMultiplier * 0.95,
                this.BASE_GAS_MULTIPLIER
            );
        }

        // Update stats
        stats.optimalGasMultiplier = newMultiplier;
        stats.lastOptimization = now;
        this.pairGasStats.set(pair, stats);
    }

    private getDefaultStats(): PairGasStats {
        return {
            averageGasUsed: 0n,
            successRate: 100,
            failureCount: 0,
            optimalGasMultiplier: this.BASE_GAS_MULTIPLIER,
            historicalGasPrices: [],
            lastOptimization: 0
        };
    }
}

export class ArbitrageBot {
    private readonly MEV_PATTERNS = {
        FRONTRUN: {
            minGasIncrease: 1.2,
            maxBlockSpan: 2,
            suspiciousPatterns: ['high-low', 'sudden-spike', 'repeated-address']
        },
        SANDWICH: {
            minGasIncrease: 1.5,
            maxSpread: 2.0,
            maxBlockWindow: 3,
            suspiciousPatterns: ['high-low-high', 'multi-tx-same-block']
        },
        TIMING: {
            maxRepeatCount: 3,
            blockThreshold: 5,
            suspiciousPatterns: ['repeated-failures', 'time-correlation']
        },
        BACKRUN: {
            minGasIncrease: 1.3,
            maxDelay: 2, // blocks
            suspiciousPatterns: ['delayed-high-gas', 'mempool-camping']
        }
    };

    private readonly MEV_PROTECTION = {
        GAS: {
            priorityMultiplier: 1.3,    // Multiply priority fee for protection
            maxBoost: 2.0,              // Maximum gas boost for high-risk situations
            minPriority: 2.0            // Minimum priority fee (gwei)
        },
        SLIPPAGE: {
            baseSlippage: 50,           // 0.5% base slippage
            maxDynamic: 300,            // 3% maximum dynamic slippage
            impactMultiplier: 1.5       // Multiply slippage for high impact trades
        },
        TIMING: {
            maxBlockDelay: 3,           // Maximum blocks to wait
            minConfirmations: 1,        // Minimum confirmations needed
            maxRetries: 3               // Maximum retry attempts
        }
    };

    private readonly SLIPPAGE_CONFIG: SlippageConfig = {
        min: 50,   // 0.5%
        max: 300,  // 3%
        dynamic: true
    };

    private readonly SLIPPAGE_MONITOR_INTERVAL = 60000; // 1 minute
    private slippageEvents: SlippageEvent[] = [];
    private slippageMonitorHandle?: NodeJS.Timeout;

    private provider: Provider;
    private mevActivityLogs: MEVActivityLog[] = [];
    private isRunning: boolean = false;
    private priceHistory: Map<string, PriceDataPoint[]> = new Map();
    private readonly MAX_PRICE_HISTORY_LENGTH = 1000;  // Keep last 1000 price points
    private liquiditySnapshots: Map<string, LiquiditySnapshot[]> = new Map();
    private poolLiquidity: Map<string, CrossPoolLiquidity[]> = new Map();
    private gasCosts: GasCosts = {
        current: 0n,
        historical: [],
        priority: 50
    };

    private emergencyConditions: EmergencyCondition[] = [
        {
            type: 'volatility',
            threshold: 50,  // 50% volatility
            multiplier: 2,  // Double the slippage
            active: false
        },
        {
            type: 'liquidity',
            threshold: 70,  // 70% liquidity drop
            multiplier: 3,  // Triple the slippage
            active: false
        },
        {
            type: 'gas',
            threshold: 1000,  // 1000 gwei
            multiplier: 1.5,  // 1.5x slippage
            active: false
        }
    ];

    private readonly BASE_TOKEN_PAIRS: TokenPairConfig[] = [
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22',  // cbETH
                symbol: 'cbETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0xFDa619b6d20975be80A10332cD39b9a4b0FAa8BB',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                },
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 100  // 1%
        },
        {
            tokenA: {
                address: '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                symbol: 'BALD',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1',  // TOSHI
                symbol: 'TOSHI',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0xb7845eBf06B1E43EF8e475F7A6Dc4C7994d0eF46',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x940181a94A35A4569E4529A3CDfB74e38FD98631',  // DEGEN
                symbol: 'DEGEN',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0x9CD7C03C82F9686fBB86Ba258cA1308B7BEe0F76',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x940181a94A35A4569E4529A3CDfB74e38FD98631',  // DEGEN
                symbol: 'DEGEN',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x9CD7C03C82F9686fBB86Ba258cA1308B7BEe0F76',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('15'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                symbol: 'BALD',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1',  // TOSHI
                symbol: 'TOSHI',
                decimals: 18
            },
            dexes: [
                {
                    address: '0xb7845eBf06B1E43EF8e475F7A6Dc4C7994d0eF46',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',  // Virtual
                symbol: 'Virtual',
                decimals: 18
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',  // AIXBT
                symbol: 'AIXBT',
                decimals: 18
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',
                symbol: 'WETH',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',
                symbol: 'WETH',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
import { ethers } from 'ethers';
import { Provider, JsonRpcProvider } from '@ethersproject/providers';
import { Contract } from '@ethersproject/contracts';
import { VolumeAnalyzer } from './utils/VolumeAnalyzer';
import { VolumeData } from './types/dex';
import { QUALITY_THRESHOLDS } from './config/constants';
import { DexDataProvider } from './services/DexDataProvider';
import { PairGasOptimizer } from './utils/PairGasOptimizer';

export enum DEX {
    BASESWAP,
    AERODROME,
    SUSHISWAP,
    PANCAKESWAP,
    UNISWAP_V3
}

interface TransactionWithTo extends ethers.TransactionResponse {
    to: string;
    blockTimestamp?: number;
}

interface TradeRecord {
    timestamp: number;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    strategy: string;
    profit: number;
    gasUsed: bigint;
    slippage: number;
    duration: number;
}

interface LiquidityMetrics {
    depth: number;
    volatility: number;
    volume: number;
    tradeDistribution: {
        largeTradesRatio: number;
        mediumTradesRatio: number;
        smallTradesRatio: number;
    };
}

interface LiquidityAnalysis {
    volumeScore: number;
    depthScore: number;
    volatilityScore: number;
    healthScore: number;
    recentTrades: {
        count: number;
        averageSize: number;
        largestTrade: number;
        timeWeightedVolume: number;
    };
}

interface Trade {
    timestamp: number;
    amount: bigint;
    price: bigint;
    hash: string;
    blockNumber: number;
}

interface PoolData {
    reserves: {
        reserve0: bigint;
        reserve1: bigint;
    };
    totalLiquidity: bigint;
    pair: string;
}

interface MempoolTx {
    hash: string;
    to: string;
    from: string;
    data: string;
    value: bigint;
    gasPrice: bigint;
    maxFeePerGas?: bigint;
    maxPriorityFeePerGas?: bigint;
}

interface MEVPattern {
    type: string;
    confidence: number;
    gasPricePattern: string;
    blockSpan: number;
    frequency: number;
}

interface MEVActivityLog {
    timestamp: number;
    blockNumber: number;
    pattern: MEVPattern;
    attackerAddresses: string[];
    victimAddresses: string[];
    estimatedProfit: number;
    gasUsed: bigint;
    details: string;
}

interface LiquidityDepthAnalysis {
    totalLiquidity: bigint;
    concentrationScore: number;
    healthScore: number;
}

interface MEVAnalysis {
    sandwichRisk: number;
    frontrunRisk: number;
    backrunRisk: number;
    timingRisk: number;
    estimatedMEVLoss: number;
    detectedPatterns: MEVPattern[];
    riskFactors: {
        liquidityRisk: number;
        volumeRisk: number;
        historicalRisk: number;
        mempoolRisk: number;
    };
}

interface PriceDataPoint {
    timestamp: number;
    price: number;
    volume: bigint;
    blockNumber: number;
}

interface LiquiditySnapshot {
    price: number;
    depth: bigint;
    slippage: number;
    timeStamp: number;
}

interface PriceImpactAnalysis {
    expectedImpact: number;
    worstCase: number;
    confidence: number;
    recommendedMaxSize: bigint;
    liquidityScore: number;
}

interface CrossPoolLiquidity {
    poolAddress: string;
    liquidity: bigint;
    fee: number;
    utilization: number;
    lastUpdateTime: number;
}

interface GasCosts {
    current: bigint;
    historical: {
        timestamp: number;
        cost: bigint;
    }[];
    priority: number;
}

interface SlippageConfig {
    min: number;
    max: number;
    dynamic: boolean;
}

interface EmergencyCondition {
    type: 'volatility' | 'liquidity' | 'gas' | 'custom';
    threshold: number;
    multiplier: number;
    active: boolean;
}

interface SlippageEvent {
    type: 'warning' | 'emergency' | 'info';
    timestamp: number;
    tokenAddress: string;
    slippage: number;
    reason: string;
    conditions?: EmergencyCondition[];
    recommendation?: string;
}

interface HopSlippage {
    dexAddress: string;
    tokenIn: string;
    tokenOut: string;
    expectedSlippage: number;
    maxSlippage: number;
    confidence: number;
}

interface MultiHopSlippage {
    totalExpectedSlippage: number;
    totalMaxSlippage: number;
    overallConfidence: number;
    hops: HopSlippage[];
    recommendation: string;
}

interface TokenPairConfig {
    tokenA: {
        address: string;
        symbol: string;
        decimals: number;
    };
    tokenB: {
        address: string;
        symbol: string;
        decimals: number;
    };
    dexes: {
        address: string;
        protocol: string;
        fee?: number;
    }[];
    minLiquidity: bigint;
    maxSlippage: number;
}

interface ProtocolConfig {
    type: 'lending' | 'dex';
    name: string;
    address: string;
    supportedTokens: string[];
    features: string[];
    maxLeverage?: number;
    borrowFee?: number;
    tradeFee?: number;
}

interface LendingProtocolState {
    token: string;
    supplyApy: number;
    borrowApy: number;
    totalSupply: bigint;
    availableLiquidity: bigint;
    utilizationRate: number;
    collateralFactor: number;
}

interface PairStrategy {
    type: 'momentum' | 'mean-reversion' | 'liquidity-driven' | 'correlation';
    timeWindow: number;
    parameters: {
        entryThreshold: number;
        exitThreshold: number;
        stopLoss: number;
        maxPositionSize: bigint;
        minVolume: bigint;
    };
    correlatedPairs?: string[];
}

interface StrategyState {
    active: boolean;
    lastUpdate: number;
    currentPosition: bigint;
    entryPrice: number;
    profitLoss: number;
    successRate: number;
    totalTrades: number;
}

interface LiquidityDepthHistory {
    timestamp: number;
    depth: bigint;
    fragmentationIndex: number;
    stability: number;
    concentration: number;
}

interface DepthAnalysis {
    currentDepth: bigint;
    historicalDepth: {
        mean: bigint;
        volatility: number;
        trend: 'increasing' | 'decreasing' | 'stable';
    };
    fragmentation: {
        index: number;
        largestPoolShare: number;
        poolCount: number;
    };
    stability: {
        score: number;
        confidenceInterval: number;
        lastVolatilitySpike: number;
    };
    slippageEstimate: {
        predicted: number;
        worstCase: number;
        confidence: number;
    };
}

interface VolumeSnapshot {
    timestamp: number;
    volume: bigint;
    tradeCount: number;
    averageTradeSize: bigint;
    largestTrade: bigint;
}

interface VolumeAnalysis {
    current: {
        hourly: bigint;
        daily: bigint;
        weekly: bigint;
    };
    historical: {
        average: {
            hourly: bigint;
            daily: bigint;
            weekly: bigint;
        };
        trend: 'increasing' | 'decreasing' | 'stable';
        volatility: number;
    };
    patterns: {
        spikes: number;
        consistency: number;
        distribution: {
            largeTradesPercent: number;
            mediumTradesPercent: number;
            smallTradesPercent: number;
        };
    };
}

interface PerformanceMetrics {
    overall: {
        successRate: number;
        totalTrades: number;
        totalProfit: number;
        averageProfit: number;
        sharpeRatio: number;
        maxDrawdown: number;
        winLossRatio: number;
    };
    timeFrames: {
        hourly: {
            trades: number;
            profit: number;
            successRate: number;
        };
        daily: {
            trades: number;
            profit: number;
            successRate: number;
        };
        weekly: {
            trades: number;
            profit: number;
            successRate: number;
        };
    };
    byToken: {
        [token: string]: {
            trades: number;
            profit: number;
            successRate: number;
            averageProfit: number;
            bestTrade: number;
            worstTrade: number;
        };
    };
    byStrategy: {
        [strategy: string]: {
            trades: number;
            profit: number;
            successRate: number;
            averageProfit: number;
            riskAdjustedReturn: number;
        };
    };
}

// MempoolMonitor class for tracking pending transactions
class MempoolMonitor {
    private provider: JsonRpcProvider;
    private pendingTxs: Map<string, MempoolTx>;
    private isMonitoring: boolean;

    constructor(provider: JsonRpcProvider) {
        this.provider = provider;
        this.pendingTxs = new Map();
        this.isMonitoring = false;
        this.startMonitoring();
    }

    private startMonitoring() {
        if (this.isMonitoring) return;
        this.isMonitoring = true;

        this.provider.on('pending', async (txHash: string) => {
            try {
                const tx = await this.provider.getTransaction(txHash);
                if (tx && this.isSwapTransaction(tx)) {
                    this.pendingTxs.set(txHash, {
                        hash: tx.hash,
                        to: tx.to || '',
                        from: tx.from,
                        data: tx.data,
                        value: tx.value,
                        gasPrice: tx.gasPrice || 0n,
                        maxFeePerGas: tx.maxFeePerGas,
                        maxPriorityFeePerGas: tx.maxPriorityFeePerGas
                    });
                }
            } catch (error) {
                console.error('Error processing pending transaction:', error);
            }
        });
    }

    private isSwapTransaction(tx: ethers.TransactionResponse): boolean {
        // Common DEX swap function signatures
        const swapSignatures = [
            '0x38ed1739', // swapExactTokensForTokens
            '0x7ff36ab5', // swapExactETHForTokens
            '0x18cbafe5', // swapExactTokensForETH
            '0x8803dbee'  // swapTokensForExactTokens
        ];

        return tx.data && swapSignatures.some(sig => tx.data.startsWith(sig));
    }

    async getPendingSwaps(tokenA: string, tokenB: string): Promise<MempoolTx[]> {
        const relevantTxs: MempoolTx[] = [];

        for (const tx of this.pendingTxs.values()) {
            try {
                const decodedData = this.decodeSwapData(tx.data);
                if (this.isRelevantSwap(decodedData, tokenA, tokenB)) {
                    relevantTxs.push(tx);
                }
            } catch (error) {
                continue;
            }
        }

        return relevantTxs;
    }

    private decodeSwapData(data: string): { path: string[] } {
        const iface = new ethers.Interface([
            'function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)'
        ]);

        try {
            const decoded = iface.parseTransaction({ data });
            const path = decoded.args.path || [];
            return { path };
        } catch (error) {
            throw new Error('Unable to decode swap data');
        }
    }

    private isRelevantSwap(
        decodedData: { path: string[] },
        tokenA: string,
        tokenB: string
    ): boolean {
        const { path } = decodedData;
        const normalizedTokenA = tokenA.toLowerCase();
        const normalizedTokenB = tokenB.toLowerCase();
        return path.some(token => 
            token.toLowerCase() === normalizedTokenA ||
            token.toLowerCase() === normalizedTokenB
        );
    }

    stop() {
        this.isMonitoring = false;
        this.provider.removeAllListeners('pending');
    }
}

interface PairGasStats {
    averageGasUsed: bigint;
    successRate: number;
    failureCount: number;
    optimalGasMultiplier: number;
    historicalGasPrices: { timestamp: number; gasPrice: bigint; success: boolean }[];
    lastOptimization: number;
}

class PairGasOptimizer {
    private pairGasStats: Map<string, PairGasStats> = new Map();
    private readonly OPTIMIZATION_INTERVAL = 3600000; // 1 hour
    private readonly MIN_DATA_POINTS = 10;
    private readonly MAX_HISTORY_POINTS = 100;
    private readonly BASE_GAS_MULTIPLIER = 1.1;
    private readonly MAX_GAS_MULTIPLIER = 2.0;

    updatePairGasStats(
        pair: string,
        gasUsed: bigint,
        gasPrice: bigint,
        success: boolean
    ): void {
        const stats = this.pairGasStats.get(pair) || this.getDefaultStats();
        
        // Update stats
        stats.averageGasUsed = (stats.averageGasUsed * BigInt(stats.historicalGasPrices.length) + gasUsed) / 
            BigInt(stats.historicalGasPrices.length + 1);
        
        if (!success) stats.failureCount++;
        
        stats.successRate = (stats.successRate * stats.historicalGasPrices.length + (success ? 100 : 0)) / 
            (stats.historicalGasPrices.length + 1);

        // Add to history
        stats.historicalGasPrices.push({
            timestamp: Date.now(),
            gasPrice,
            success
        });

        // Trim history if needed
        if (stats.historicalGasPrices.length > this.MAX_HISTORY_POINTS) {
            stats.historicalGasPrices.shift();
        }

        this.pairGasStats.set(pair, stats);
        this.optimizeGasMultiplier(pair);
    }

    getOptimalGasPrice(pair: string, baseGasPrice: bigint): bigint {
        const stats = this.pairGasStats.get(pair) || this.getDefaultStats();
        return baseGasPrice * BigInt(Math.floor(stats.optimalGasMultiplier * 100)) / 100n;
    }

    private optimizeGasMultiplier(pair: string): void {
        const stats = this.pairGasStats.get(pair)!;
        const now = Date.now();

        // Only optimize if enough time has passed and we have enough data points
        if (now - stats.lastOptimization < this.OPTIMIZATION_INTERVAL || 
            stats.historicalGasPrices.length < this.MIN_DATA_POINTS) {
            return;
        }

        const recentHistory = stats.historicalGasPrices.slice(-this.MIN_DATA_POINTS);
        
        // Calculate success rate with current multiplier
        const currentSuccessRate = recentHistory.filter(h => h.success).length / recentHistory.length * 100;

        // Adjust multiplier based on success rate and failure patterns
        let newMultiplier = stats.optimalGasMultiplier;
        
        if (currentSuccessRate < 90) {
            // Increase multiplier if success rate is too low
            newMultiplier = Math.min(
                stats.optimalGasMultiplier * 1.1,
                this.MAX_GAS_MULTIPLIER
            );
        } else if (currentSuccessRate > 98 && stats.optimalGasMultiplier > this.BASE_GAS_MULTIPLIER) {
            // Gradually decrease multiplier if success rate is very high
            newMultiplier = Math.max(
                stats.optimalGasMultiplier * 0.95,
                this.BASE_GAS_MULTIPLIER
            );
        }

        // Update stats
        stats.optimalGasMultiplier = newMultiplier;
        stats.lastOptimization = now;
        this.pairGasStats.set(pair, stats);
    }

    private getDefaultStats(): PairGasStats {
        return {
            averageGasUsed: 0n,
            successRate: 100,
            failureCount: 0,
            optimalGasMultiplier: this.BASE_GAS_MULTIPLIER,
            historicalGasPrices: [],
            lastOptimization: 0
        };
    }
}

export class ArbitrageBot {
    private readonly MEV_PATTERNS = {
        FRONTRUN: {
            minGasIncrease: 1.2,
            maxBlockSpan: 2,
            suspiciousPatterns: ['high-low', 'sudden-spike', 'repeated-address']
        },
        SANDWICH: {
            minGasIncrease: 1.5,
            maxSpread: 2.0,
            maxBlockWindow: 3,
            suspiciousPatterns: ['high-low-high', 'multi-tx-same-block']
        },
        TIMING: {
            maxRepeatCount: 3,
            blockThreshold: 5,
            suspiciousPatterns: ['repeated-failures', 'time-correlation']
        },
        BACKRUN: {
            minGasIncrease: 1.3,
            maxDelay: 2, // blocks
            suspiciousPatterns: ['delayed-high-gas', 'mempool-camping']
        }
    };

    private readonly MEV_PROTECTION = {
        GAS: {
            priorityMultiplier: 1.3,    // Multiply priority fee for protection
            maxBoost: 2.0,              // Maximum gas boost for high-risk situations
            minPriority: 2.0            // Minimum priority fee (gwei)
        },
        SLIPPAGE: {
            baseSlippage: 50,           // 0.5% base slippage
            maxDynamic: 300,            // 3% maximum dynamic slippage
            impactMultiplier: 1.5       // Multiply slippage for high impact trades
        },
        TIMING: {
            maxBlockDelay: 3,           // Maximum blocks to wait
            minConfirmations: 1,        // Minimum confirmations needed
            maxRetries: 3               // Maximum retry attempts
        }
    };

    private readonly SLIPPAGE_CONFIG: SlippageConfig = {
        min: 50,   // 0.5%
        max: 300,  // 3%
        dynamic: true
    };

    private readonly SLIPPAGE_MONITOR_INTERVAL = 60000; // 1 minute
    private slippageEvents: SlippageEvent[] = [];
    private slippageMonitorHandle?: NodeJS.Timeout;

    private provider: Provider;
    private mevActivityLogs: MEVActivityLog[] = [];
    private isRunning: boolean = false;
    private priceHistory: Map<string, PriceDataPoint[]> = new Map();
    private readonly MAX_PRICE_HISTORY_LENGTH = 1000;  // Keep last 1000 price points
    private liquiditySnapshots: Map<string, LiquiditySnapshot[]> = new Map();
    private poolLiquidity: Map<string, CrossPoolLiquidity[]> = new Map();
    private gasCosts: GasCosts = {
        current: 0n,
        historical: [],
        priority: 50
    };

    private emergencyConditions: EmergencyCondition[] = [
        {
            type: 'volatility',
            threshold: 50,  // 50% volatility
            multiplier: 2,  // Double the slippage
            active: false
        },
        {
            type: 'liquidity',
            threshold: 70,  // 70% liquidity drop
            multiplier: 3,  // Triple the slippage
            active: false
        },
        {
            type: 'gas',
            threshold: 1000,  // 1000 gwei
            multiplier: 1.5,  // 1.5x slippage
            active: false
        }
    ];

    private readonly BASE_TOKEN_PAIRS: TokenPairConfig[] = [
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22',  // cbETH
                symbol: 'cbETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0xFDa619b6d20975be80A10332cD39b9a4b0FAa8BB',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                },
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 100  // 1%
        },
        {
            tokenA: {
                address: '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                symbol: 'BALD',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1',  // TOSHI
                symbol: 'TOSHI',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0xb7845eBf06B1E43EF8e475F7A6Dc4C7994d0eF46',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x940181a94A35A4569E4529A3CDfB74e38FD98631',  // DEGEN
                symbol: 'DEGEN',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0x9CD7C03C82F9686fBB86Ba258cA1308B7BEe0F76',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x940181a94A35A4569E4529A3CDfB74e38FD98631',  // DEGEN
                symbol: 'DEGEN',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x9CD7C03C82F9686fBB86Ba258cA1308B7BEe0F76',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('15'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                symbol: 'BALD',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1',  // TOSHI
                symbol: 'TOSHI',
                decimals: 18
            },
            dexes: [
                {
                    address: '0xb7845eBf06B1E43EF8e475F7A6Dc4C7994d0eF46',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',  // Virtual
                symbol: 'Virtual',
                decimals: 18
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',  // AIXBT
                symbol: 'AIXBT',
                decimals: 18
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',
                symbol: 'WETH',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',
                symbol: 'WETH',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
import { ethers } from 'ethers';
import { Provider, JsonRpcProvider } from '@ethersproject/providers';
import { Contract } from '@ethersproject/contracts';
import { VolumeAnalyzer } from './utils/VolumeAnalyzer';
import { VolumeData } from './types/dex';
import { QUALITY_THRESHOLDS } from './config/constants';
import { DexDataProvider } from './services/DexDataProvider';
import { PairGasOptimizer } from './utils/PairGasOptimizer';

interface TransactionWithTo extends ethers.TransactionResponse {
    to: string;
    blockTimestamp?: number;
}

interface MEVPattern {
    type: string;
    confidence: number;
    gasPricePattern: string;
    blockSpan: number;
    frequency: number;
}

interface MEVActivityLog {
    timestamp: number;
    blockNumber: number;
    pattern: MEVPattern;
    attackerAddresses: string[];
    victimAddresses: string[];
    estimatedProfit: number;
    gasUsed: bigint;
    details: string;
}

interface LiquidityDepthAnalysis {
    totalLiquidity: bigint;
    concentrationScore: number;
    healthScore: number;
}

interface MEVAnalysis {
    sandwichRisk: number;
    frontrunRisk: number;
    backrunRisk: number;
    timingRisk: number;
    estimatedMEVLoss: number;
    detectedPatterns: MEVPattern[];
    riskFactors: {
        liquidityRisk: number;
        volumeRisk: number;
        historicalRisk: number;
        mempoolRisk: number;
    };
}

interface PriceDataPoint {
    timestamp: number;
    price: number;
    volume: bigint;
    blockNumber: number;
}

interface LiquiditySnapshot {
    price: number;
    depth: bigint;
    slippage: number;
    timeStamp: number;
}

interface PriceImpactAnalysis {
    expectedImpact: number;  // Percentage
    worstCase: number;      // Percentage
    confidence: number;     // 0-100
    recommendedMaxSize: bigint;
    liquidityScore: number; // 0-100
}

interface CrossPoolLiquidity {
    poolAddress: string;
    liquidity: bigint;
    fee: number;
    utilization: number;
    lastUpdateTime: number;
}

interface GasCosts {
    current: bigint;
    historical: {
        timestamp: number;
        cost: bigint;
    }[];
    priority: number;  // 0-100
}

interface SlippageConfig {
    min: number;      // Minimum slippage tolerance (basis points)
    max: number;      // Maximum slippage tolerance (basis points)
    dynamic: boolean; // Whether to use dynamic slippage
}

interface EmergencyCondition {
    type: 'volatility' | 'liquidity' | 'gas' | 'custom';
    threshold: number;
    multiplier: number;
    active: boolean;
}

interface SlippageEvent {
    type: 'warning' | 'emergency' | 'info';
    timestamp: number;
    tokenAddress: string;
    slippage: number;
    reason: string;
    conditions?: EmergencyCondition[];
    recommendation?: string;
}

interface HopSlippage {
    dexAddress: string;
    tokenIn: string;
    tokenOut: string;
    expectedSlippage: number;
    maxSlippage: number;
    confidence: number;
}

interface MultiHopSlippage {
    totalExpectedSlippage: number;
    totalMaxSlippage: number;
    overallConfidence: number;
    hops: HopSlippage[];
    recommendation: string;
}

interface TokenPairConfig {
    tokenA: {
        address: string;
        symbol: string;
        decimals: number;
    };
    tokenB: {
        address: string;
        symbol: string;
        decimals: number;
    };
    dexes: {
        address: string;
        protocol: string;
        fee?: number;
    }[];
    minLiquidity: bigint;
    maxSlippage: number;
}

interface ProtocolConfig {
    type: 'lending' | 'dex';
    name: string;
    address: string;
    supportedTokens: string[];
    features: string[];
    maxLeverage?: number;
    borrowFee?: number;
    tradeFee?: number;
}

interface LendingProtocolState {
    token: string;
    supplyApy: number;
    borrowApy: number;
    totalSupply: bigint;
    availableLiquidity: bigint;
    utilizationRate: number;
    collateralFactor: number;
}

interface PairStrategy {
    type: 'momentum' | 'mean-reversion' | 'liquidity-driven' | 'correlation';
    timeWindow: number;  // milliseconds
    parameters: {
        entryThreshold: number;
        exitThreshold: number;
        stopLoss: number;
        maxPositionSize: bigint;
        minVolume: bigint;
    };
    correlatedPairs?: string[];  // Array of correlated token pair addresses
}

interface StrategyState {
    active: boolean;
    lastUpdate: number;
    currentPosition: bigint;
    entryPrice: number;
    profitLoss: number;
    successRate: number;
    totalTrades: number;
}

interface LiquidityDepthHistory {
    timestamp: number;
    depth: bigint;
    fragmentationIndex: number;
    stability: number;
    concentration: number;
}

interface DepthAnalysis {
    currentDepth: bigint;
    historicalDepth: {
        mean: bigint;
        volatility: number;
        trend: 'increasing' | 'decreasing' | 'stable';
    };
    fragmentation: {
        index: number;  // 0-100, higher means more fragmented
        largestPoolShare: number;
        poolCount: number;
    };
    stability: {
        score: number;  // 0-100
        confidenceInterval: number;
        lastVolatilitySpike: number;
    };
    slippageEstimate: {
        predicted: number;
        worstCase: number;
        confidence: number;
    };
}

interface VolumeSnapshot {
    timestamp: number;
    volume: bigint;
    tradeCount: number;
    averageTradeSize: bigint;
    largestTrade: bigint;
}

interface VolumeAnalysis {
    current: {
        hourly: bigint;
        daily: bigint;
        weekly: bigint;
    };
    historical: {
        average: {
            hourly: bigint;
            daily: bigint;
            weekly: bigint;
        };
        trend: 'increasing' | 'decreasing' | 'stable';
        volatility: number;
    };
    patterns: {
        spikes: number;  // Number of volume spikes in last 24h
        consistency: number;  // 0-100 score
        distribution: {
            largeTradesPercent: number;
            mediumTradesPercent: number;
            smallTradesPercent: number;
        };
    };
}

interface PerformanceMetrics {
    overall: {
        successRate: number;
        totalTrades: number;
        totalProfit: number;
        averageProfit: number;
        sharpeRatio: number;
        maxDrawdown: number;
        winLossRatio: number;
    };
    timeFrames: {
        hourly: {
            trades: number;
            profit: number;
            successRate: number;
        };
        daily: {
            trades: number;
            profit: number;
            successRate: number;
        };
        weekly: {
            trades: number;
            profit: number;
            successRate: number;
        };
    };
    byToken: {
        [token: string]: {
            trades: number;
            profit: number;
            successRate: number;
            averageProfit: number;
            bestTrade: number;
            worstTrade: number;
        };
    };
    byStrategy: {
        [strategy: string]: {
            trades: number;
            profit: number;
            successRate: number;
            averageProfit: number;
            riskAdjustedReturn: number;
        };
    };
}

interface TradeRecord {
    timestamp: number;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    strategy: string;
    profit: number;
    gasUsed: bigint;
    slippage: number;
    duration: number;
}

interface LiquidityMetrics {
    depth: number;
    volatility: number;
    volume: number;
    tradeDistribution: {
        largeTradesRatio: number;
        mediumTradesRatio: number;
        smallTradesRatio: number;
    };
}

interface LiquidityAnalysis {
    volumeScore: number;
    depthScore: number;
    volatilityScore: number;
    healthScore: number;
    recentTrades: {
        count: number;
        averageSize: number;
        largestTrade: number;
        timeWeightedVolume: number;
    };
}

interface Trade {
    timestamp: number;
    amount: string;
    price: string;
}

interface PoolData {
    reserves: {
        reserve0: bigint;
        reserve1: bigint;
    };
    totalLiquidity: bigint;
}

enum DEX {
    BASESWAP,
    AERODROME,
    SUSHISWAP,
    PANCAKESWAP,
    UNISWAP_V3
}

interface Trade {
    timestamp: number;
    amount: bigint;
    price: bigint;
    hash: string;
    blockNumber: number;
}

interface PoolData {
    reserves: {
        reserve0: bigint;
        reserve1: bigint;
    };
    totalLiquidity: bigint;
    pair: string;
}

interface MempoolTx {
    hash: string;
    to: string;
    from: string;
    data: string;
    value: bigint;
    gasPrice: bigint;
    maxFeePerGas?: bigint;
    maxPriorityFeePerGas?: bigint;
}

// MempoolMonitor class for tracking pending transactions
class MempoolMonitor {
    private provider: JsonRpcProvider;
    private pendingTxs: Map<string, MempoolTx>;
    private isMonitoring: boolean;

    constructor(provider: JsonRpcProvider) {
        this.provider = provider;
        this.pendingTxs = new Map();
        this.isMonitoring = false;
        this.startMonitoring();
    }

    private startMonitoring() {
        if (this.isMonitoring) return;
        this.isMonitoring = true;

        this.provider.on('pending', async (txHash: string) => {
            try {
                const tx = await this.provider.getTransaction(txHash);
                if (tx && this.isSwapTransaction(tx)) {
                    this.pendingTxs.set(txHash, {
                        hash: tx.hash,
                        to: tx.to || '',
                        from: tx.from,
                        data: tx.data,
                        value: tx.value,
                        gasPrice: tx.gasPrice || 0n,
                        maxFeePerGas: tx.maxFeePerGas,
                        maxPriorityFeePerGas: tx.maxPriorityFeePerGas
                    });
                }
            } catch (error) {
                console.error('Error processing pending transaction:', error);
            }
        });
    }

    private isSwapTransaction(tx: ethers.TransactionResponse): boolean {
        // Common DEX swap function signatures
        const swapSignatures = [
            '0x38ed1739', // swapExactTokensForTokens
            '0x7ff36ab5', // swapExactETHForTokens
            '0x18cbafe5', // swapExactTokensForETH
            '0x8803dbee'  // swapTokensForExactTokens
        ];

        return tx.data && swapSignatures.some(sig => tx.data.startsWith(sig));
    }

    async getPendingSwaps(tokenA: string, tokenB: string): Promise<MempoolTx[]> {
        const relevantTxs: MempoolTx[] = [];

        for (const tx of this.pendingTxs.values()) {
            try {
                const decodedData = this.decodeSwapData(tx.data);
                if (this.isRelevantSwap(decodedData, tokenA, tokenB)) {
                    relevantTxs.push(tx);
                }
            } catch (error) {
                continue;
            }
        }

        return relevantTxs;
    }

    private decodeSwapData(data: string): { path: string[] } {
        const iface = new ethers.Interface([
            'function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)'
        ]);

        try {
            const decoded = iface.parseTransaction({ data });
            const path = decoded.args.path || [];
            return { path };
        } catch (error) {
            throw new Error('Unable to decode swap data');
        }
    }

    private isRelevantSwap(
        decodedData: { path: string[] },
        tokenA: string,
        tokenB: string
    ): boolean {
        const { path } = decodedData;
        const normalizedTokenA = tokenA.toLowerCase();
        const normalizedTokenB = tokenB.toLowerCase();
        return path.some(token => 
            token.toLowerCase() === normalizedTokenA ||
            token.toLowerCase() === normalizedTokenB
        );
    }

    stop() {
        this.isMonitoring = false;
        this.provider.removeAllListeners('pending');
    }
}

interface PairGasStats {
    averageGasUsed: bigint;
    successRate: number;
    failureCount: number;
    optimalGasMultiplier: number;
    historicalGasPrices: { timestamp: number; gasPrice: bigint; success: boolean }[];
    lastOptimization: number;
}

class PairGasOptimizer {
    private pairGasStats: Map<string, PairGasStats> = new Map();
    private readonly OPTIMIZATION_INTERVAL = 3600000; // 1 hour
    private readonly MIN_DATA_POINTS = 10;
    private readonly MAX_HISTORY_POINTS = 100;
    private readonly BASE_GAS_MULTIPLIER = 1.1;
    private readonly MAX_GAS_MULTIPLIER = 2.0;

    updatePairGasStats(
        pair: string,
        gasUsed: bigint,
        gasPrice: bigint,
        success: boolean
    ): void {
        const stats = this.pairGasStats.get(pair) || this.getDefaultStats();
        
        // Update stats
        stats.averageGasUsed = (stats.averageGasUsed * BigInt(stats.historicalGasPrices.length) + gasUsed) / 
            BigInt(stats.historicalGasPrices.length + 1);
        
        if (!success) stats.failureCount++;
        
        stats.successRate = (stats.successRate * stats.historicalGasPrices.length + (success ? 100 : 0)) / 
            (stats.historicalGasPrices.length + 1);

        // Add to history
        stats.historicalGasPrices.push({
            timestamp: Date.now(),
            gasPrice,
            success
        });

        // Trim history if needed
        if (stats.historicalGasPrices.length > this.MAX_HISTORY_POINTS) {
            stats.historicalGasPrices.shift();
        }

        this.pairGasStats.set(pair, stats);
        this.optimizeGasMultiplier(pair);
    }

    getOptimalGasPrice(pair: string, baseGasPrice: bigint): bigint {
        const stats = this.pairGasStats.get(pair) || this.getDefaultStats();
        return baseGasPrice * BigInt(Math.floor(stats.optimalGasMultiplier * 100)) / 100n;
    }

    private optimizeGasMultiplier(pair: string): void {
        const stats = this.pairGasStats.get(pair)!;
        const now = Date.now();

        // Only optimize if enough time has passed and we have enough data points
        if (now - stats.lastOptimization < this.OPTIMIZATION_INTERVAL || 
            stats.historicalGasPrices.length < this.MIN_DATA_POINTS) {
            return;
        }

        const recentHistory = stats.historicalGasPrices.slice(-this.MIN_DATA_POINTS);
        
        // Calculate success rate with current multiplier
        const currentSuccessRate = recentHistory.filter(h => h.success).length / recentHistory.length * 100;

        // Adjust multiplier based on success rate and failure patterns
        let newMultiplier = stats.optimalGasMultiplier;
        
        if (currentSuccessRate < 90) {
            // Increase multiplier if success rate is too low
            newMultiplier = Math.min(
                stats.optimalGasMultiplier * 1.1,
                this.MAX_GAS_MULTIPLIER
            );
        } else if (currentSuccessRate > 98 && stats.optimalGasMultiplier > this.BASE_GAS_MULTIPLIER) {
            // Gradually decrease multiplier if success rate is very high
            newMultiplier = Math.max(
                stats.optimalGasMultiplier * 0.95,
                this.BASE_GAS_MULTIPLIER
            );
        }

        // Update stats
        stats.optimalGasMultiplier = newMultiplier;
        stats.lastOptimization = now;
        this.pairGasStats.set(pair, stats);
    }

    private getDefaultStats(): PairGasStats {
        return {
            averageGasUsed: 0n,
            successRate: 100,
            failureCount: 0,
            optimalGasMultiplier: this.BASE_GAS_MULTIPLIER,
            historicalGasPrices: [],
            lastOptimization: 0
        };
    }
}

export class ArbitrageBot {
    private readonly MEV_PATTERNS = {
        FRONTRUN: {
            minGasIncrease: 1.2,
            maxBlockSpan: 2,
            suspiciousPatterns: ['high-low', 'sudden-spike', 'repeated-address']
        },
        SANDWICH: {
            minGasIncrease: 1.5,
            maxSpread: 2.0,
            maxBlockWindow: 3,
            suspiciousPatterns: ['high-low-high', 'multi-tx-same-block']
        },
        TIMING: {
            maxRepeatCount: 3,
            blockThreshold: 5,
            suspiciousPatterns: ['repeated-failures', 'time-correlation']
        },
        BACKRUN: {
            minGasIncrease: 1.3,
            maxDelay: 2, // blocks
            suspiciousPatterns: ['delayed-high-gas', 'mempool-camping']
        }
    };

    private readonly MEV_PROTECTION = {
        GAS: {
            priorityMultiplier: 1.3,    // Multiply priority fee for protection
            maxBoost: 2.0,              // Maximum gas boost for high-risk situations
            minPriority: 2.0            // Minimum priority fee (gwei)
        },
        SLIPPAGE: {
            baseSlippage: 50,           // 0.5% base slippage
            maxDynamic: 300,            // 3% maximum dynamic slippage
            impactMultiplier: 1.5       // Multiply slippage for high impact trades
        },
        TIMING: {
            maxBlockDelay: 3,           // Maximum blocks to wait
            minConfirmations: 1,        // Minimum confirmations needed
            maxRetries: 3               // Maximum retry attempts
        }
    };

    private readonly SLIPPAGE_CONFIG: SlippageConfig = {
        min: 50,   // 0.5%
        max: 300,  // 3%
        dynamic: true
    };

    private readonly SLIPPAGE_MONITOR_INTERVAL = 60000; // 1 minute
    private slippageEvents: SlippageEvent[] = [];
    private slippageMonitorHandle?: NodeJS.Timeout;

    private provider: Provider;
    private mevActivityLogs: MEVActivityLog[] = [];
    private isRunning: boolean = false;
    private priceHistory: Map<string, PriceDataPoint[]> = new Map();
    private readonly MAX_PRICE_HISTORY_LENGTH = 1000;  // Keep last 1000 price points
    private liquiditySnapshots: Map<string, LiquiditySnapshot[]> = new Map();
    private poolLiquidity: Map<string, CrossPoolLiquidity[]> = new Map();
    private gasCosts: GasCosts = {
        current: 0n,
        historical: [],
        priority: 50
    };

    private emergencyConditions: EmergencyCondition[] = [
        {
            type: 'volatility',
            threshold: 50,  // 50% volatility
            multiplier: 2,  // Double the slippage
            active: false
        },
        {
            type: 'liquidity',
            threshold: 70,  // 70% liquidity drop
            multiplier: 3,  // Triple the slippage
            active: false
        },
        {
            type: 'gas',
            threshold: 1000,  // 1000 gwei
            multiplier: 1.5,  // 1.5x slippage
            active: false
        }
    ];

    private readonly BASE_TOKEN_PAIRS: TokenPairConfig[] = [
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22',  // cbETH
                symbol: 'cbETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0xFDa619b6d20975be80A10332cD39b9a4b0FAa8BB',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                },
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 100  // 1%
        },
        {
            tokenA: {
                address: '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                symbol: 'BALD',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1',  // TOSHI
                symbol: 'TOSHI',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0xb7845eBf06B1E43EF8e475F7A6Dc4C7994d0eF46',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x940181a94A35A4569E4529A3CDfB74e38FD98631',  // DEGEN
                symbol: 'DEGEN',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0x9CD7C03C82F9686fBB86Ba258cA1308B7BEe0F76',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x940181a94A35A4569E4529A3CDfB74e38FD98631',  // DEGEN
                symbol: 'DEGEN',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x9CD7C03C82F9686fBB86Ba258cA1308B7BEe0F76',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('15'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                symbol: 'BALD',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1',  // TOSHI
                symbol: 'TOSHI',
                decimals: 18
            },
            dexes: [
                {
                    address: '0xb7845eBf06B1E43EF8e475F7A6Dc4C7994d0eF46',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',  // Virtual
                symbol: 'Virtual',
                decimals: 18
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',  // AIXBT
                symbol: 'AIXBT',
                decimals: 18
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',
                symbol: 'WETH',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',
                symbol: 'WETH',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
import { ethers } from 'ethers';
import { Provider, JsonRpcProvider } from '@ethersproject/providers';
import { Contract } from '@ethersproject/contracts';
import { VolumeAnalyzer } from './utils/VolumeAnalyzer';
import { VolumeData } from './types/dex';
import { QUALITY_THRESHOLDS } from './config/constants';
import { DexDataProvider } from './services/DexDataProvider';
import { PairGasOptimizer } from './utils/PairGasOptimizer';

interface TransactionWithTo extends ethers.TransactionResponse {
    to: string;
    blockTimestamp?: number;
}

interface MEVPattern {
    type: string;
    confidence: number;
    gasPricePattern: string;
    blockSpan: number;
    frequency: number;
}

interface MEVActivityLog {
    timestamp: number;
    blockNumber: number;
    pattern: MEVPattern;
    attackerAddresses: string[];
    victimAddresses: string[];
    estimatedProfit: number;
    gasUsed: bigint;
    details: string;
}

interface LiquidityDepthAnalysis {
    totalLiquidity: bigint;
    concentrationScore: number;
    healthScore: number;
}

interface MEVAnalysis {
    sandwichRisk: number;
    frontrunRisk: number;
    backrunRisk: number;
    timingRisk: number;
    estimatedMEVLoss: number;
    detectedPatterns: MEVPattern[];
    riskFactors: {
        liquidityRisk: number;
        volumeRisk: number;
        historicalRisk: number;
        mempoolRisk: number;
    };
}

interface PriceDataPoint {
    timestamp: number;
    price: number;
    volume: bigint;
    blockNumber: number;
}

interface LiquiditySnapshot {
    price: number;
    depth: bigint;
    slippage: number;
    timeStamp: number;
}

interface PriceImpactAnalysis {
    expectedImpact: number;  // Percentage
    worstCase: number;      // Percentage
    confidence: number;     // 0-100
    recommendedMaxSize: bigint;
    liquidityScore: number; // 0-100
}

interface CrossPoolLiquidity {
    poolAddress: string;
    liquidity: bigint;
    fee: number;
    utilization: number;
    lastUpdateTime: number;
}

interface GasCosts {
    current: bigint;
    historical: {
        timestamp: number;
        cost: bigint;
    }[];
    priority: number;  // 0-100
}

interface SlippageConfig {
    min: number;      // Minimum slippage tolerance (basis points)
    max: number;      // Maximum slippage tolerance (basis points)
    dynamic: boolean; // Whether to use dynamic slippage
}

interface EmergencyCondition {
    type: 'volatility' | 'liquidity' | 'gas' | 'custom';
    threshold: number;
    multiplier: number;
    active: boolean;
}

interface SlippageEvent {
    type: 'warning' | 'emergency' | 'info';
    timestamp: number;
    tokenAddress: string;
    slippage: number;
    reason: string;
    conditions?: EmergencyCondition[];
    recommendation?: string;
}

interface HopSlippage {
    dexAddress: string;
    tokenIn: string;
    tokenOut: string;
    expectedSlippage: number;
    maxSlippage: number;
    confidence: number;
}

interface MultiHopSlippage {
    totalExpectedSlippage: number;
    totalMaxSlippage: number;
    overallConfidence: number;
    hops: HopSlippage[];
    recommendation: string;
}

interface TokenPairConfig {
    tokenA: {
        address: string;
        symbol: string;
        decimals: number;
    };
    tokenB: {
        address: string;
        symbol: string;
        decimals: number;
    };
    dexes: {
        address: string;
        protocol: string;
        fee?: number;
    }[];
    minLiquidity: bigint;
    maxSlippage: number;
}

interface ProtocolConfig {
    type: 'lending' | 'dex';
    name: string;
    address: string;
    supportedTokens: string[];
    features: string[];
    maxLeverage?: number;
    borrowFee?: number;
    tradeFee?: number;
}

interface LendingProtocolState {
    token: string;
    supplyApy: number;
    borrowApy: number;
    totalSupply: bigint;
    availableLiquidity: bigint;
    utilizationRate: number;
    collateralFactor: number;
}

interface PairStrategy {
    type: 'momentum' | 'mean-reversion' | 'liquidity-driven' | 'correlation';
    timeWindow: number;  // milliseconds
    parameters: {
        entryThreshold: number;
        exitThreshold: number;
        stopLoss: number;
        maxPositionSize: bigint;
        minVolume: bigint;
    };
    correlatedPairs?: string[];  // Array of correlated token pair addresses
}

interface StrategyState {
    active: boolean;
    lastUpdate: number;
    currentPosition: bigint;
    entryPrice: number;
    profitLoss: number;
    successRate: number;
    totalTrades: number;
}

interface LiquidityDepthHistory {
    timestamp: number;
    depth: bigint;
    fragmentationIndex: number;
    stability: number;
    concentration: number;
}

interface DepthAnalysis {
    currentDepth: bigint;
    historicalDepth: {
        mean: bigint;
        volatility: number;
        trend: 'increasing' | 'decreasing' | 'stable';
    };
    fragmentation: {
        index: number;  // 0-100, higher means more fragmented
        largestPoolShare: number;
        poolCount: number;
    };
    stability: {
        score: number;  // 0-100
        confidenceInterval: number;
        lastVolatilitySpike: number;
    };
    slippageEstimate: {
        predicted: number;
        worstCase: number;
        confidence: number;
    };
}

interface VolumeSnapshot {
    timestamp: number;
    volume: bigint;
    tradeCount: number;
    averageTradeSize: bigint;
    largestTrade: bigint;
}

interface VolumeAnalysis {
    current: {
        hourly: bigint;
        daily: bigint;
        weekly: bigint;
    };
    historical: {
        average: {
            hourly: bigint;
            daily: bigint;
            weekly: bigint;
        };
        trend: 'increasing' | 'decreasing' | 'stable';
        volatility: number;
    };
    patterns: {
        spikes: number;  // Number of volume spikes in last 24h
        consistency: number;  // 0-100 score
        distribution: {
            largeTradesPercent: number;
            mediumTradesPercent: number;
            smallTradesPercent: number;
        };
    };
}

interface PerformanceMetrics {
    overall: {
        successRate: number;
        totalTrades: number;
        totalProfit: number;
        averageProfit: number;
        sharpeRatio: number;
        maxDrawdown: number;
        winLossRatio: number;
    };
    timeFrames: {
        hourly: {
            trades: number;
            profit: number;
            successRate: number;
        };
        daily: {
            trades: number;
            profit: number;
            successRate: number;
        };
        weekly: {
            trades: number;
            profit: number;
            successRate: number;
        };
    };
    byToken: {
        [token: string]: {
            trades: number;
            profit: number;
            successRate: number;
            averageProfit: number;
            bestTrade: number;
            worstTrade: number;
        };
    };
    byStrategy: {
        [strategy: string]: {
            trades: number;
            profit: number;
            successRate: number;
            averageProfit: number;
            riskAdjustedReturn: number;
        };
    };
}

interface TradeRecord {
    timestamp: number;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    strategy: string;
    profit: number;
    gasUsed: bigint;
    slippage: number;
    duration: number;
}

interface LiquidityMetrics {
    depth: number;
    volatility: number;
    volume: number;
    tradeDistribution: {
        largeTradesRatio: number;
        mediumTradesRatio: number;
        smallTradesRatio: number;
    };
}

interface LiquidityAnalysis {
    volumeScore: number;
    depthScore: number;
    volatilityScore: number;
    healthScore: number;
    recentTrades: {
        count: number;
        averageSize: number;
        largestTrade: number;
        timeWeightedVolume: number;
    };
}

interface Trade {
    timestamp: number;
    amount: string;
    price: string;
}

interface PoolData {
    reserves: {
        reserve0: bigint;
        reserve1: bigint;
    };
    totalLiquidity: bigint;
}

enum DEX {
    BASESWAP,
    AERODROME,
    SUSHISWAP,
    PANCAKESWAP,
    UNISWAP_V3,
    DACKIESWAP
}

interface Trade {
    timestamp: number;
    amount: bigint;
    price: bigint;
    hash: string;
    blockNumber: number;
}

interface PoolData {
    reserves: {
        reserve0: bigint;
        reserve1: bigint;
    };
    totalLiquidity: bigint;
    pair: string;
}

interface MempoolTx {
    hash: string;
    to: string;
    from: string;
    data: string;
    value: bigint;
    gasPrice: bigint;
    maxFeePerGas?: bigint;
    maxPriorityFeePerGas?: bigint;
}

// MempoolMonitor class for tracking pending transactions
class MempoolMonitor {
    private provider: JsonRpcProvider;
    private pendingTxs: Map<string, MempoolTx>;
    private isMonitoring: boolean;

    constructor(provider: JsonRpcProvider) {
        this.provider = provider;
        this.pendingTxs = new Map();
        this.isMonitoring = false;
        this.startMonitoring();
    }

    private startMonitoring() {
        if (this.isMonitoring) return;
        this.isMonitoring = true;

        this.provider.on('pending', async (txHash: string) => {
            try {
                const tx = await this.provider.getTransaction(txHash);
                if (tx && this.isSwapTransaction(tx)) {
                    this.pendingTxs.set(txHash, {
                        hash: tx.hash,
                        to: tx.to || '',
                        from: tx.from,
                        data: tx.data,
                        value: tx.value,
                        gasPrice: tx.gasPrice || 0n,
                        maxFeePerGas: tx.maxFeePerGas,
                        maxPriorityFeePerGas: tx.maxPriorityFeePerGas
                    });
                }
            } catch (error) {
                console.error('Error processing pending transaction:', error);
            }
        });
    }

    private isSwapTransaction(tx: ethers.TransactionResponse): boolean {
        // Common DEX swap function signatures
        const swapSignatures = [
            '0x38ed1739', // swapExactTokensForTokens
            '0x7ff36ab5', // swapExactETHForTokens
            '0x18cbafe5', // swapExactTokensForETH
            '0x8803dbee'  // swapTokensForExactTokens
        ];

        return tx.data && swapSignatures.some(sig => tx.data.startsWith(sig));
    }

    async getPendingSwaps(tokenA: string, tokenB: string): Promise<MempoolTx[]> {
        const relevantTxs: MempoolTx[] = [];

        for (const tx of this.pendingTxs.values()) {
            try {
                const decodedData = this.decodeSwapData(tx.data);
                if (this.isRelevantSwap(decodedData, tokenA, tokenB)) {
                    relevantTxs.push(tx);
                }
            } catch (error) {
                continue;
            }
        }

        return relevantTxs;
    }

    private decodeSwapData(data: string): { path: string[] } {
        const iface = new ethers.Interface([
            'function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)'
        ]);

        try {
            const decoded = iface.parseTransaction({ data });
            const path = decoded.args.path || [];
            return { path };
        } catch (error) {
            throw new Error('Unable to decode swap data');
        }
    }

    private isRelevantSwap(
        decodedData: { path: string[] },
        tokenA: string,
        tokenB: string
    ): boolean {
        const { path } = decodedData;
        const normalizedTokenA = tokenA.toLowerCase();
        const normalizedTokenB = tokenB.toLowerCase();
        return path.some(token => 
            token.toLowerCase() === normalizedTokenA ||
            token.toLowerCase() === normalizedTokenB
        );
    }

    stop() {
        this.isMonitoring = false;
        this.provider.removeAllListeners('pending');
    }
}

interface PairGasStats {
    averageGasUsed: bigint;
    successRate: number;
    failureCount: number;
    optimalGasMultiplier: number;
    historicalGasPrices: { timestamp: number; gasPrice: bigint; success: boolean }[];
    lastOptimization: number;
}

class PairGasOptimizer {
    private pairGasStats: Map<string, PairGasStats> = new Map();
    private readonly OPTIMIZATION_INTERVAL = 3600000; // 1 hour
    private readonly MIN_DATA_POINTS = 10;
    private readonly MAX_HISTORY_POINTS = 100;
    private readonly BASE_GAS_MULTIPLIER = 1.1;
    private readonly MAX_GAS_MULTIPLIER = 2.0;

    updatePairGasStats(
        pair: string,
        gasUsed: bigint,
        gasPrice: bigint,
        success: boolean
    ): void {
        const stats = this.pairGasStats.get(pair) || this.getDefaultStats();
        
        // Update stats
        stats.averageGasUsed = (stats.averageGasUsed * BigInt(stats.historicalGasPrices.length) + gasUsed) / 
            BigInt(stats.historicalGasPrices.length + 1);
        
        if (!success) stats.failureCount++;
        
        stats.successRate = (stats.successRate * stats.historicalGasPrices.length + (success ? 100 : 0)) / 
            (stats.historicalGasPrices.length + 1);

        // Add to history
        stats.historicalGasPrices.push({
            timestamp: Date.now(),
            gasPrice,
            success
        });

        // Trim history if needed
        if (stats.historicalGasPrices.length > this.MAX_HISTORY_POINTS) {
            stats.historicalGasPrices.shift();
        }

        this.pairGasStats.set(pair, stats);
        this.optimizeGasMultiplier(pair);
    }

    getOptimalGasPrice(pair: string, baseGasPrice: bigint): bigint {
        const stats = this.pairGasStats.get(pair) || this.getDefaultStats();
        return baseGasPrice * BigInt(Math.floor(stats.optimalGasMultiplier * 100)) / 100n;
    }

    private optimizeGasMultiplier(pair: string): void {
        const stats = this.pairGasStats.get(pair)!;
        const now = Date.now();

        // Only optimize if enough time has passed and we have enough data points
        if (now - stats.lastOptimization < this.OPTIMIZATION_INTERVAL || 
            stats.historicalGasPrices.length < this.MIN_DATA_POINTS) {
            return;
        }

        const recentHistory = stats.historicalGasPrices.slice(-this.MIN_DATA_POINTS);
        
        // Calculate success rate with current multiplier
        const currentSuccessRate = recentHistory.filter(h => h.success).length / recentHistory.length * 100;

        // Adjust multiplier based on success rate and failure patterns
        let newMultiplier = stats.optimalGasMultiplier;
        
        if (currentSuccessRate < 90) {
            // Increase multiplier if success rate is too low
            newMultiplier = Math.min(
                stats.optimalGasMultiplier * 1.1,
                this.MAX_GAS_MULTIPLIER
            );
        } else if (currentSuccessRate > 98 && stats.optimalGasMultiplier > this.BASE_GAS_MULTIPLIER) {
            // Gradually decrease multiplier if success rate is very high
            newMultiplier = Math.max(
                stats.optimalGasMultiplier * 0.95,
                this.BASE_GAS_MULTIPLIER
            );
        }

        // Update stats
        stats.optimalGasMultiplier = newMultiplier;
        stats.lastOptimization = now;
        this.pairGasStats.set(pair, stats);
    }

    private getDefaultStats(): PairGasStats {
        return {
            averageGasUsed: 0n,
            successRate: 100,
            failureCount: 0,
            optimalGasMultiplier: this.BASE_GAS_MULTIPLIER,
            historicalGasPrices: [],
            lastOptimization: 0
        };
    }
}

export class ArbitrageBot {
    private readonly MEV_PATTERNS = {
        FRONTRUN: {
            minGasIncrease: 1.2,
            maxBlockSpan: 2,
            suspiciousPatterns: ['high-low', 'sudden-spike', 'repeated-address']
        },
        SANDWICH: {
            minGasIncrease: 1.5,
            maxSpread: 2.0,
            maxBlockWindow: 3,
            suspiciousPatterns: ['high-low-high', 'multi-tx-same-block']
        },
        TIMING: {
            maxRepeatCount: 3,
            blockThreshold: 5,
            suspiciousPatterns: ['repeated-failures', 'time-correlation']
        },
        BACKRUN: {
            minGasIncrease: 1.3,
            maxDelay: 2, // blocks
            suspiciousPatterns: ['delayed-high-gas', 'mempool-camping']
        }
    };

    private readonly MEV_PROTECTION = {
        GAS: {
            priorityMultiplier: 1.3,    // Multiply priority fee for protection
            maxBoost: 2.0,              // Maximum gas boost for high-risk situations
            minPriority: 2.0            // Minimum priority fee (gwei)
        },
        SLIPPAGE: {
            baseSlippage: 50,           // 0.5% base slippage
            maxDynamic: 300,            // 3% maximum dynamic slippage
            impactMultiplier: 1.5       // Multiply slippage for high impact trades
        },
        TIMING: {
            maxBlockDelay: 3,           // Maximum blocks to wait
            minConfirmations: 1,        // Minimum confirmations needed
            maxRetries: 3               // Maximum retry attempts
        }
    };

    private readonly SLIPPAGE_CONFIG: SlippageConfig = {
        min: 50,   // 0.5%
        max: 300,  // 3%
        dynamic: true
    };

    private readonly SLIPPAGE_MONITOR_INTERVAL = 60000; // 1 minute
    private slippageEvents: SlippageEvent[] = [];
    private slippageMonitorHandle?: NodeJS.Timeout;

    private provider: Provider;
    private mevActivityLogs: MEVActivityLog[] = [];
    private isRunning: boolean = false;
    private priceHistory: Map<string, PriceDataPoint[]> = new Map();
    private readonly MAX_PRICE_HISTORY_LENGTH = 1000;  // Keep last 1000 price points
    private liquiditySnapshots: Map<string, LiquiditySnapshot[]> = new Map();
    private poolLiquidity: Map<string, CrossPoolLiquidity[]> = new Map();
    private gasCosts: GasCosts = {
        current: 0n,
        historical: [],
        priority: 50
    };

    private emergencyConditions: EmergencyCondition[] = [
        {
            type: 'volatility',
            threshold: 50,  // 50% volatility
            multiplier: 2,  // Double the slippage
            active: false
        },
        {
            type: 'liquidity',
            threshold: 70,  // 70% liquidity drop
            multiplier: 3,  // Triple the slippage
            active: false
        },
        {
            type: 'gas',
            threshold: 1000,  // 1000 gwei
            multiplier: 1.5,  // 1.5x slippage
            active: false
        }
    ];

    private readonly BASE_TOKEN_PAIRS: TokenPairConfig[] = [
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22',  // cbETH
                symbol: 'cbETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0xFDa619b6d20975be80A10332cD39b9a4b0FAa8BB',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                },
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 100  // 1%
        },
        {
            tokenA: {
                address: '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                symbol: 'BALD',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1',  // TOSHI
                symbol: 'TOSHI',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0xb7845eBf06B1E43EF8e475F7A6Dc4C7994d0eF46',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x940181a94A35A4569E4529A3CDfB74e38FD98631',  // DEGEN
                symbol: 'DEGEN',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0x9CD7C03C82F9686fBB86Ba258cA1308B7BEe0F76',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x940181a94A35A4569E4529A3CDfB74e38FD98631',  // DEGEN
                symbol: 'DEGEN',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x9CD7C03C82F9686fBB86Ba258cA1308B7BEe0F76',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('15'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                symbol: 'BALD',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1',  // TOSHI
                symbol: 'TOSHI',
                decimals: 18
            },
            dexes: [
                {
                    address: '0xb7845eBf06B1E43EF8e475F7A6Dc4C7994d0eF46',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',  // Virtual
                symbol: 'Virtual',
                decimals: 18
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',  // AIXBT
                symbol: 'AIXBT',
                decimals: 18
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',  // Virtual
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',
                symbol: 'WETH',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',
                symbol: 'WETH',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
import { ethers } from 'ethers';
import { Provider, JsonRpcProvider } from '@ethersproject/providers';
import { Contract } from '@ethersproject/contracts';import { VolumeAnalyzer } from './utils/VolumeAnalyzer';
import { VolumeData } from './types/dex';
import { QUALITY_THRESHOLDS } from './config/constants';
import { DexDataProvider } from './services/DexDataProvider';
import { PairGasOptimizer } from './utils/PairGasOptimizer';

interface TransactionWithTo extends ethers.TransactionResponse {
    to: string;
    blockTimestamp?: number;
}

interface MEVPattern {
    type: string;
    confidence: number;
    gasPricePattern: string;
    blockSpan: number;
    frequency: number;
}

interface MEVActivityLog {
    timestamp: number;
    blockNumber: number;
    pattern: MEVPattern;
    attackerAddresses: string[];
    victimAddresses: string[];
    estimatedProfit: number;
    gasUsed: bigint;
    details: string;
}

interface LiquidityDepthAnalysis {
    totalLiquidity: bigint;
    concentrationScore: number;
    healthScore: number;
}

interface MEVAnalysis {
    sandwichRisk: number;
    frontrunRisk: number;
    backrunRisk: number;
    timingRisk: number;
    estimatedMEVLoss: number;
    detectedPatterns: MEVPattern[];
    riskFactors: {
        liquidityRisk: number;
        volumeRisk: number;
        historicalRisk: number;
        mempoolRisk: number;
    };
}

interface PriceDataPoint {
    timestamp: number;
    price: number;
    volume: bigint;
    blockNumber: number;
}

interface LiquiditySnapshot {
    price: number;
    depth: bigint;
    slippage: number;
    timeStamp: number;
}

interface PriceImpactAnalysis {
    expectedImpact: number;  // Percentage
    worstCase: number;      // Percentage
    confidence: number;     // 0-100
    recommendedMaxSize: bigint;
    liquidityScore: number; // 0-100
}

interface CrossPoolLiquidity {
    poolAddress: string;
    liquidity: bigint;
    fee: number;
    utilization: number;
    lastUpdateTime: number;
}

interface GasCosts {
    current: bigint;
    historical: {
        timestamp: number;
        cost: bigint;
    }[];
    priority: number;  // 0-100
}

interface SlippageConfig {
    min: number;      // Minimum slippage tolerance (basis points)
    max: number;      // Maximum slippage tolerance (basis points)
    dynamic: boolean; // Whether to use dynamic slippage
}

interface EmergencyCondition {
    type: 'volatility' | 'liquidity' | 'gas' | 'custom';
    threshold: number;
    multiplier: number;
    active: boolean;
}

interface SlippageEvent {
    type: 'warning' | 'emergency' | 'info';
    timestamp: number;
    tokenAddress: string;
    slippage: number;
    reason: string;
    conditions?: EmergencyCondition[];
    recommendation?: string;
}

interface HopSlippage {
    dexAddress: string;
    tokenIn: string;
    tokenOut: string;
    expectedSlippage: number;
    maxSlippage: number;
    confidence: number;
}

interface MultiHopSlippage {
    totalExpectedSlippage: number;
    totalMaxSlippage: number;
    overallConfidence: number;
    hops: HopSlippage[];
    recommendation: string;
}

interface TokenPairConfig {
    tokenA: {
        address: string;
        symbol: string;
        decimals: number;
    };
    tokenB: {
        address: string;
        symbol: string;
        decimals: number;
    };
    dexes: {
        address: string;
        protocol: string;
        fee?: number;
    }[];
    minLiquidity: bigint;
    maxSlippage: number;
}

interface ProtocolConfig {
    type: 'lending' | 'dex';
    name: string;
    address: string;
    supportedTokens: string[];
    features: string[];
    maxLeverage?: number;
    borrowFee?: number;
    tradeFee?: number;
}

interface LendingProtocolState {
    token: string;
    supplyApy: number;
    borrowApy: number;
    totalSupply: bigint;
    availableLiquidity: bigint;
    utilizationRate: number;
    collateralFactor: number;
}

interface PairStrategy {
    type: 'momentum' | 'mean-reversion' | 'liquidity-driven' | 'correlation';
    timeWindow: number;  // milliseconds
    parameters: {
        entryThreshold: number;
        exitThreshold: number;
        stopLoss: number;
        maxPositionSize: bigint;
        minVolume: bigint;
    };
    correlatedPairs?: string[];  // Array of correlated token pair addresses
}

interface StrategyState {
    active: boolean;
    lastUpdate: number;
    currentPosition: bigint;
    entryPrice: number;
    profitLoss: number;
    successRate: number;
    totalTrades: number;
}

interface LiquidityDepthHistory {
    timestamp: number;
    depth: bigint;
    fragmentationIndex: number;
    stability: number;
    concentration: number;
}

interface DepthAnalysis {
    currentDepth: bigint;
    historicalDepth: {
        mean: bigint;
        volatility: number;
        trend: 'increasing' | 'decreasing' | 'stable';
    };
    fragmentation: {
        index: number;  // 0-100, higher means more fragmented
        largestPoolShare: number;
        poolCount: number;
    };
    stability: {
        score: number;  // 0-100
        confidenceInterval: number;
        lastVolatilitySpike: number;
    };
    slippageEstimate: {
        predicted: number;
        worstCase: number;
        confidence: number;
    };
}

interface VolumeSnapshot {
    timestamp: number;
    volume: bigint;
    tradeCount: number;
    averageTradeSize: bigint;
    largestTrade: bigint;
}

interface VolumeAnalysis {
    current: {
        hourly: bigint;
        daily: bigint;
        weekly: bigint;
    };
    historical: {
        average: {
            hourly: bigint;
            daily: bigint;
            weekly: bigint;
        };
        trend: 'increasing' | 'decreasing' | 'stable';
        volatility: number;
    };
    patterns: {
        spikes: number;  // Number of volume spikes in last 24h
        consistency: number;  // 0-100 score
        distribution: {
            largeTradesPercent: number;
            mediumTradesPercent: number;
            smallTradesPercent: number;
        };
    };
}

interface PerformanceMetrics {
    overall: {
        successRate: number;
        totalTrades: number;
        totalProfit: number;
        averageProfit: number;
        sharpeRatio: number;
        maxDrawdown: number;
        winLossRatio: number;
    };
    timeFrames: {
        hourly: {
            trades: number;
            profit: number;
            successRate: number;
        };
        daily: {
            trades: number;
            profit: number;
            successRate: number;
        };
        weekly: {
            trades: number;
            profit: number;
            successRate: number;
        };
    };
    byToken: {
        [token: string]: {
            trades: number;
            profit: number;
            successRate: number;
            averageProfit: number;
            bestTrade: number;
            worstTrade: number;
        };
    };
    byStrategy: {
        [strategy: string]: {
            trades: number;
            profit: number;
            successRate: number;
            averageProfit: number;
            riskAdjustedReturn: number;
        };
    };
}

interface TradeRecord {
    timestamp: number;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    strategy: string;
    profit: number;
    gasUsed: bigint;
    slippage: number;
    duration: number;
}

interface LiquidityMetrics {
    depth: number;
    volatility: number;
    volume: number;
    tradeDistribution: {
        largeTradesRatio: number;
        mediumTradesRatio: number;
        smallTradesRatio: number;
    };
}

interface LiquidityAnalysis {
    volumeScore: number;
    depthScore: number;
    volatilityScore: number;
    healthScore: number;
    recentTrades: {
        count: number;
        averageSize: number;
        largestTrade: number;
        timeWeightedVolume: number;
    };
}

interface Trade {
    timestamp: number;
    amount: string;
    price: string;
}

interface PoolData {
    reserves: {
        reserve0: bigint;
        reserve1: bigint;
    };
    totalLiquidity: bigint;
}

enum DEX {
    BASESWAP,
    AERODROME,
    SUSHISWAP,
    PANCAKESWAP,
    UNISWAP_V3,
    DACKIESWAP
}

interface Trade {
    timestamp: number;
    amount: bigint;
    price: bigint;
    hash: string;
    blockNumber: number;
}

interface PoolData {
    reserves: {
        reserve0: bigint;
        reserve1: bigint;
    };
    totalLiquidity: bigint;
    pair: string;
}

interface MempoolTx {
    hash: string;
    to: string;
    from: string;
    data: string;
    value: bigint;
    gasPrice: bigint;
    maxFeePerGas?: bigint;
    maxPriorityFeePerGas?: bigint;
}

// MempoolMonitor class for tracking pending transactions
class MempoolMonitor {
    private provider: JsonRpcProvider;
    private pendingTxs: Map<string, MempoolTx>;
    private isMonitoring: boolean;

    constructor(provider: JsonRpcProvider) {
        this.provider = provider;
        this.pendingTxs = new Map();
        this.isMonitoring = false;
        this.startMonitoring();
    }

    private startMonitoring() {
        if (this.isMonitoring) return;
        this.isMonitoring = true;

        this.provider.on('pending', async (txHash: string) => {
            try {
                const tx = await this.provider.getTransaction(txHash);
                if (tx && this.isSwapTransaction(tx)) {
                    this.pendingTxs.set(txHash, {
                        hash: tx.hash,
                        to: tx.to || '',
                        from: tx.from,
                        data: tx.data,
                        value: tx.value,
                        gasPrice: tx.gasPrice || 0n,
                        maxFeePerGas: tx.maxFeePerGas,
                        maxPriorityFeePerGas: tx.maxPriorityFeePerGas
                    });
                }
            } catch (error) {
                console.error('Error processing pending transaction:', error);
            }
        });
    }

    private isSwapTransaction(tx: ethers.TransactionResponse): boolean {
        // Common DEX swap function signatures
        const swapSignatures = [
            '0x38ed1739', // swapExactTokensForTokens
            '0x7ff36ab5', // swapExactETHForTokens
            '0x18cbafe5', // swapExactTokensForETH
            '0x8803dbee'  // swapTokensForExactTokens
        ];

        return tx.data && swapSignatures.some(sig => tx.data.startsWith(sig));
    }

    async getPendingSwaps(tokenA: string, tokenB: string): Promise<MempoolTx[]> {
        const relevantTxs: MempoolTx[] = [];

        for (const tx of this.pendingTxs.values()) {
            try {
                const decodedData = this.decodeSwapData(tx.data);
                if (this.isRelevantSwap(decodedData, tokenA, tokenB)) {
                    relevantTxs.push(tx);
                }
            } catch (error) {
                continue;
            }
        }

        return relevantTxs;
    }

    private decodeSwapData(data: string): { path: string[] } {
        const iface = new ethers.Interface([
            'function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)',
            'function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)'
        ]);

        try {
            const decoded = iface.parseTransaction({ data });
            const path = decoded.args.path || [];
            return { path };
        } catch (error) {
            throw new Error('Unable to decode swap data');
        }
    }

    private isRelevantSwap(
        decodedData: { path: string[] },
        tokenA: string,
        tokenB: string
    ): boolean {
        const { path } = decodedData;
        const normalizedTokenA = tokenA.toLowerCase();
        const normalizedTokenB = tokenB.toLowerCase();
        return path.some(token => 
            token.toLowerCase() === normalizedTokenA ||
            token.toLowerCase() === normalizedTokenB
        );
    }

    stop() {
        this.isMonitoring = false;
        this.provider.removeAllListeners('pending');
    }
}

interface PairGasStats {
    averageGasUsed: bigint;
    successRate: number;
    failureCount: number;
    optimalGasMultiplier: number;
    historicalGasPrices: { timestamp: number; gasPrice: bigint; success: boolean }[];
    lastOptimization: number;
}

class PairGasOptimizer {
    private pairGasStats: Map<string, PairGasStats> = new Map();
    private readonly OPTIMIZATION_INTERVAL = 3600000; // 1 hour
    private readonly MIN_DATA_POINTS = 10;
    private readonly MAX_HISTORY_POINTS = 100;
    private readonly BASE_GAS_MULTIPLIER = 1.1;
    private readonly MAX_GAS_MULTIPLIER = 2.0;

    updatePairGasStats(
        pair: string,
        gasUsed: bigint,
        gasPrice: bigint,
        success: boolean
    ): void {
        const stats = this.pairGasStats.get(pair) || this.getDefaultStats();
        
        // Update stats
        stats.averageGasUsed = (stats.averageGasUsed * BigInt(stats.historicalGasPrices.length) + gasUsed) / 
            BigInt(stats.historicalGasPrices.length + 1);
        
        if (!success) stats.failureCount++;
        
        stats.successRate = (stats.successRate * stats.historicalGasPrices.length + (success ? 100 : 0)) / 
            (stats.historicalGasPrices.length + 1);

        // Add to history
        stats.historicalGasPrices.push({
            timestamp: Date.now(),
            gasPrice,
            success
        });

        // Trim history if needed
        if (stats.historicalGasPrices.length > this.MAX_HISTORY_POINTS) {
            stats.historicalGasPrices.shift();
        }

        this.pairGasStats.set(pair, stats);
        this.optimizeGasMultiplier(pair);
    }

    getOptimalGasPrice(pair: string, baseGasPrice: bigint): bigint {
        const stats = this.pairGasStats.get(pair) || this.getDefaultStats();
        return baseGasPrice * BigInt(Math.floor(stats.optimalGasMultiplier * 100)) / 100n;
    }

    private optimizeGasMultiplier(pair: string): void {
        const stats = this.pairGasStats.get(pair)!;
        const now = Date.now();

        // Only optimize if enough time has passed and we have enough data points
        if (now - stats.lastOptimization < this.OPTIMIZATION_INTERVAL || 
            stats.historicalGasPrices.length < this.MIN_DATA_POINTS) {
            return;
        }

        const recentHistory = stats.historicalGasPrices.slice(-this.MIN_DATA_POINTS);
        
        // Calculate success rate with current multiplier
        const currentSuccessRate = recentHistory.filter(h => h.success).length / recentHistory.length * 100;

        // Adjust multiplier based on success rate and failure patterns
        let newMultiplier = stats.optimalGasMultiplier;
        
        if (currentSuccessRate < 90) {
            // Increase multiplier if success rate is too low
            newMultiplier = Math.min(
                stats.optimalGasMultiplier * 1.1,
                this.MAX_GAS_MULTIPLIER
            );
        } else if (currentSuccessRate > 98 && stats.optimalGasMultiplier > this.BASE_GAS_MULTIPLIER) {
            // Gradually decrease multiplier if success rate is very high
            newMultiplier = Math.max(
                stats.optimalGasMultiplier * 0.95,
                this.BASE_GAS_MULTIPLIER
            );
        }

        // Update stats
        stats.optimalGasMultiplier = newMultiplier;
        stats.lastOptimization = now;
        this.pairGasStats.set(pair, stats);
    }

    private getDefaultStats(): PairGasStats {
        return {
            averageGasUsed: 0n,
            successRate: 100,
            failureCount: 0,
            optimalGasMultiplier: this.BASE_GAS_MULTIPLIER,
            historicalGasPrices: [],
            lastOptimization: 0
        };
    }
}

export class ArbitrageBot {
    private readonly MEV_PATTERNS = {
        FRONTRUN: {
            minGasIncrease: 1.2,
            maxBlockSpan: 2,
            suspiciousPatterns: ['high-low', 'sudden-spike', 'repeated-address']
        },
        SANDWICH: {
            minGasIncrease: 1.5,
            maxSpread: 2.0,
            maxBlockWindow: 3,
            suspiciousPatterns: ['high-low-high', 'multi-tx-same-block']
        },
        TIMING: {
            maxRepeatCount: 3,
            blockThreshold: 5,
            suspiciousPatterns: ['repeated-failures', 'time-correlation']
        },
        BACKRUN: {
            minGasIncrease: 1.3,
            maxDelay: 2, // blocks
            suspiciousPatterns: ['delayed-high-gas', 'mempool-camping']
        }
    };

    private readonly MEV_PROTECTION = {
        GAS: {
            priorityMultiplier: 1.3,    // Multiply priority fee for protection
            maxBoost: 2.0,              // Maximum gas boost for high-risk situations
            minPriority: 2.0            // Minimum priority fee (gwei)
        },
        SLIPPAGE: {
            baseSlippage: 50,           // 0.5% base slippage
            maxDynamic: 300,            // 3% maximum dynamic slippage
            impactMultiplier: 1.5       // Multiply slippage for high impact trades
        },
        TIMING: {
            maxBlockDelay: 3,           // Maximum blocks to wait
            minConfirmations: 1,        // Minimum confirmations needed
            maxRetries: 3               // Maximum retry attempts
        }
    };

    private readonly SLIPPAGE_CONFIG: SlippageConfig = {
        min: 50,   // 0.5%
        max: 300,  // 3%
        dynamic: true
    };

    private readonly SLIPPAGE_MONITOR_INTERVAL = 60000; // 1 minute
    private slippageEvents: SlippageEvent[] = [];
    private slippageMonitorHandle?: NodeJS.Timeout;

    private provider: Provider;
    private mevActivityLogs: MEVActivityLog[] = [];
    private isRunning: boolean = false;
    private priceHistory: Map<string, PriceDataPoint[]> = new Map();
    private readonly MAX_PRICE_HISTORY_LENGTH = 1000;  // Keep last 1000 price points
    private liquiditySnapshots: Map<string, LiquiditySnapshot[]> = new Map();
    private poolLiquidity: Map<string, CrossPoolLiquidity[]> = new Map();
    private gasCosts: GasCosts = {
        current: 0n,
        historical: [],
        priority: 50
    };

    private emergencyConditions: EmergencyCondition[] = [
        {
            type: 'volatility',
            threshold: 50,  // 50% volatility
            multiplier: 2,  // Double the slippage
            active: false
        },
        {
            type: 'liquidity',
            threshold: 70,  // 70% liquidity drop
            multiplier: 3,  // Triple the slippage
            active: false
        },
        {
            type: 'gas',
            threshold: 1000,  // 1000 gwei
            multiplier: 1.5,  // 1.5x slippage
            active: false
        }
    ];

    private readonly BASE_TOKEN_PAIRS: TokenPairConfig[] = [
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22',  // cbETH
                symbol: 'cbETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0xFDa619b6d20975be80A10332cD39b9a4b0FAa8BB',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                },
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 100  // 1%
        },
        {
            tokenA: {
                address: '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                symbol: 'BALD',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1',  // TOSHI
                symbol: 'TOSHI',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0xb7845eBf06B1E43EF8e475F7A6Dc4C7994d0eF46',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x940181a94A35A4569E4529A3CDfB74e38FD98631',  // DEGEN
                symbol: 'DEGEN',
                decimals: 18
            },
            tokenB: {
                address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                symbol: 'USDC',
                decimals: 6
            },
            dexes: [
                {
                    address: '0x9CD7C03C82F9686fBB86Ba258cA1308B7BEe0F76',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x940181a94A35A4569E4529A3CDfB74e38FD98631',  // DEGEN
                symbol: 'DEGEN',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x9CD7C03C82F9686fBB86Ba258cA1308B7BEe0F76',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('15'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                symbol: 'BALD',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x36A1aCbbCAfca2468b85011DDD16E7Cb4d673230',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            tokenB: {
                address: '0x4158734D47Fc9692176B5085E0F52ee0Da5d47F1',  // TOSHI
                symbol: 'TOSHI',
                decimals: 18
            },
            dexes: [
                {
                    address: '0xb7845eBf06B1E43EF8e475F7A6Dc4C7994d0eF46',  // Aerodrome
                    protocol: 'Aerodrome',
                    fee: 0.05
                }
            ],
            minLiquidity: ethers.parseEther('10'),
            maxSlippage: 200  // 2%
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',  // Virtual
                symbol: 'Virtual',
                decimals: 18
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',  // AIXBT
                symbol: 'AIXBT',
                decimals: 18
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',  // WETH
                symbol: 'WETH',
                decimals: 18
            },
            dexes: [
                {
                    address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',  // BaseSwap
                    protocol: 'BaseSwap',
                    fee: 0.3
                }
            ],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150  // 1.5%
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',  // Virtual
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',
                symbol: 'WETH',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            tokenB: {
                address: '0x4200000000000000000000000000000000000006',
                symbol: 'WETH',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
        {
            tokenA: {
                address: '0x44ff8620b8cA30902395A7bD3F2407e1A091BF73',
                symbol: 'Virtual',
                decimals: 18,
            },
            tokenB: {
                address: '0x4F9Fd6Be4a90f2620860d680c0d4d5Fb53d1A825',
                symbol: 'AIXBT',
                decimals: 18,
            },
            dexes: [{
                address: '0x39E618D7DD9e5Cc552fb9EA38649e87Af6C34971',
                protocol: 'BaseSwap',
                fee: 0.3,
            }],
            minLiquidity: ethers.parseEther('5'),
            maxSlippage: 150,
        },
    ];

    private readonly PROTOCOLS: ProtocolConfig[] = [
        // Lending Protocols
        {
            type: 'lending',
            name: 'Moonwell',
            address: '0xfBD0B6E3E0c6F4C194b9D65d405c4960851390F2',
            supportedTokens: [
                '0x4200000000000000000000000000000000000006',  // WETH
                '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                '0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb',  // DAI
                '0x27D2DECb4bFC9C76F0309b8E88dec3a601Fe25a8'   // USDbC
            ],
            features: ['lending', 'borrowing', 'flash-loans'],
            maxLeverage: 4,
            borrowFee: 0.0005  // 0.05%
        },
        // DEXes
        {
            type: 'dex',
            name: 'Aerodrome',
            address: '0x2b1a91De5B9C3Ad6439eeAeD0E481D8E0B2075C0',
            supportedTokens: [
                '0x4200000000000000000000000000000000000006',  // WETH
                '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                '0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb',  // DAI
                '0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22',  // cbETH
                '0x78a087d713Be963Bf307b18F2Ff8122EF9A63ae9',  // BALD
                '0x940181a94A35A4569E4529A3CDfB74e38FD98631'   // DEGEN
            ],
            features: ['swap', 'liquidity-provision', 'flash-swaps'],
            tradeFee: 0.0005  // 0.05%
        },
        {
            type: 'dex',
            name: 'BaseSwap',
            address: '0xFDa619b6d20975be80A10332cD39b9a4b0FAa8BB',
            supportedTokens: [
                '0x4200000000000000000000000000000000000006',  // WETH
                '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',  // USDC
                '0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb',  // DAI
                '0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22'   // cbETH
            ],
            features: ['swap', 'liquidity-provision'],
            tradeFee: 0.003  // 0.3%
        }
    ];

    private protocolStates: Map<string, LendingProtocolState[]> = new Map();
    private pairStrategies: Map<string, PairStrategy> = new Map();
    private strategyStates: Map<string, StrategyState> = new Map();

    private depthHistory: Map<string, LiquidityDepthHistory[]> = new Map();
    private volumeHistory: Map<string, VolumeSnapshot[]> = new Map();

    private tradeHistory: TradeRecord[] = [];
    private lastPerformanceUpdate: number = 0;
    private readonly PERFORMANCE_UPDATE_INTERVAL = 3600000; // 1 hour

    private readonly GAS_PRICE_UPDATE_INTERVAL = 15000; // 15 seconds
    private gasTracking = {
        historicalPrices: [] as { timestamp: number; price: bigint; priority: bigint }[],
        averageGasUsage: new Map<string, { total: bigint; count: number }>(),
        profitThresholds: new Map<string, bigint>()
    };

    private signer: ethers.Signer;

    private readonly TRADE_SIZE_LIMITS = {
        MIN_LIQUIDITY_RATIO: 0.05,    // Trade size should be at least 5% of pool liquidity
        MAX_LIQUIDITY_RATIO: 0.20,    // Trade size should not exceed 20% of pool liquidity
        ADJUSTMENT_INTERVAL: 300000,   // 5 minutes
        SAFETY_MULTIPLIER: 0.8,        // 80% of calculated max size for safety
        VOLUME_WEIGHT: 0.3,            // 30% weight to volume metrics
        DEPTH_WEIGHT: 0.4,            // 40% weight to liquidity depth
        VOLATILITY_WEIGHT: 0.3        // 30% weight to volatility
    };

    // Add trade size threshold constants
    private readonly LARGE_TRADE_THRESHOLD = ethers.parseEther('10'); // 10 ETH equivalent
    private readonly SMALL_TRADE_THRESHOLD = ethers.parseEther('0.1'); // 0.1 ETH equivalent

    private pairCache: Map<string, Contract>;
    private mempoolMonitor: MempoolMonitor;
    private readonly volumeAnalyzer: VolumeAnalyzer;
    private readonly dexDataProvider: DexDataProvider;
    private readonly pairGasOptimizer = new PairGasOptimizer();

    constructor(
        providerUrl: string,
        privateKey: string,
        private readonly config: ArbitrageBotConfig
    ) {
        this.provider = new ethers.JsonRpcProvider(providerUrl);
        this.signer = new ethers.Wallet(privateKey, this.provider);
        this.pairCache = new Map();
        this.mempoolMonitor = new MempoolMonitor(this.provider);
        this.volumeAnalyzer = new VolumeAnalyzer();
        this.dexDataProvider = new DexDataProvider(this.provider);
        this.volumeAnalyzer = new VolumeAnalyzer();
        this.dexDataProvider = new DexDataProvider(this.provider);
        this.initializePairStrategies();
    }

    private initializePairStrategies(): void {
        // WETH-cbETH: Mean reversion strategy due to pegged nature
        this.pairStrategies.set('WETH-cbETH', {
            type: 'mean-reversion',
            timeWindow: 3600000, // 1 hour
            parameters: {
                entryThreshold: 0.5,  // 0.5% deviation from mean
                exitThreshold: 0.2,   // Exit when back within 0.2%
                stopLoss: 2.0,        // 2% stop loss
                maxPositionSize: ethers.parseEther('10'),
                minVolume: ethers.parseEther('1')
            }
        });

        // WETH-USDC: Liquidity-driven strategy for stable pair
        this.pairStrategies.set('WETH-USDC', {
            type: 'liquidity-driven',
            timeWindow: 1800000, // 30 minutes
            parameters: {
                entryThreshold: 0.8,  // 80% liquidity utilization
                exitThreshold: 0.5,   // Exit at 50% utilization
                stopLoss: 1.0,        // 1% stop loss
                maxPositionSize: ethers.parseEther('20'),
                minVolume: ethers.parseEther('5')
            }
        });

        // WETH-DEGEN: Momentum strategy for volatile pair
        this.pairStrategies.set('WETH-DEGEN', {
            type: 'momentum',
            timeWindow: 900000, // 15 minutes
            parameters: {
                entryThreshold: 2.0,  // 2% price movement
                exitThreshold: 1.0,   // Take profit at 1%
                stopLoss: 3.0,        // 3% stop loss
                maxPositionSize: ethers.parseEther('5'),
                minVolume: ethers.parseEther('1')
            }
        });

        // Initialize strategy states
        for (const [pair, _] of this.pairStrategies) {
            this.strategyStates.set(pair, {
                active: false,
                lastUpdate: 0,
                currentPosition: 0n,
                entryPrice: 0,
                profitLoss: 0,
                successRate: 0,
                totalTrades: 0
            });
        }
    }

    public async start(): Promise<void> {
        this.isRunning = true;
        console.log('ArbitrageBot started');
        await this.initializeTokenPairs();
        this.startSlippageMonitoring();
        console.log('Initialized token pairs for Base network');
    }

    public stop(): void {
        this.isRunning = false;
        if (this.slippageMonitorHandle) {
            clearInterval(this.slippageMonitorHandle);
        }
        console.log('ArbitrageBot stopped');
    }

    private startSlippageMonitoring(): void {
        this.slippageMonitorHandle = setInterval(
            () => this.monitorSlippage(),
            this.SLIPPAGE_MONITOR_INTERVAL
        );
    }

    private async monitorSlippage(): Promise<void> {
        for (const [tokenAddress, snapshots] of this.liquiditySnapshots) {
            try {
                const recentSnapshots = snapshots
                    .filter(s => s.timeStamp > Date.now() - 3600000)
                    .sort((a, b) => b.timeStamp - a.timeStamp);

                if (recentSnapshots.length < 2) continue;

                // Calculate slippage change rate
                const currentSlippage = recentSnapshots[0].slippage;
                const previousSlippage = recentSnapshots[1].slippage;
                const slippageChangeRate = (currentSlippage - previousSlippage) / previousSlippage * 100;

                // Check emergency conditions
                const emergency = this.checkEmergencyConditions(tokenAddress, currentSlippage);

                if (emergency.activeConditions.length > 0) {
                    this.recordSlippageEvent({
                        type: 'emergency',
                        timestamp: Date.now(),
                        tokenAddress,
                        slippage: emergency.slippage,
                        reason: 'Emergency conditions detected',
                        conditions: emergency.activeConditions,
                        recommendation: this.getEmergencyRecommendation(emergency.activeConditions)
                    });
                }
                // Check for sudden slippage increases
                else if (slippageChangeRate > 50) { // 50% increase
                    this.recordSlippageEvent({
                        type: 'warning',
                        timestamp: Date.now(),
                        tokenAddress,
                        slippage: currentSlippage,
                        reason: `Sudden slippage increase of ${slippageChangeRate.toFixed(2)}%`,
                        recommendation: 'Consider delaying trades or reducing trade size'
                    });
                }
                // Record significant changes
                else if (Math.abs(slippageChangeRate) > 20) { // 20% change
                    this.recordSlippageEvent({
                        type: 'info',
                        timestamp: Date.now(),
                        tokenAddress,
                        slippage: currentSlippage,
                        reason: `Significant slippage change of ${slippageChangeRate.toFixed(2)}%`
                    });
                }
            } catch (error) {
                console.error(`Error monitoring slippage for ${tokenAddress}:`, error);
            }
        }
    }

    private recordSlippageEvent(event: SlippageEvent): void {
        this.slippageEvents.push(event);
        
        // Keep only last 1000 events
        if (this.slippageEvents.length > 1000) {
            this.slippageEvents.shift();
        }

        // Log emergency and warning events
        if (event.type !== 'info') {
            console.log(`🚨 Slippage ${event.type.toUpperCase()}: ${event.reason}`);
            if (event.recommendation) {
                console.log(`Recommendation: ${event.recommendation}`);
            }
        }
    }

    private getEmergencyRecommendation(conditions: EmergencyCondition[]): string {
        const recommendations: string[] = [];
        
        for (const condition of conditions) {
            switch (condition.type) {
                case 'volatility':
                    recommendations.push('Increase slippage tolerance and consider splitting trades');
                    break;
                case 'liquidity':
                    recommendations.push('Reduce trade size or wait for liquidity to improve');
                    break;
                case 'gas':
                    recommendations.push('Consider postponing non-urgent trades');
                    break;
                case 'custom':
                    recommendations.push('Review market conditions before trading');
                    break;
            }
        }

        return recommendations.join('. ');
    }

    public getRecentSlippageEvents(
        timeWindowMs: number = 3600000, // Last hour
        type?: 'warning' | 'emergency' | 'info'
    ): SlippageEvent[] {
        return this.slippageEvents
            .filter(event => 
                event.timestamp > Date.now() - timeWindowMs &&
                (!type || event.type === type)
            )
            .sort((a, b) => b.timestamp - a.timestamp);
    }

    private getTokenSymbol(tokenAddress: string): string {
        // Placeholder - implement actual token symbol lookup
        return tokenAddress.slice(0, 6);
    }

    private async convertToUSD(amount: bigint, tokenAddress: string): Promise<number> {
        // Placeholder - implement actual price conversion
        return Number(amount);
    }

    private detectSophisticatedSandwich(transactions: TransactionWithTo[]): boolean {
        if (transactions.length < 3) return false;
        const gasPrices = transactions.map(tx => Number(tx.gasPrice || 0));
        const sorted = [...gasPrices].sort((a, b) => b - a);
        return sorted[0] > sorted[1] * this.MEV_PATTERNS.SANDWICH.minGasIncrease && 
               sorted[0] > sorted[sorted.length - 1] * this.MEV_PATTERNS.SANDWICH.maxSpread;
    }

    private detectSandwichPattern(transactions: TransactionWithTo[]): boolean {
        if (transactions.length < 3) return false;

        const gasPrices = transactions.map(tx => Number(tx.gasPrice || 0));
        const sorted = [...gasPrices].sort((a, b) => b - a);

        return sorted[0] > sorted[1] * 1.5 && sorted[0] > sorted[sorted.length - 1] * 2;
    }

    private calculateBlockVolume(
        transactions: TransactionWithTo[],
        tokenIn: string,
        tokenOut: string
    ): bigint {
        return transactions.reduce((volume, tx) => {
            if (tx.to && (
                tx.to.toLowerCase() === tokenIn.toLowerCase() ||
                tx.to.toLowerCase() === tokenOut.toLowerCase()
            )) {
                return volume + (tx.value || 0n);
            }
            return volume;
        }, 0n);
    }

    private async analyzeMempoolState(
        tokenIn: string,
        tokenOut: string
    ): Promise<{
        patterns: {
            type: string;
            confidence: number;
            gasPricePattern: string;
            blockSpan: number;
            frequency: number;
        }[];
        riskScore: number;
        sandwichRisk: number;
        frontrunRisk: number;
        backrunRisk: number;
        timingRisk: number;
    }> {
        try {
            const provider = new ethers.JsonRpcProvider(); // Create new provider instance
            const pendingBlock = await provider.getBlock('pending', true);
            if (!pendingBlock?.transactions) {
                return this.getDefaultMempoolAnalysis();
            }

            // First filter and cast transactions to ensure proper typing
            const relevantTxs = this.filterAndCastTransactions(pendingBlock.transactions)
                .filter(tx => 
                    tx.to.toLowerCase() === tokenIn.toLowerCase() ||
                    tx.to.toLowerCase() === tokenOut.toLowerCase()
                );

            const patterns: MEVPattern[] = [];
            let sandwichRisk = 0;
            let frontrunRisk = 0;
            let backrunRisk = 0;
            let timingRisk = 0;

            // Now we can safely pass the properly typed transactions
            if (this.detectSophisticatedSandwich(relevantTxs)) {
                patterns.push({
                    type: 'sandwich',
                    confidence: 0.9,
                    gasPricePattern: 'high-low-high',
                    blockSpan: 1,
                    frequency: 1
                });
                sandwichRisk = 80;
            }

            const highGasTxs = relevantTxs.filter(tx => 
                tx.gasPrice && relevantTxs[0]?.gasPrice && 
                Number(tx.gasPrice) > Number(relevantTxs[0].gasPrice) * 1.5
            );

            if (highGasTxs.length > 0) {
                patterns.push({
                    type: 'frontrun',
                    confidence: 0.85,
                    gasPricePattern: 'sudden-spike',
                    blockSpan: 1,
                    frequency: highGasTxs.length
                });
                frontrunRisk = 70;
            }

            const riskScore = (sandwichRisk + frontrunRisk + backrunRisk + timingRisk) / 4;

            return {
                patterns,
                riskScore,
                sandwichRisk,
                frontrunRisk,
                backrunRisk,
                timingRisk
            };
        } catch (error) {
            console.error('Error analyzing mempool state:', error);
            return this.getDefaultMempoolAnalysis();
        }
    }

    private getDefaultMempoolAnalysis() {
        return {
            patterns: [],
            riskScore: 50,
            sandwichRisk: 50,
            frontrunRisk: 50,
            backrunRisk: 50,
            timingRisk: 50
        };
    }

    private calculateLiquidityRisk(amountIn: bigint, liquidityData: LiquidityDepthAnalysis): number {
        if (liquidityData.totalLiquidity === 0n) return 100;

        // Calculate what percentage of total liquidity the trade represents
        const tradePercentage = Number((amountIn * 10000n) / liquidityData.totalLiquidity);
        
        // Higher risk if trade size is significant compared to available liquidity
        let risk = Math.min(100, tradePercentage / 2);

        // Adjust risk based on liquidity concentration
        if (liquidityData.concentrationScore < 50) {
            risk += (50 - liquidityData.concentrationScore) / 2;
        }

        // Adjust risk based on liquidity health score
        if (liquidityData.healthScore < 70) {
            risk += (70 - liquidityData.healthScore) / 3;
        }

        return Math.min(100, risk);
    }

    private async analyzeVolumePatterns(
        tokenIn: string,
        tokenOut: string
    ): Promise<number> {
        try {
            const currentBlock = await this.provider.getBlockNumber();
            const historicalBlocks = 100; // Look at last 100 blocks
            
            let totalVolume = 0n;
            let volumeSpikes = 0;
            
            for (let i = 0; i < historicalBlocks; i += 10) {
                const block = await this.provider.getBlock(currentBlock - i, true);
                if (!block?.transactions) continue;

                const blockVolume = this.calculateBlockVolume(
                    this.filterAndCastTransactions(block.transactions),
                    tokenIn,
                    tokenOut
                );
                
                totalVolume += blockVolume;
                
                if (blockVolume > (totalVolume / BigInt(i + 1)) * 2n) {
                    volumeSpikes++;
                }
            }

            const volumeRisk = Math.min(100, (volumeSpikes * 20));
            return volumeRisk;
        } catch (error) {
            console.error('Error analyzing volume patterns:', error);
            return 50;
        }
    }

    private async getRecentMEVActivity(
        tokenIn: string,
        tokenOut: string
    ): Promise<MEVActivityLog[]> {
        return this.mevActivityLogs
            .filter(log => 
                log.timestamp > Date.now() - 24 * 60 * 60 * 1000 && // Last 24 hours
                log.details.includes(this.getTokenSymbol(tokenIn)) &&
                log.details.includes(this.getTokenSymbol(tokenOut))
            )
            .sort((a, b) => b.timestamp - a.timestamp);
    }

    private async calculateDetailedMEVLoss(
        tokenIn: string,
        tokenOut: string,
        amountIn: bigint,
        analysis: MEVAnalysis
    ): Promise<number> {
        try {
            // Get token prices
            const tokenInPrice = await this.convertToUSD(ethers.parseEther('1'), tokenIn);
            const amountInUSD = Number(amountIn) * tokenInPrice / 1e18;

            // Calculate potential losses from different MEV types
            const sandwichLoss = amountInUSD * (analysis.sandwichRisk / 100) * 0.05;
            const frontrunLoss = amountInUSD * (analysis.frontrunRisk / 100) * 0.03;
            const backrunLoss = amountInUSD * (analysis.backrunRisk / 100) * 0.02;
            const timingLoss = amountInUSD * (analysis.timingRisk / 100) * 0.01;

            // Adjust based on risk factors
            const liquidityMultiplier = 1 + (analysis.riskFactors.liquidityRisk / 200);
            const volumeMultiplier = 1 + (analysis.riskFactors.volumeRisk / 200);

            const totalLoss = (sandwichLoss + frontrunLoss + backrunLoss + timingLoss) *
                             liquidityMultiplier * volumeMultiplier;

            return Math.min(amountInUSD * 0.1, totalLoss); // Cap at 10% of trade value
        } catch (error) {
            console.error('Error calculating detailed MEV loss:', error);
            return 0;
        }
    }

    private filterAndCastTransactions(transactions: ReadonlyArray<ethers.TransactionResponse | string>): TransactionWithTo[] {
        return transactions
            .filter((tx): tx is ethers.TransactionResponse => 
                typeof tx === 'object' && tx !== null && 'to' in tx && tx.to !== null
            )
            .filter((tx): tx is TransactionWithTo => 
                tx.to !== null && typeof tx.to === 'string'
            );
    }

    private detectFrontrunning(
        currentTxs: TransactionWithTo[],
        nextBlockTxs: TransactionWithTo[]
    ): boolean {
        if (!currentTxs?.length || !nextBlockTxs?.length) return false;

        const highGasTxs = currentTxs.filter(tx => {
            const baseGasPrice = currentTxs[0].gasPrice ? BigInt(currentTxs[0].gasPrice.toString()) : 0n;
            const txGasPrice = tx.gasPrice ? BigInt(tx.gasPrice.toString()) : 0n;
            return txGasPrice > baseGasPrice * BigInt(Math.floor(this.MEV_PATTERNS.FRONTRUN.minGasIncrease * 100)) / 100n;
        });

        return highGasTxs.some(sTx => 
            nextBlockTxs.some(tTx => 
                sTx.to === tTx.to || 
                sTx.from === tTx.from
            )
        );
    }

    public async getStats(): Promise<{
        isRunning: boolean;
        mevActivityCount: number;
        recentPatterns: MEVPattern[];
    }> {
        return {
            isRunning: this.isRunning,
            mevActivityCount: this.mevActivityLogs.length,
            recentPatterns: this.mevActivityLogs
                .slice(-10)
                .map(log => log.pattern)
        };
    }

    public getArbitrageHistory(): MEVActivityLog[] {
        return this.mevActivityLogs.slice().sort((a, b) => b.timestamp - a.timestamp);
    }

    private async trackPrice(tokenAddress: string, price: number, volume: bigint): Promise<void> {
        const history = this.priceHistory.get(tokenAddress) || [];
        const blockNumber = await this.provider.getBlockNumber();
        
        history.push({
            timestamp: Date.now(),
            price,
            volume,
            blockNumber
        });

        // Keep only the most recent prices
        if (history.length > this.MAX_PRICE_HISTORY_LENGTH) {
            history.shift();
        }

        this.priceHistory.set(tokenAddress, history);
    }

    private getPriceVolatility(tokenAddress: string, timeWindowMs: number = 3600000): number {
        const history = this.priceHistory.get(tokenAddress) || [];
        const recentPrices = history.filter(p => p.timestamp > Date.now() - timeWindowMs);
        
        if (recentPrices.length < 2) return 0;

        const prices = recentPrices.map(p => p.price);
        const mean = prices.reduce((a, b) => a + b) / prices.length;
        const variance = prices.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / prices.length;
        
        return Math.sqrt(variance) / mean * 100; // Return as percentage
    }

    private getPriceTrend(tokenAddress: string, timeWindowMs: number = 3600000): {
        trend: 'up' | 'down' | 'sideways';
        strength: number;  // 0-100
        averagePrice: number;
    } {
        const history = this.priceHistory.get(tokenAddress) || [];
        const recentPrices = history
            .filter(p => p.timestamp > Date.now() - timeWindowMs)
            .sort((a, b) => a.timestamp - b.timestamp);

        if (recentPrices.length < 2) {
            return { trend: 'sideways', strength: 0, averagePrice: recentPrices[0]?.price || 0 };
        }

        const priceChanges = recentPrices.map((p, i) => 
            i === 0 ? 0 : ((p.price - recentPrices[i-1].price) / recentPrices[i-1].price) * 100
        );

        const averageChange = priceChanges.reduce((a, b) => a + b, 0) / priceChanges.length;
        const strength = Math.min(100, Math.abs(averageChange) * 10);
        const averagePrice = recentPrices.reduce((a, b) => a + b.price, 0) / recentPrices.length;

        return {
            trend: averageChange > 0.5 ? 'up' : averageChange < -0.5 ? 'down' : 'sideways',
            strength,
            averagePrice
        };
    }

    private async isOptimalTradeTime(
        tokenAddress: string,
        amount: bigint,
        maxVolatility: number = 20,
        minVolume: bigint = ethers.parseEther('10')
    ): Promise<{
        isOptimal: boolean;
        reason: string;
        confidence: number;
    }> {
        const volatility = this.getPriceVolatility(tokenAddress);
        const trend = this.getPriceTrend(tokenAddress);
        const history = this.priceHistory.get(tokenAddress) || [];
        const recentHistory = history.filter(p => p.timestamp > Date.now() - 3600000);

        if (recentHistory.length < 10) {
            return {
                isOptimal: false,
                reason: 'Insufficient price history',
                confidence: 0
            };
        }

        const averageVolume = recentHistory.reduce((a, b) => a + b.volume, 0n) / BigInt(recentHistory.length);
        const volumeCondition = averageVolume > minVolume;
        const volatilityCondition = volatility < maxVolatility;
        const trendStrength = trend.strength > 60;

        let confidence = 0;
        let reason = '';

        if (!volumeCondition) {
            reason = 'Insufficient liquidity';
            confidence = 30;
        } else if (!volatilityCondition) {
            reason = 'High volatility';
            confidence = 40;
        } else if (trendStrength && trend.trend === 'down') {
            reason = 'Strong downward trend';
            confidence = 70;
        } else if (volatilityCondition && volumeCondition) {
            reason = 'Stable market conditions';
            confidence = 80;
        }

        return {
            isOptimal: confidence > 70,
            reason,
            confidence
        };
    }

    private async updateGasCosts(): Promise<void> {
        try {
            const currentBlock = await this.provider.getBlock('latest');
            if (!currentBlock) return;

            const baseFee = currentBlock.baseFeePerGas || 0n;
            const priorityFee = await this.provider.send('eth_maxPriorityFeePerGas', []);
            
            this.gasCosts.current = baseFee + BigInt(priorityFee);
            this.gasCosts.historical.push({
                timestamp: Date.now(),
                cost: this.gasCosts.current
            });

            // Keep last 100 gas price points
            if (this.gasCosts.historical.length > 100) {
                this.gasCosts.historical.shift();
            }

            // Update priority based on recent trends
            const recentCosts = this.gasCosts.historical.slice(-10);
            if (recentCosts.length > 1) {
                const avgRecent = Number(recentCosts.reduce((a, b) => a + b.cost, 0n) / BigInt(recentCosts.length));
                const avgAll = Number(this.gasCosts.historical.reduce((a, b) => a + b.cost, 0n) / BigInt(this.gasCosts.historical.length));
                this.gasCosts.priority = Math.min(100, Math.max(0, Math.floor((avgRecent / avgAll) * 50)));
            }
        } catch (error) {
            console.error('Error updating gas costs:', error);
        }
    }

    private async calculateCrossPoolPriceImpact(
        tokenAddress: string,
        amount: bigint,
        side: 'buy' | 'sell'
    ): Promise<{
        impact: number;
        optimalDistribution: { poolAddress: string; amount: bigint }[];
        estimatedGasCost: bigint;
    }> {
        const pools = this.poolLiquidity.get(tokenAddress) || [];
        const recentPools = pools.filter(p => p.lastUpdateTime > Date.now() - 3600000);

        if (recentPools.length === 0) {
            return {
                impact: 0.05, // Default 5% impact
                optimalDistribution: [],
                estimatedGasCost: this.gasCosts.current * 21000n // Basic transfer gas cost
            };
        }

        // Sort pools by liquidity and fee efficiency
        const rankedPools = recentPools
            .map(pool => ({
                ...pool,
                score: Number(pool.liquidity) * (1 - pool.fee/10000) * (1 - pool.utilization/100)
            }))
            .sort((a, b) => b.score - a.score);

        // Calculate optimal distribution to minimize impact
        const distribution = this.calculateOptimalDistribution(rankedPools, amount);
        
        // Calculate combined impact
        const weightedImpact = distribution.reduce((total, d) => {
            const poolImpact = this.calculatePoolImpact(d.amount, d.pool);
            return total + (poolImpact * Number(d.amount) / Number(amount));
        }, 0);

        // Estimate gas costs for multi-pool interaction
        const estimatedGasCost = this.gasCosts.current * BigInt(150000 * distribution.length);

        return {
            impact: weightedImpact,
            optimalDistribution: distribution.map(d => ({
                poolAddress: d.pool.poolAddress,
                amount: d.amount
            })),
            estimatedGasCost
        };
    }

    private calculatePoolImpact(amount: bigint, pool: CrossPoolLiquidity): number {
        const utilizationImpact = pool.utilization / 100;
        const liquidityRatio = Number(amount * 10000n / pool.liquidity) / 100;
        return Math.min(1, (utilizationImpact * 0.4) + (liquidityRatio * 0.6));
    }

    private calculateOptimalDistribution(
        pools: (CrossPoolLiquidity & { score: number })[],
        totalAmount: bigint
    ): { pool: CrossPoolLiquidity; amount: bigint }[] {
        let remaining = totalAmount;
        const distribution: { pool: CrossPoolLiquidity; amount: bigint }[] = [];

        for (const pool of pools) {
            if (remaining <= 0n) break;

            // Calculate optimal amount for this pool based on its score
            const poolShare = Math.min(
                Number(remaining),
                Number(pool.liquidity) * (pool.score / pools[0].score) * 0.3 // Use at most 30% of pool's liquidity
            );

            const amount = BigInt(Math.floor(poolShare));
            if (amount > 0n) {
                distribution.push({ pool, amount });
                remaining -= amount;
            }
        }

        // Adjust final distribution if there's still remaining amount
        if (remaining > 0n && distribution.length > 0) {
            distribution[0].amount += remaining;
        }

        return distribution;
    }

    private async calculatePriceImpact(
        tokenAddress: string,
        amount: bigint,
        side: 'buy' | 'sell'
    ): Promise<PriceImpactAnalysis> {
        // Get base impact calculation
        const baseImpact = await this.calculateBasePriceImpact(tokenAddress, amount, side);
        
        // Get cross-pool impact
        const crossPoolImpact = await this.calculateCrossPoolPriceImpact(tokenAddress, amount, side);
        
        // Update gas costs
        await this.updateGasCosts();

        // Combine impacts with gas cost considerations
        const gasCostImpact = Number(crossPoolImpact.estimatedGasCost * 100n / amount) / 100;
        const combinedImpact = Math.min(
            baseImpact.expectedImpact,
            crossPoolImpact.impact + gasCostImpact
        );

        return {
            expectedImpact: combinedImpact,
            worstCase: combinedImpact * 1.5,
            confidence: Math.min(baseImpact.confidence, 
                               crossPoolImpact.optimalDistribution.length > 1 ? 90 : 70),
            recommendedMaxSize: this.calculateRecommendedSizeWithGas(
                baseImpact.recommendedMaxSize,
                crossPoolImpact.estimatedGasCost
            ),
            liquidityScore: baseImpact.liquidityScore
        };
    }

    private calculateRecommendedSizeWithGas(baseSize: bigint, gasCost: bigint): bigint {
        // Ensure trade size is at least 10x the gas cost
        const minSize = gasCost * 10n;
        return baseSize > minSize ? baseSize : minSize;
    }

    private async calculateBasePriceImpact(
        tokenAddress: string,
        amount: bigint,
        side: 'buy' | 'sell'
    ): Promise<PriceImpactAnalysis> {
        const history = this.priceHistory.get(tokenAddress) || [];
        const snapshots = this.liquiditySnapshots.get(tokenAddress) || [];
        const recentHistory = history.filter(p => p.timestamp > Date.now() - 3600000);

        if (recentHistory.length < 10) {
            return {
                expectedImpact: 5,    // Default 5% impact
                worstCase: 10,        // Default 10% worst case
                confidence: 30,        // Low confidence due to lack of data
                recommendedMaxSize: ethers.parseEther('1'),  // Conservative default
                liquidityScore: 50     // Neutral liquidity score
            };
        }

        // Calculate average trade size and its standard deviation
        const tradeSizes = recentHistory.map(h => h.volume);
        const avgTradeSize = tradeSizes.reduce((a, b) => a + b, 0n) / BigInt(tradeSizes.length);
        const tradeStdDev = this.calculateStdDev(tradeSizes.map(Number));

        // Calculate liquidity score based on recent snapshots
        const liquidityScore = Math.min(100, recentHistory.length * 5);

        // Calculate expected price impact using a combination of factors
        const sizeFactorImpact = Number(amount * 100n / avgTradeSize) / 100;
        const volatilityImpact = this.getPriceVolatility(tokenAddress) / 100;
        const depthImpact = Number(amount * 100n / (avgTradeSize * 10n)) / 100;

        // Combine factors with weighted average
        const expectedImpact = (
            sizeFactorImpact * 0.4 +
            volatilityImpact * 0.3 +
            depthImpact * 0.3
        ) * (side === 'buy' ? 1 : 0.8); // Selling typically has less impact

        return {
            expectedImpact: Math.min(100, expectedImpact),
            worstCase: Math.min(100, expectedImpact * 1.5),
            confidence: liquidityScore,
            recommendedMaxSize: avgTradeSize * 2n,
            liquidityScore
        };
    }

    private calculateStdDev(numbers: number[]): number {
        const mean = numbers.reduce((a, b) => a + b) / numbers.length;
        const variance = numbers.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / numbers.length;
        return Math.sqrt(variance);
    }

    private calculateDynamicSlippage(
        amount: bigint,
        tokenAddress: string,
        poolData?: CrossPoolLiquidity
    ): number {
        // Get recent liquidity data
        const snapshots = this.liquiditySnapshots.get(tokenAddress) || [];
        const recentSnapshots = snapshots
            .filter(s => s.timeStamp > Date.now() - 3600000)
            .sort((a, b) => b.timeStamp - a.timeStamp);

        // Start with base slippage from config
        let slippage = this.SLIPPAGE_CONFIG.min;

        // If no recent data, use conservative slippage
        if (recentSnapshots.length === 0) {
            return this.SLIPPAGE_CONFIG.max;
        }

        // Calculate liquidity factors
        const avgDepth = recentSnapshots
            .reduce((sum, snap) => sum + snap.depth, 0n) / BigInt(recentSnapshots.length);
        const liquidityRatio = Number(amount * 10000n / avgDepth) / 100;
        const volatility = this.getPriceVolatility(tokenAddress);
        
        // Adjust slippage based on liquidity ratio
        slippage += Math.floor(liquidityRatio * 50); // Add up to 0.5% based on size vs liquidity

        // Adjust for volatility
        slippage += Math.floor(volatility * 20); // Add up to 0.2% per 1% volatility

        // Additional adjustments if pool data is available
        if (poolData) {
            // Adjust for pool utilization
            slippage += Math.floor(poolData.utilization * 0.5); // Add up to 0.5% based on utilization
            
            // Adjust for pool fees
            const feeImpact = Math.floor(poolData.fee / 100);
            slippage += feeImpact;
        }

        // Consider recent price trend
        const trend = this.getPriceTrend(tokenAddress);
        if (trend.strength > 50) {
            slippage += Math.floor(trend.strength / 2); // Add up to 0.25% for strong trends
        }

        // Ensure slippage stays within configured bounds
        return Math.min(
            this.SLIPPAGE_CONFIG.max,
            Math.max(this.SLIPPAGE_CONFIG.min, slippage)
        );
    }

    private checkEmergencyConditions(
        tokenAddress: string,
        normalSlippage: number
    ): {
        slippage: number;
        activeConditions: EmergencyCondition[];
    } {
        const activeConditions: EmergencyCondition[] = [];
        let maxMultiplier = 1;

        // Check volatility condition
        const volatility = this.getPriceVolatility(tokenAddress);
        if (volatility > this.emergencyConditions[0].threshold) {
            activeConditions.push(this.emergencyConditions[0]);
            maxMultiplier = Math.max(maxMultiplier, this.emergencyConditions[0].multiplier);
            this.emergencyConditions[0].active = true;
        }

        // Check liquidity condition
        const snapshots = this.liquiditySnapshots.get(tokenAddress) || [];
        const recentSnapshots = snapshots.filter(s => s.timeStamp > Date.now() - 3600000);
        if (recentSnapshots.length > 0) {
            const currentDepth = recentSnapshots[0].depth;
            const avgDepth = recentSnapshots.reduce((sum, snap) => sum + snap.depth, 0n) / BigInt(recentSnapshots.length);
            const depthDrop = Number((avgDepth - currentDepth) * 100n / avgDepth);
            
            if (depthDrop > this.emergencyConditions[1].threshold) {
                activeConditions.push(this.emergencyConditions[1]);
                maxMultiplier = Math.max(maxMultiplier, this.emergencyConditions[1].multiplier);
                this.emergencyConditions[1].active = true;
            }
        }

        // Check gas condition
        const currentGasGwei = Number(this.gasCosts.current) / 1e9;
        if (currentGasGwei > this.emergencyConditions[2].threshold) {
            activeConditions.push(this.emergencyConditions[2]);
            maxMultiplier = Math.max(maxMultiplier, this.emergencyConditions[2].multiplier);
            this.emergencyConditions[2].active = true;
        }

        // Apply emergency multiplier to slippage
        const emergencySlippage = Math.min(
            this.SLIPPAGE_CONFIG.max * 2, // Hard cap at 2x max normal slippage
            normalSlippage * maxMultiplier
        );

        return {
            slippage: emergencySlippage,
            activeConditions
        };
    }

    private async getOptimalSlippage(
        amount: bigint,
        tokenAddress: string
    ): Promise<{
        slippage: number;
        confidence: number;
        factors: {
            liquidityFactor: number;
            volatilityFactor: number;
            trendFactor: number;
            utilizationFactor: number;
        };
        emergencyOverride?: {
            applied: boolean;
            conditions: EmergencyCondition[];
            multiplier: number;
        };
    }> {
        // Get base calculation
        const baseCalc = await this.calculateBaseSlippage(amount, tokenAddress);
        
        // Check for emergency conditions
        const emergency = this.checkEmergencyConditions(tokenAddress, baseCalc.slippage);
        
        // If emergency conditions are active, override the slippage
        if (emergency.activeConditions.length > 0) {
            return {
                ...baseCalc,
                slippage: emergency.slippage,
                emergencyOverride: {
                    applied: true,
                    conditions: emergency.activeConditions,
                    multiplier: emergency.slippage / baseCalc.slippage
                }
            };
        }

        return {
            ...baseCalc,
            emergencyOverride: {
                applied: false,
                conditions: [],
                multiplier: 1
            }
        };
    }

    private async calculateBaseSlippage(
        amount: bigint,
        tokenAddress: string
    ): Promise<{
        slippage: number;
        confidence: number;
        factors: {
            liquidityFactor: number;
            volatilityFactor: number;
            trendFactor: number;
            utilizationFactor: number;
        };
    }> {
        // Get cross-pool data for comprehensive analysis
        const pools = this.poolLiquidity.get(tokenAddress) || [];
        const mostLiquidPool = pools
            .sort((a, b) => Number(b.liquidity - a.liquidity))[0];

        // Calculate base slippage
        const baseSlippage = this.calculateDynamicSlippage(amount, tokenAddress, mostLiquidPool);
        
        // Calculate confidence based on data quality
        const snapshots = this.liquiditySnapshots.get(tokenAddress) || [];
        const recentSnapshots = snapshots.filter(s => s.timeStamp > Date.now() - 3600000);
        
        const dataQuality = Math.min(100, (recentSnapshots.length / 10) * 100);
        const volatility = this.getPriceVolatility(tokenAddress);
        const trend = this.getPriceTrend(tokenAddress);

        // Calculate individual factors for transparency
        const factors = {
            liquidityFactor: Number(amount * 10000n / (mostLiquidPool?.liquidity || 1n)) / 100,
            volatilityFactor: volatility / 100,
            trendFactor: trend.strength / 100,
            utilizationFactor: mostLiquidPool?.utilization || 50
        };

        // Calculate confidence score
        const confidence = Math.max(0, Math.min(100,
            dataQuality * 0.4 +                    // 40% weight on data quality
            (100 - volatility) * 0.3 +            // 30% weight on stability
            (100 - factors.liquidityFactor) * 0.3  // 30% weight on liquidity adequacy
        ));

        return {
            slippage: baseSlippage,
            confidence,
            factors
        };
    }

    private async calculateMultiHopSlippage(
        hops: Array<{
            dexAddress: string;
            tokenIn: string;
            tokenOut: string;
            amount: bigint;
        }>
    ): Promise<MultiHopSlippage> {
        const hopSlippages: HopSlippage[] = [];
        let cumulativeSlippage = 0;
        let cumulativeMaxSlippage = 0;
        let minConfidence = 100;

        // Calculate slippage for each hop
        for (const hop of hops) {
            const slippageAnalysis = await this.getOptimalSlippage(hop.amount, hop.tokenIn);
            const crossPoolImpact = await this.calculateCrossPoolPriceImpact(hop.tokenIn, hop.amount, 'sell');
            
            const hopSlippage: HopSlippage = {
                dexAddress: hop.dexAddress,
                tokenIn: hop.tokenIn,
                tokenOut: hop.tokenOut,
                expectedSlippage: slippageAnalysis.slippage + crossPoolImpact.impact,
                maxSlippage: Math.min(
                    this.SLIPPAGE_CONFIG.max * 2,
                    (slippageAnalysis.slippage + crossPoolImpact.impact) * 1.5
                ),
                confidence: slippageAnalysis.confidence
            };

            hopSlippages.push(hopSlippage);
            cumulativeSlippage += hopSlippage.expectedSlippage;
            cumulativeMaxSlippage += hopSlippage.maxSlippage;
            minConfidence = Math.min(minConfidence, hopSlippage.confidence);
        }

        // Generate recommendation based on analysis
        const recommendation = this.generateMultiHopRecommendation(
            hopSlippages,
            cumulativeSlippage,
            minConfidence
        );

        return {
            totalExpectedSlippage: cumulativeSlippage,
            totalMaxSlippage: cumulativeMaxSlippage,
            overallConfidence: minConfidence,
            hops: hopSlippages,
            recommendation
        };
    }

    private generateMultiHopRecommendation(
        hops: HopSlippage[],
        totalSlippage: number,
        confidence: number
    ): string {
        const recommendations: string[] = [];

        // Check total slippage
        if (totalSlippage > this.SLIPPAGE_CONFIG.max * hops.length) {
            recommendations.push('Consider reducing number of hops due to high cumulative slippage');
        }

        // Check confidence
        if (confidence < 70) {
            recommendations.push('High uncertainty in one or more hops - consider alternative routes');
        }

        // Identify problematic hops
        const highSlippageHops = hops.filter(h => h.expectedSlippage > this.SLIPPAGE_CONFIG.max);
        if (highSlippageHops.length > 0) {
            recommendations.push(`High slippage detected in ${highSlippageHops.length} hop(s) - consider direct routes`);
        }

        // If no specific issues, provide general guidance
        if (recommendations.length === 0) {
            if (totalSlippage <= this.SLIPPAGE_CONFIG.max * hops.length * 0.7) {
                recommendations.push('Route appears optimal');
            } else {
                recommendations.push('Route is acceptable but monitor execution closely');
            }
        }

        return recommendations.join('. ');
    }

    public async validateAndAdjustRoute(
        route: Array<{
            dexAddress: string;
            tokenIn: string;
            tokenOut: string;
            amount: bigint;
        }>,
        maxTotalSlippage: number
    ): Promise<{
        isValid: boolean;
        adjustedRoute?: typeof route;
        slippageAnalysis: MultiHopSlippage;
        reason?: string;
    }> {
        const slippageAnalysis = await this.calculateMultiHopSlippage(route);

        // Route is invalid if total slippage exceeds maximum
        if (slippageAnalysis.totalExpectedSlippage > maxTotalSlippage) {
            return {
                isValid: false,
                slippageAnalysis,
                reason: `Total expected slippage (${slippageAnalysis.totalExpectedSlippage.toFixed(2)}%) exceeds maximum allowed (${maxTotalSlippage}%)`
            };
        }

        // Route is invalid if any hop has very low confidence
        if (slippageAnalysis.overallConfidence < 50) {
            return {
                isValid: false,
                slippageAnalysis,
                reason: `Low confidence in route (${slippageAnalysis.overallConfidence.toFixed(2)}%)`
            };
        }

        // Try to optimize route if some hops have high slippage
        const highSlippageHops = slippageAnalysis.hops.filter(h => h.expectedSlippage > this.SLIPPAGE_CONFIG.max);
        if (highSlippageHops.length > 0) {
            const adjustedRoute = await this.optimizeRoute(route, slippageAnalysis);
            if (adjustedRoute) {
                const newAnalysis = await this.calculateMultiHopSlippage(adjustedRoute);
                if (newAnalysis.totalExpectedSlippage < slippageAnalysis.totalExpectedSlippage) {
                    return {
                        isValid: true,
                        adjustedRoute,
                        slippageAnalysis: newAnalysis
                    };
                }
            }
        }

        return {
            isValid: true,
            slippageAnalysis
        };
    }

    private async optimizeRoute(
        route: Array<{
            dexAddress: string;
            tokenIn: string;
            tokenOut: string;
            amount: bigint;
        }>,
        currentAnalysis: MultiHopSlippage
    ): Promise<typeof route | undefined> {
        // Find alternative paths for high slippage hops
        const optimizedRoute = [...route];
        let modified = false;

        for (let i = 0; i < currentAnalysis.hops.length; i++) {
            const hop = currentAnalysis.hops[i];
            if (hop.expectedSlippage > this.SLIPPAGE_CONFIG.max) {
                // Try to find a better DEX for this hop
                const alternativeDex = await this.findBetterDex(
                    hop.tokenIn,
                    hop.tokenOut,
                    route[i].amount
                );

                if (alternativeDex) {
                    optimizedRoute[i] = {
                        ...optimizedRoute[i],
                        dexAddress: alternativeDex
                    };
                    modified = true;
                }
            }
        }

        return modified ? optimizedRoute : undefined;
    }

    private async findBetterDex(
        tokenIn: string,
        tokenOut: string,
        amount: bigint
    ): Promise<string | undefined> {
        // Get all pools that support this token pair
        const pools = Array.from(this.poolLiquidity.entries())
            .filter(([_, poolData]) => 
                poolData.some(p => 
                    p.lastUpdateTime > Date.now() - 3600000 && // Recent data
                    Number(p.liquidity) > Number(amount) * 2    // Sufficient liquidity
                )
            );

        if (pools.length === 0) return undefined;

        // Find pool with lowest fees and highest liquidity
        const bestPool = pools
            .map(([address, data]) => ({
                address,
                score: data.reduce((acc, p) => 
                    acc + (Number(p.liquidity) / (1 + p.fee/10000) / (1 + p.utilization/100)),
                    0
                )
            }))
            .sort((a, b) => b.score - a.score)[0];

        return bestPool?.address;
    }

    private async initializeTokenPairs(): Promise<void> {
        for (const pair of this.BASE_TOKEN_PAIRS) {
            // Initialize price history for both tokens
            if (!this.priceHistory.has(pair.tokenA.address)) {
                this.priceHistory.set(pair.tokenA.address, []);
            }
            if (!this.priceHistory.has(pair.tokenB.address)) {
                this.priceHistory.set(pair.tokenB.address, []);
            }

            // Initialize liquidity snapshots
            if (!this.liquiditySnapshots.has(pair.tokenA.address)) {
                this.liquiditySnapshots.set(pair.tokenA.address, []);
            }
            if (!this.liquiditySnapshots.has(pair.tokenB.address)) {
                this.liquiditySnapshots.set(pair.tokenB.address, []);
            }

            // Initialize pool liquidity tracking
            for (const dex of pair.dexes) {
                if (!this.poolLiquidity.has(dex.address)) {
                    this.poolLiquidity.set(dex.address, []);
                }
            }
        }
    }

    public getConfiguredPairs(): TokenPairConfig[] {
        return this.BASE_TOKEN_PAIRS;
    }

    public async getTokenPairStats(tokenAAddress: string, tokenBAddress: string): Promise<{
        pair: TokenPairConfig | undefined;
        liquidityStats: {
            dex: string;
            liquidity: bigint;
            utilization: number;
            lastUpdate: number;
        }[];
        priceStats: {
            tokenA: {
                price: number;
                volatility: number;
            };
            tokenB: {
                price: number;
                volatility: number;
            };
        };
    }> {
        const pair = this.BASE_TOKEN_PAIRS.find(p => 
            (p.tokenA.address.toLowerCase() === tokenAAddress.toLowerCase() && 
             p.tokenB.address.toLowerCase() === tokenBAddress.toLowerCase()) ||
            (p.tokenA.address.toLowerCase() === tokenBAddress.toLowerCase() && 
             p.tokenB.address.toLowerCase() === tokenAAddress.toLowerCase())
        );

        if (!pair) {
            throw new Error('Token pair not configured');
        }

        const liquidityStats = await Promise.all(pair.dexes.map(async dex => {
            const poolData = this.poolLiquidity.get(dex.address) || [];
            const latestData = poolData[poolData.length - 1];
            return {
                dex: dex.protocol,
                liquidity: latestData?.liquidity || 0n,
                utilization: latestData?.utilization || 0,
                lastUpdate: latestData?.lastUpdateTime || 0
            };
        }));

        return {
            pair,
            liquidityStats,
            priceStats: {
                tokenA: {
                    price: this.getLatestPrice(pair.tokenA.address),
                    volatility: this.getPriceVolatility(pair.tokenA.address)
                },
                tokenB: {
                    price: this.getLatestPrice(pair.tokenB.address),
                    volatility: this.getPriceVolatility(pair.tokenB.address)
                }
            }
        };
    }

    private getLatestPrice(tokenAddress: string): number {
        const history = this.priceHistory.get(tokenAddress) || [];
        return history[history.length - 1]?.price || 0;
    }

    private async updateProtocolStates(): Promise<void> {
        for (const protocol of this.PROTOCOLS) {
            if (protocol.type === 'lending') {
                const states = await Promise.all(
                    protocol.supportedTokens.map(token => 
                        this.fetchLendingProtocolState(protocol.address, token)
                    )
                );
                this.protocolStates.set(protocol.address, states);
            }
        }
    }

    private async fetchLendingProtocolState(
        protocolAddress: string,
        tokenAddress: string
    ): Promise<LendingProtocolState> {
        try {
            // Implement actual contract calls here
            // This is a placeholder implementation
            return {
                token: tokenAddress,
                supplyApy: 0,
                borrowApy: 0,
                totalSupply: 0n,
                availableLiquidity: 0n,
                utilizationRate: 0,
                collateralFactor: 0
            };
        } catch (error) {
            console.error(`Error fetching lending protocol state: ${error}`);
            throw error;
        }
    }

    private async findCrossProtocolOpportunities(
        amount: bigint,
        maxHops: number = 3
    ): Promise<{
        opportunities: {
            steps: {
                protocol: ProtocolConfig;
                action: string;
                tokenIn: string;
                tokenOut: string;
                expectedReturn: bigint;
                fee: bigint;
            }[];
            totalReturn: bigint;
            totalFees: bigint;
            risk: number;
            confidence: number;
        }[];
    }> {
        await this.updateProtocolStates();

        const opportunities = [];
        const lendingProtocols = this.PROTOCOLS.filter(p => p.type === 'lending');
        const dexes = this.PROTOCOLS.filter(p => p.type === 'dex');

        for (const lendingProtocol of lendingProtocols) {
            for (const token of lendingProtocol.supportedTokens) {
                const lendingState = this.protocolStates.get(lendingProtocol.address)
                    ?.find(s => s.token === token);

                if (!lendingState || lendingState.availableLiquidity < amount) continue;

                // Check flash loan opportunities
                if (lendingProtocol.features.includes('flash-loans')) {
                    const flashLoanOpps = await this.findFlashLoanOpportunities(
                        lendingProtocol,
                        token,
                        amount,
                        dexes
                    );
                    opportunities.push(...flashLoanOpps);
                }

                // Check leveraged opportunities
                if (lendingProtocol.maxLeverage && lendingProtocol.maxLeverage > 1) {
                    const leveragedOpps = await this.findLeveragedOpportunities(
                        lendingProtocol,
                        token,
                        amount,
                        dexes
                    );
                    opportunities.push(...leveragedOpps);
                }
            }
        }

        return {
            opportunities: opportunities.sort((a, b) => 
                Number(b.totalReturn - b.totalFees) - Number(a.totalReturn - a.totalFees)
            )
        };
    }

    private async findFlashLoanOpportunities(
        lendingProtocol: ProtocolConfig,
        token: string,
        amount: bigint,
        dexes: ProtocolConfig[]
    ): Promise<{
        steps: {
            protocol: ProtocolConfig;
            action: string;
            tokenIn: string;
            tokenOut: string;
            expectedReturn: bigint;
            fee: bigint;
        }[];
        totalReturn: bigint;
        totalFees: bigint;
        risk: number;
        confidence: number;
    }[]> {
        const opportunities = [];

        for (const dexA of dexes) {
            for (const dexB of dexes) {
                if (dexA === dexB) continue;

                // Find common tokens between DEXes
                const commonTokens = dexA.supportedTokens.filter(t => 
                    dexB.supportedTokens.includes(t) && t !== token
                );

                for (const intermediateToken of commonTokens) {
                    // Calculate potential profit
                    const [firstSwapReturn, firstSwapFee] = await this.estimateSwapReturn(
                        dexA,
                        token,
                        intermediateToken,
                        amount
                    );

                    if (firstSwapReturn <= amount) continue;

                    const [secondSwapReturn, secondSwapFee] = await this.estimateSwapReturn(
                        dexB,
                        intermediateToken,
                        token,
                        firstSwapReturn
                    );

                    const flashLoanFee = amount * BigInt(Math.floor(lendingProtocol.borrowFee! * 10000)) / 10000n;
                    const totalReturn = secondSwapReturn;
                    const totalFees = firstSwapFee + secondSwapFee + flashLoanFee;

                    if (totalReturn > amount + totalFees) {
                        opportunities.push({
                            steps: [
                                {
                                    protocol: lendingProtocol,
                                    action: 'flash-loan',
                                    tokenIn: token,
                                    tokenOut: token,
                                    expectedReturn: amount,
                                    fee: flashLoanFee
                                },
                                {
                                    protocol: dexA,
                                    action: 'swap',
                                    tokenIn: token,
                                    tokenOut: intermediateToken,
                                    expectedReturn: firstSwapReturn,
                                    fee: firstSwapFee
                                },
                                {
                                    protocol: dexB,
                                    action: 'swap',
                                    tokenIn: intermediateToken,
                                    tokenOut: token,
                                    expectedReturn: secondSwapReturn,
                                    fee: secondSwapFee
                                }
                            ],
                            totalReturn,
                            totalFees,
                            risk: this.calculateOpportunityRisk(totalReturn, amount, [dexA, dexB]),
                            confidence: this.calculateOpportunityConfidence([dexA, dexB])
                        });
                    }
                }
            }
        }

        return opportunities;
    }

    private async findLeveragedOpportunities(
        lendingProtocol: ProtocolConfig,
        token: string,
        amount: bigint,
        dexes: ProtocolConfig[]
    ): Promise<{
        steps: {
            protocol: ProtocolConfig;
            action: string;
            tokenIn: string;
            tokenOut: string;
            expectedReturn: bigint;
            fee: bigint;
        }[];
        totalReturn: bigint;
        totalFees: bigint;
        risk: number;
        confidence: number;
    }[]> {
        const opportunities = [];
        const state = this.protocolStates.get(lendingProtocol.address)
            ?.find(s => s.token === token);

        if (!state || state.utilizationRate > 0.8) return [];

        const maxBorrow = amount * BigInt(Math.floor(lendingProtocol.maxLeverage! * 100)) / 100n;

        for (const dexA of dexes) {
            for (const dexB of dexes) {
                if (dexA === dexB) continue;

                const commonTokens = dexA.supportedTokens.filter(t => 
                    dexB.supportedTokens.includes(t) && t !== token
                );

                for (const intermediateToken of commonTokens) {
                    // Calculate leveraged trade
                    const borrowFee = maxBorrow * BigInt(Math.floor(lendingProtocol.borrowFee! * 10000)) / 10000n;
                    const [firstSwapReturn, firstSwapFee] = await this.estimateSwapReturn(
                        dexA,
                        token,
                        intermediateToken,
                        amount + maxBorrow
                    );

                    if (firstSwapReturn <= amount + maxBorrow) continue;

                    const [secondSwapReturn, secondSwapFee] = await this.estimateSwapReturn(
                        dexB,
                        intermediateToken,
                        token,
                        firstSwapReturn
                    );

                    const totalReturn = secondSwapReturn;
                    const totalFees = firstSwapFee + secondSwapFee + borrowFee;

                    if (totalReturn > amount + maxBorrow + totalFees) {
                        opportunities.push({
                            steps: [
                                {
                                    protocol: lendingProtocol,
                                    action: 'borrow',
                                    tokenIn: token,
                                    tokenOut: token,
                                    expectedReturn: maxBorrow,
                                    fee: borrowFee
                                },
                                {
                                    protocol: dexA,
                                    action: 'swap',
                                    tokenIn: token,
                                    tokenOut: intermediateToken,
                                    expectedReturn: firstSwapReturn,
                                    fee: firstSwapFee
                                },
                                {
                                    protocol: dexB,
                                    action: 'swap',
                                    tokenIn: intermediateToken,
                                    tokenOut: token,
                                    expectedReturn: secondSwapReturn,
                                    fee: secondSwapFee
                                }
                            ],
                            totalReturn,
                            totalFees,
                            risk: this.calculateOpportunityRisk(totalReturn, amount + maxBorrow, [dexA, dexB]) * 1.5, // Higher risk for leverage
                            confidence: this.calculateOpportunityConfidence([dexA, dexB]) * 0.8 // Lower confidence for leverage
                        });
                    }
                }
            }
        }

        return opportunities;
    }

    private async estimateSwapReturn(
        dex: ProtocolConfig,
        tokenIn: string,
        tokenOut: string,
        amount: bigint
    ): Promise<[bigint, bigint]> {
        // Implement actual DEX contract calls here
        // This is a placeholder implementation
        const fee = amount * BigInt(Math.floor(dex.tradeFee! * 10000)) / 10000n;
        const estimatedReturn = amount - fee;
        return [estimatedReturn, fee];
    }

    private calculateOpportunityRisk(
        expectedReturn: bigint,
        invested: bigint,
        protocols: ProtocolConfig[]
    ): number {
        // Base risk on return vs investment ratio
        const returnRatio = Number(expectedReturn * 100n / invested) / 100;
        let risk = Math.min(100, Math.max(0, (returnRatio - 1) * 100));

        // Adjust risk based on protocols involved
        const protocolRisk = protocols.reduce((total, p) => {
            if (p.type === 'lending') return total + 20;  // Lending protocols are riskier
            return total + 10;  // DEXes have base risk
        }, 0) / protocols.length;

        return Math.min(100, (risk + protocolRisk) / 2);
    }

    private calculateOpportunityConfidence(protocols: ProtocolConfig[]): number {
        // Start with base confidence
        let confidence = 100;

        // Reduce confidence based on number of protocols
        confidence -= (protocols.length - 1) * 10;

        // Adjust based on protocol features
        for (const protocol of protocols) {
            if (!protocol.features.includes('flash-swaps')) {
                confidence -= 5;  // Less confident in protocols without atomic swaps
            }
            if (protocol.tradeFee && protocol.tradeFee > 0.001) {
                confidence -= 10;  // Less confident in high-fee protocols
            }
        }

        return Math.max(0, confidence);
    }

    private async evaluateStrategy(
        pair: string,
        strategy: PairStrategy,
        state: StrategyState
    ): Promise<{
        shouldEnter: boolean;
        shouldExit: boolean;
        confidence: number;
        reason: string;
    }> {
        const [tokenA, tokenB] = pair.split('-');
        const now = Date.now();

        switch (strategy.type) {
            case 'mean-reversion': {
                const priceHistory = this.getPriceHistory(tokenA, tokenB, strategy.timeWindow);
                const mean = this.calculateMean(priceHistory);
                const currentPrice = this.getLatestPrice(tokenA) / this.getLatestPrice(tokenB);
                const deviation = Math.abs((currentPrice - mean) / mean) * 100;

                if (!state.active && deviation > strategy.parameters.entryThreshold) {
                    return {
                        shouldEnter: true,
                        shouldExit: false,
                        confidence: Math.min(100, deviation * 20),
                        reason: `Price deviation of ${deviation.toFixed(2)}% from mean`
                    };
                }

                if (state.active && deviation < strategy.parameters.exitThreshold) {
                    return {
                        shouldEnter: false,
                        shouldExit: true,
                        confidence: 80,
                        reason: 'Price returned to mean'
                    };
                }
                break;
            }

            case 'momentum': {
                const priceChanges = this.getPriceChanges(tokenA, tokenB, strategy.timeWindow);
                const momentum = this.calculateMomentum(priceChanges);
                
                if (!state.active && Math.abs(momentum) > strategy.parameters.entryThreshold) {
                    return {
                        shouldEnter: true,
                        shouldExit: false,
                        confidence: Math.min(100, Math.abs(momentum) * 10),
                        reason: `Strong momentum detected: ${momentum.toFixed(2)}%`
                    };
                }

                if (state.active && Math.abs(momentum) < strategy.parameters.exitThreshold) {
                    return {
                        shouldEnter: false,
                        shouldExit: true,
                        confidence: 70,
                        reason: 'Momentum weakened'
                    };
                }
                break;
            }

            case 'liquidity-driven': {
                const liquidityStats = this.getLiquidityStats(tokenA, tokenB);
                const utilizationRate = liquidityStats.utilizationRate;

                if (!state.active && utilizationRate > strategy.parameters.entryThreshold) {
                    return {
                        shouldEnter: true,
                        shouldExit: false,
                        confidence: Math.min(100, utilizationRate * 90),
                        reason: `High liquidity utilization: ${utilizationRate.toFixed(2)}%`
                    };
                }

                if (state.active && utilizationRate < strategy.parameters.exitThreshold) {
                    return {
                        shouldEnter: false,
                        shouldExit: true,
                        confidence: 75,
                        reason: 'Liquidity utilization normalized'
                    };
                }
                break;
            }
        }

        return {
            shouldEnter: false,
            shouldExit: false,
            confidence: 0,
            reason: 'No clear signals'
        };
    }

    private getPriceHistory(tokenA: string, tokenB: string, timeWindow: number): number[] {
        const now = Date.now();
        const historyA = this.priceHistory.get(tokenA) || [];
        const historyB = this.priceHistory.get(tokenB) || [];

        const recentA = historyA.filter(p => p.timestamp > now - timeWindow);
        const recentB = historyB.filter(p => p.timestamp > now - timeWindow);

        // Create price ratios at matching timestamps
        const priceRatios: number[] = [];
        for (const priceA of recentA) {
            const matchingB = recentB.find(b => Math.abs(b.timestamp - priceA.timestamp) < 1000);
            if (matchingB) {
                priceRatios.push(priceA.price / matchingB.price);
            }
        }

        return priceRatios;
    }

    private calculateMean(prices: number[]): number {
        if (prices.length === 0) return 0;
        return prices.reduce((a, b) => a + b) / prices.length;
    }

    private getPriceChanges(tokenA: string, tokenB: string, timeWindow: number): number[] {
        const prices = this.getPriceHistory(tokenA, tokenB, timeWindow);
        return prices.map((price, i) => 
            i === 0 ? 0 : ((price - prices[i-1]) / prices[i-1]) * 100
        );
    }

    private calculateMomentum(priceChanges: number[]): number {
        if (priceChanges.length < 2) return 0;
        
        // Use exponential weighting to give more importance to recent changes
        let momentum = 0;
        let weight = 1;
        let totalWeight = 0;

        for (let i = priceChanges.length - 1; i >= 0; i--) {
            momentum += priceChanges[i] * weight;
            totalWeight += weight;
            weight *= 0.9;  // Decay factor
        }

        return momentum / totalWeight;
    }

    private getLiquidityStats(tokenA: string, tokenB: string): {
        utilizationRate: number;
        depth: bigint;
        volatility: number;
    } {
        const snapshotsA = this.liquiditySnapshots.get(tokenA) || [];
        const snapshotsB = this.liquiditySnapshots.get(tokenB) || [];

        const recentA = snapshotsA[snapshotsA.length - 1];
        const recentB = snapshotsB[snapshotsB.length - 1];

        if (!recentA || !recentB) {
            return {
                utilizationRate: 0,
                depth: 0n,
                volatility: 0
            };
        }

        return {
            utilizationRate: (recentA.slippage + recentB.slippage) / 2,
            depth: (recentA.depth + recentB.depth) / 2n,
            volatility: Math.max(
                this.getPriceVolatility(tokenA),
                this.getPriceVolatility(tokenB)
            )
        };
    }

    private async executeStrategyTrade(
        pair: string,
        strategy: PairStrategy,
        state: StrategyState,
        evaluation: { shouldEnter: boolean; shouldExit: boolean; confidence: number; reason: string }
    ): Promise<void> {
        const [tokenA, tokenB] = pair.split('-');
        
        if (evaluation.shouldEnter && !state.active) {
            // Calculate position size based on confidence and parameters
            const positionSize = this.calculatePositionSize(
                strategy.parameters.maxPositionSize,
                evaluation.confidence,
                this.getLiquidityStats(tokenA, tokenB)
            );

            // Execute entry
            try {
                const entryPrice = this.getLatestPrice(tokenA) / this.getLatestPrice(tokenB);
                await this.executeTrade(tokenA, tokenB, positionSize, 'buy');
                
                // Update state
                state.active = true;
                state.currentPosition = positionSize;
                state.entryPrice = entryPrice;
                state.lastUpdate = Date.now();
                
                console.log(`Entered ${pair} position: ${evaluation.reason}`);
            } catch (error) {
                console.error(`Failed to enter ${pair} position:`, error);
            }
        }
        
        else if (evaluation.shouldExit && state.active) {
            try {
                const exitPrice = this.getLatestPrice(tokenA) / this.getLatestPrice(tokenB);
                await this.executeTrade(tokenA, tokenB, state.currentPosition, 'sell');
                
                // Calculate P&L
                const pnl = ((exitPrice - state.entryPrice) / state.entryPrice) * 100;
                state.profitLoss += pnl;
                state.totalTrades++;
                state.successRate = (state.successRate * (state.totalTrades - 1) + (pnl > 0 ? 100 : 0)) / state.totalTrades;
                
                // Reset state
                state.active = false;
                state.currentPosition = 0n;
                state.lastUpdate = Date.now();
                
                console.log(`Exited ${pair} position: ${evaluation.reason}, PnL: ${pnl.toFixed(2)}%`);
            } catch (error) {
                console.error(`Failed to exit ${pair} position:`, error);
            }
        }
    }

    private calculatePositionSize(
        maxSize: bigint,
        confidence: number,
        liquidityStats: { utilizationRate: number; depth: bigint; volatility: number }
    ): bigint {
        // Start with confidence-based sizing
        let size = (maxSize * BigInt(Math.floor(confidence))) / 100n;
        
        // Adjust for liquidity
        const liquidityFactor = Math.max(0.1, 1 - (liquidityStats.utilizationRate / 100));
        size = (size * BigInt(Math.floor(liquidityFactor * 100))) / 100n;
        
        // Adjust for volatility
        const volatilityFactor = Math.max(0.1, 1 - (liquidityStats.volatility / 100));
        size = (size * BigInt(Math.floor(volatilityFactor * 100))) / 100n;
        
        // Ensure size doesn't exceed 10% of liquidity depth
        const maxByDepth = liquidityStats.depth / 10n;
        return size > maxByDepth ? maxByDepth : size;
    }

    private async executeTrade(
        tokenIn: string,
        tokenOut: string,
        amount: bigint,
        side: 'buy' | 'sell'
    ): Promise<void> {
        // Implement actual trade execution logic here
        // This is a placeholder
        console.log(`Executing ${side} trade: ${amount} ${tokenIn} -> ${tokenOut}`);
    }

    public async getStrategyStats(): Promise<{
        [pair: string]: {
            type: string;
            active: boolean;
            profitLoss: number;
            successRate: number;
            totalTrades: number;
            lastUpdate: number;
        };
    }> {
        const stats: any = {};
        
        for (const [pair, strategy] of this.pairStrategies) {
            const state = this.strategyStates.get(pair);
            if (state) {
                stats[pair] = {
                    type: strategy.type,
                    active: state.active,
                    profitLoss: state.profitLoss,
                    successRate: state.successRate,
                    totalTrades: state.totalTrades,
                    lastUpdate: state.lastUpdate
                };
            }
        }
        
        return stats;
    }

    private async analyzeLiquidityDepth(
        tokenAddress: string,
        amount: bigint
    ): Promise<DepthAnalysis> {
        const history = this.depthHistory.get(tokenAddress) || [];
        const pools = this.poolLiquidity.get(tokenAddress) || [];
        const recentHistory = history.filter(h => h.timestamp > Date.now() - 24 * 60 * 60 * 1000);

        // Calculate current total depth
        const currentDepth = pools.reduce((sum, pool) => sum + pool.liquidity, 0n);

        // Analyze historical depth
        const meanDepth = recentHistory.reduce((sum, h) => sum + h.depth, 0n) / BigInt(recentHistory.length || 1);
        const depthVolatility = this.calculateDepthVolatility(recentHistory);
        const depthTrend = this.analyzeDepthTrend(recentHistory);

        // Calculate fragmentation
        const totalLiquidity = pools.reduce((sum, pool) => sum + pool.liquidity, 0n);
        const largestPool = Math.max(...pools.map(p => Number(p.liquidity * 100n / totalLiquidity)));
        const fragmentationIndex = this.calculateFragmentationIndex(pools);

        // Analyze stability
        const stabilityMetrics = this.analyzeDepthStability(recentHistory);

        // Estimate slippage
        const slippage = this.estimateDepthBasedSlippage(amount, pools, depthVolatility);

        return {
            currentDepth,
            historicalDepth: {
                mean: meanDepth,
                volatility: depthVolatility,
                trend: depthTrend
            },
            fragmentation: {
                index: fragmentationIndex,
                largestPoolShare: largestPool,
                poolCount: pools.length
            },
            stability: stabilityMetrics,
            slippageEstimate: slippage
        };
    }

    private calculateDepthVolatility(history: LiquidityDepthHistory[]): number {
        if (history.length < 2) return 0;
        const depths = history.map(h => Number(h.depth));
        const mean = depths.reduce((a, b) => a + b) / depths.length;
        const variance = depths.reduce((sum, depth) => sum + Math.pow(depth - mean, 2), 0) / depths.length;
        return Math.sqrt(variance) / mean * 100;
    }

    private analyzeDepthTrend(
        history: LiquidityDepthHistory[]
    ): 'increasing' | 'decreasing' | 'stable' {
        if (history.length < 2) return 'stable';
        
        const recentDepths = history.slice(-10);
        const firstAvg = Number(recentDepths.slice(0, 3).reduce((a, b) => a + b.depth, 0n)) / 3;
        const lastAvg = Number(recentDepths.slice(-3).reduce((a, b) => a + b.depth, 0n)) / 3;
        
        const changePercent = ((lastAvg - firstAvg) / firstAvg) * 100;
        
        if (changePercent > 5) return 'increasing';
        if (changePercent < -5) return 'decreasing';
        return 'stable';
    }

    private calculateFragmentationIndex(pools: CrossPoolLiquidity[]): number {
        if (pools.length === 0) return 0;
        if (pools.length === 1) return 100;

        const totalLiquidity = pools.reduce((sum, pool) => sum + pool.liquidity, 0n);
        const shares = pools.map(pool => Number(pool.liquidity * 100n / totalLiquidity));
        
        // Calculate Herfindahl-Hirschman Index (HHI)
        const hhi = shares.reduce((sum, share) => sum + Math.pow(share, 2), 0);
        
        // Convert HHI to fragmentation index (inverse relationship)
        // HHI ranges from 0 (perfect fragmentation) to 10000 (perfect concentration)
        return Math.min(100, Math.max(0, (10000 - hhi) / 100));
    }

    private analyzeDepthStability(history: LiquidityDepthHistory[]): {
        score: number;
        confidenceInterval: number;
        lastVolatilitySpike: number;
    } {
        if (history.length < 2) {
            return { score: 50, confidenceInterval: 50, lastVolatilitySpike: 0 };
        }

        // Calculate stability score based on recent depth changes
        const depthChanges = history.slice(1).map((h, i) => {
            const prevDepth = Number(history[i].depth);
            const currentDepth = Number(h.depth);
            return Math.abs((currentDepth - prevDepth) / prevDepth * 100);
        });

        const averageChange = depthChanges.reduce((a, b) => a + b) / depthChanges.length;
        const maxChange = Math.max(...depthChanges);
        
        // Find last volatility spike
        const lastSpike = history.findIndex(h => h.stability < 50);
        const lastVolatilitySpike = lastSpike >= 0 ? history[lastSpike].timestamp : 0;

        // Calculate confidence interval
        const stdDev = this.calculateStdDev(depthChanges);
        const confidenceInterval = Math.min(100, stdDev * 2);

        // Calculate stability score
        const score = Math.max(0, Math.min(100, 100 - (averageChange * 10) - (maxChange / 2)));

        return {
            score,
            confidenceInterval,
            lastVolatilitySpike
        };
    }

    private estimateDepthBasedSlippage(
        amount: bigint,
        pools: CrossPoolLiquidity[],
        depthVolatility: number
    ): {
        predicted: number;
        worstCase: number;
        confidence: number;
    } {
        if (pools.length === 0) {
            return { predicted: 100, worstCase: 100, confidence: 0 };
        }

        const totalLiquidity = pools.reduce((sum, pool) => sum + pool.liquidity, 0n);
        const utilizationRatio = Number(amount * 10000n / totalLiquidity) / 100;

        // Base slippage calculation
        let predictedSlippage = Math.pow(utilizationRatio, 1.5) / 100;
        
        // Adjust for depth volatility
        predictedSlippage *= (1 + depthVolatility / 100);
        
        // Calculate worst-case scenario
        const worstCase = predictedSlippage * 2;
        
        // Calculate confidence based on pool distribution and volatility
        const confidence = Math.max(0, Math.min(100, 
            100 - (depthVolatility / 2) - (utilizationRatio / 2)
        ));

        return {
            predicted: Math.min(100, predictedSlippage),
            worstCase: Math.min(100, worstCase),
            confidence
        };
    }

    private async trackVolume(
        tokenAddress: string,
        volume: bigint,
        tradeSize: bigint
    ): Promise<void> {
        const history = this.volumeHistory.get(tokenAddress) || [];
        const now = Date.now();

        // Get or create current hour's snapshot
        const currentHourStart = now - (now % 3600000);
        let currentSnapshot = history.find(h => h.timestamp === currentHourStart);

        if (!currentSnapshot) {
            currentSnapshot = {
                timestamp: currentHourStart,
                volume: 0n,
                tradeCount: 0,
                averageTradeSize: 0n,
                largestTrade: 0n
            };
            history.push(currentSnapshot);
        }

        // Update snapshot
        currentSnapshot.volume += volume;
        currentSnapshot.tradeCount++;
        currentSnapshot.averageTradeSize = currentSnapshot.volume / BigInt(currentSnapshot.tradeCount);
        currentSnapshot.largestTrade = tradeSize > currentSnapshot.largestTrade ? 
            tradeSize : currentSnapshot.largestTrade;

        // Keep only last 30 days of history
        const thirtyDaysAgo = now - 30 * 24 * 3600000;
        const filteredHistory = history.filter(h => h.timestamp > thirtyDaysAgo)
            .sort((a, b) => a.timestamp - b.timestamp);

        this.volumeHistory.set(tokenAddress, filteredHistory);
    }

    private async analyzeVolume(tokenAddress: string): Promise<VolumeAnalysis> {
        const history = this.volumeHistory.get(tokenAddress) || [];
        const now = Date.now();

        // Calculate current volumes
        const hourlyVolume = this.calculateTimeWindowVolume(history, now - 3600000, now);
        const dailyVolume = this.calculateTimeWindowVolume(history, now - 86400000, now);
        const weeklyVolume = this.calculateTimeWindowVolume(history, now - 7 * 86400000, now);

        // Calculate historical averages
        const historicalHourly = this.calculateAverageVolume(history, 3600000);
        const historicalDaily = this.calculateAverageVolume(history, 86400000);
        const historicalWeekly = this.calculateAverageVolume(history, 7 * 86400000);

        // Analyze volume trend
        const trend = this.analyzeVolumeTrend(history);
        const volatility = this.calculateVolumeVolatility(history);

        // Analyze patterns
        const spikes = this.detectVolumeSpikes(history);
        const consistency = this.calculateVolumeConsistency(history);
        const distribution = this.analyzeTradeDistribution(history);

        return {
            current: {
                hourly: hourlyVolume,
                daily: dailyVolume,
                weekly: weeklyVolume
            },
            historical: {
                average: {
                    hourly: historicalHourly,
                    daily: historicalDaily,
                    weekly: historicalWeekly
                },
                trend,
                volatility
            },
            patterns: {
                spikes,
                consistency,
                distribution
            }
        };
    }

    private calculateTimeWindowVolume(
        history: VolumeSnapshot[],
        start: number,
        end: number
    ): bigint {
        return history
            .filter(h => h.timestamp >= start && h.timestamp <= end)
            .reduce((sum, h) => sum + h.volume, 0n);
    }

    private calculateAverageVolume(
        history: VolumeSnapshot[],
        windowSize: number
    ): bigint {
        const windows = Math.floor(history.length * 3600000 / windowSize);
        if (windows === 0) return 0n;

        const totalVolume = history.reduce((sum, h) => sum + h.volume, 0n);
        return totalVolume / BigInt(windows);
    }

    private analyzeVolumeTrend(
        history: VolumeSnapshot[]
    ): 'increasing' | 'decreasing' | 'stable' {
        if (history.length < 24) return 'stable';  // Need at least 24 hours of data

        const recentVolume = this.calculateTimeWindowVolume(
            history,
            Date.now() - 24 * 3600000,
            Date.now()
        );

        const previousVolume = this.calculateTimeWindowVolume(
            history,
            Date.now() - 48 * 3600000,
            Date.now() - 24 * 3600000
        );

        if (previousVolume === 0n) return 'stable';

        const change = Number((recentVolume - previousVolume) * 100n / previousVolume);
        
        if (change > 20) return 'increasing';
        if (change < -20) return 'decreasing';
        return 'stable';
    }

    private calculateVolumeVolatility(history: VolumeSnapshot[]): number {
        if (history.length < 24) return 0;  // Need at least 24 hours of data

        const volumes = history.map(h => Number(h.volume));
        const mean = volumes.reduce((a, b) => a + b) / volumes.length;
        const variance = volumes.reduce((sum, vol) => 
            sum + Math.pow(vol - mean, 2), 0
        ) / volumes.length;

        return Math.sqrt(variance) / mean * 100;
    }

    private detectVolumeSpikes(history: VolumeSnapshot[]): number {
        if (history.length < 24) return 0;

        const recentHistory = history.slice(-24);  // Last 24 hours
        const volumes = recentHistory.map(h => Number(h.volume));
        const mean = volumes.reduce((a, b) => a + b) / volumes.length;
        const stdDev = Math.sqrt(
            volumes.reduce((sum, vol) => sum + Math.pow(vol - mean, 2), 0) / volumes.length
        );

        return volumes.filter(vol => vol > mean + 2 * stdDev).length;
    }

    private calculateVolumeConsistency(history: VolumeSnapshot[]): number {
        if (history.length < 24) return 50;  // Default score for insufficient data

        const volumes = history.slice(-24).map(h => Number(h.volume));
        const mean = volumes.reduce((a, b) => a + b) / volumes.length;
        const deviations = volumes.map(vol => Math.abs(vol - mean) / mean);
        const averageDeviation = deviations.reduce((a, b) => a + b) / deviations.length;

        return Math.max(0, Math.min(100, 100 - (averageDeviation * 100)));
    }

    private analyzeTradeDistribution(history: VolumeSnapshot[]): {
        largeTradesPercent: number;
        mediumTradesPercent: number;
        smallTradesPercent: number;
    } {
        if (history.length === 0) {
            return {
                largeTradesPercent: 0,
                mediumTradesPercent: 0,
                smallTradesPercent: 0
            };
        }

        const totalTrades = history.reduce((sum, h) => sum + h.tradeCount, 0);
        if (totalTrades === 0) {
            return {
                largeTradesPercent: 0,
                mediumTradesPercent: 0,
                smallTradesPercent: 0
            };
        }

        const averageSize = history.reduce((sum, h) => sum + h.averageTradeSize, 0n) / BigInt(history.length);
        
        let largeTrades = 0;
        let mediumTrades = 0;
        let smallTrades = 0;

        history.forEach(snapshot => {
            const largeThreshold = averageSize * 2n;
            const smallThreshold = averageSize / 2n;

            if (snapshot.averageTradeSize >= largeThreshold) {
                largeTrades += snapshot.tradeCount;
            } else if (snapshot.averageTradeSize <= smallThreshold) {
                smallTrades += snapshot.tradeCount;
            } else {
                mediumTrades += snapshot.tradeCount;
            }
        });

        return {
            largeTradesPercent: (largeTrades * 100) / totalTrades,
            mediumTradesPercent: (mediumTrades * 100) / totalTrades,
            smallTradesPercent: (smallTrades * 100) / totalTrades
        };
    }

    private updatePerformanceMetrics(): PerformanceMetrics {
        const now = Date.now();
        const trades = this.tradeHistory;
        
        // Calculate overall metrics
        const totalTrades = trades.length;
        const successfulTrades = trades.filter(t => t.profit > 0);
        const successRate = (successfulTrades.length / totalTrades) * 100;
        const totalProfit = trades.reduce((sum, t) => sum + t.profit, 0);
        const averageProfit = totalProfit / totalTrades;
        
        // Calculate Sharpe Ratio
        const returns = trades.map(t => t.profit);
        const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;
        const stdDev = Math.sqrt(
            returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length
        );
        const sharpeRatio = stdDev === 0 ? 0 : avgReturn / stdDev;
        
        // Calculate Maximum Drawdown
        let maxDrawdown = 0;
        let peak = 0;
        let cumulativeProfit = 0;
        trades.forEach(trade => {
            cumulativeProfit += trade.profit;
            if (cumulativeProfit > peak) {
                peak = cumulativeProfit;
            }
            const drawdown = (peak - cumulativeProfit) / peak * 100;
            maxDrawdown = Math.max(maxDrawdown, drawdown);
        });

        // Calculate Win/Loss Ratio
        const averageWin = successfulTrades.reduce((sum, t) => sum + t.profit, 0) / successfulTrades.length;
        const averageLoss = Math.abs(
            trades.filter(t => t.profit < 0)
                .reduce((sum, t) => sum + t.profit, 0) / 
            (totalTrades - successfulTrades.length)
        );
        const winLossRatio = averageLoss === 0 ? 0 : averageWin / averageLoss;

        // Calculate timeframe metrics
        const hourlyTrades = trades.filter(t => t.timestamp > now - 3600000);
        const dailyTrades = trades.filter(t => t.timestamp > now - 86400000);
        const weeklyTrades = trades.filter(t => t.timestamp > now - 604800000);

        // Calculate per-token metrics
        const byToken: { [token: string]: any } = {};
        trades.forEach(trade => {
            [trade.tokenIn, trade.tokenOut].forEach(token => {
                if (!byToken[token]) {
                    byToken[token] = {
                        trades: 0,
                        profit: 0,
                        successfulTrades: 0,
                        bestTrade: -Infinity,
                        worstTrade: Infinity
                    };
                }
                byToken[token].trades++;
                byToken[token].profit += trade.profit;
                if (trade.profit > 0) byToken[token].successfulTrades++;
                byToken[token].bestTrade = Math.max(byToken[token].bestTrade, trade.profit);
                byToken[token].worstTrade = Math.min(byToken[token].worstTrade, trade.profit);
            });
        });

        // Calculate per-strategy metrics
        const byStrategy: { [strategy: string]: any } = {};
        trades.forEach(trade => {
            if (!byStrategy[trade.strategy]) {
                byStrategy[trade.strategy] = {
                    trades: 0,
                    profit: 0,
                    successfulTrades: 0,
                    returns: []
                };
            }
            byStrategy[trade.strategy].trades++;
            byStrategy[trade.strategy].profit += trade.profit;
            if (trade.profit > 0) byStrategy[trade.strategy].successfulTrades++;
            byStrategy[trade.strategy].returns.push(trade.profit);
        });

        // Calculate risk-adjusted returns for each strategy
        Object.keys(byStrategy).forEach(strategy => {
            const strategyReturns = byStrategy[strategy].returns;
            const avgReturn = strategyReturns.reduce((a: number, b: number) => a + b, 0) / strategyReturns.length;
            const stdDev = Math.sqrt(
                strategyReturns.reduce((sum: number, r: number) => sum + Math.pow(r - avgReturn, 2), 0) / 
                strategyReturns.length
            );
            byStrategy[strategy].riskAdjustedReturn = stdDev === 0 ? 0 : avgReturn / stdDev;
        });

        return {
            overall: {
                successRate,
                totalTrades,
                totalProfit,
                averageProfit,
                sharpeRatio,
                maxDrawdown,
                winLossRatio
            },
            timeFrames: {
                hourly: this.calculateTimeFrameMetrics(hourlyTrades),
                daily: this.calculateTimeFrameMetrics(dailyTrades),
                weekly: this.calculateTimeFrameMetrics(weeklyTrades)
            },
            byToken: Object.fromEntries(
                Object.entries(byToken).map(([token, data]) => [
                    token,
                    {
                        trades: data.trades,
                        profit: data.profit,
                        successRate: (data.successfulTrades / data.trades) * 100,
                        averageProfit: data.profit / data.trades,
                        bestTrade: data.bestTrade,
                        worstTrade: data.worstTrade
                    }
                ])
            ),
            byStrategy: Object.fromEntries(
                Object.entries(byStrategy).map(([strategy, data]) => [
                    strategy,
                    {
                        trades: data.trades,
                        profit: data.profit,
                        successRate: (data.successfulTrades / data.trades) * 100,
                        averageProfit: data.profit / data.trades,
                        riskAdjustedReturn: data.riskAdjustedReturn
                    }
                ])
            )
        };
    }

    private calculateTimeFrameMetrics(trades: TradeRecord[]): {
        trades: number;
        profit: number;
        successRate: number;
    } {
        const totalTrades = trades.length;
        if (totalTrades === 0) {
            return { trades: 0, profit: 0, successRate: 0 };
        }

        const successfulTrades = trades.filter(t => t.profit > 0).length;
        const totalProfit = trades.reduce((sum, t) => sum + t.profit, 0);

        return {
            trades: totalTrades,
            profit: totalProfit,
            successRate: (successfulTrades / totalTrades) * 100
        };
    }

    private recordTrade(trade: TradeRecord): void {
        this.tradeHistory.push(trade);
        
        // Keep only last 10000 trades
        if (this.tradeHistory.length > 10000) {
            this.tradeHistory.shift();
        }
    }

    public getPerformanceAnalytics(timeWindow?: number): PerformanceMetrics {
        const now = Date.now();
        
        // Update metrics if enough time has passed
        if (now - this.lastPerformanceUpdate > this.PERFORMANCE_UPDATE_INTERVAL) {
            const metrics = this.updatePerformanceMetrics();
            this.lastPerformanceUpdate = now;
            return metrics;
        }

        // If timeWindow is specified, filter trades
        if (timeWindow) {
            const filteredHistory = this.tradeHistory.filter(t => 
                t.timestamp > now - timeWindow
            );
            return this.calculateMetricsForTrades(filteredHistory);
        }

        return this.updatePerformanceMetrics();
    }

    private calculateMetricsForTrades(trades: TradeRecord[]): PerformanceMetrics {
        // Reuse updatePerformanceMetrics logic with filtered trades
        const originalHistory = this.tradeHistory;
        this.tradeHistory = trades;
        const metrics = this.updatePerformanceMetrics();
        this.tradeHistory = originalHistory;
        return metrics;
    }

    private async detectMEVAttack(
        transactions: TransactionWithTo[],
        tokenIn: string,
        tokenOut: string
    ): Promise<{
        isAttack: boolean;
        type: string;
        confidence: number;
        details: string;
    }> {
        // Check for sandwich attack patterns
        if (this.detectSophisticatedSandwich(transactions)) {
            return {
                isAttack: true,
                type: 'sandwich',
                confidence: 90,
                details: 'Detected sophisticated sandwich attack pattern'
            };
        }

        // Check for frontrunning
        const frontrunCheck = this.detectAdvancedFrontrunning(transactions);
        if (frontrunCheck.detected) {
            return {
                isAttack: true,
                type: 'frontrun',
                confidence: frontrunCheck.confidence,
                details: frontrunCheck.details
            };
        }

        // Check for backrunning
        const backrunCheck = this.detectBackrunning(transactions);
        if (backrunCheck.detected) {
            return {
                isAttack: true,
                type: 'backrun',
                confidence: backrunCheck.confidence,
                details: backrunCheck.details
            };
        }

        // Check for timing attacks
        const timingCheck = this.detectTimingAttack(transactions);
        if (timingCheck.detected) {
            return {
                isAttack: true,
                type: 'timing',
                confidence: timingCheck.confidence,
                details: timingCheck.details
            };
        }

        return {
            isAttack: false,
            type: 'none',
            confidence: 0,
            details: 'No MEV attack detected'
        };
    }

    private detectAdvancedFrontrunning(
        transactions: TransactionWithTo[]
    ): { detected: boolean; confidence: number; details: string } {
        if (transactions.length < 2) {
            return { detected: false, confidence: 0, details: '' };
        }

        const patterns = this.MEV_PATTERNS.FRONTRUN.suspiciousPatterns;
        let patternMatches = 0;
        let totalConfidence = 0;

        // Check for high-low pattern
        if (patterns.includes('high-low')) {
            const gasPattern = this.checkGasPattern(transactions);
            if (gasPattern.matches) {
                patternMatches++;
                totalConfidence += gasPattern.confidence;
            }
        }

        // Check for sudden spikes
        if (patterns.includes('sudden-spike')) {
            const spikeCheck = this.checkForSuddenSpikes(transactions);
            if (spikeCheck.detected) {
                patternMatches++;
                totalConfidence += spikeCheck.confidence;
            }
        }

        // Check for repeated addresses
        if (patterns.includes('repeated-address')) {
            const addressCheck = this.checkRepeatedAddresses(transactions);
            if (addressCheck.detected) {
                patternMatches++;
                totalConfidence += addressCheck.confidence;
            }
        }

        const averageConfidence = patternMatches > 0 ? totalConfidence / patternMatches : 0;
        return {
            detected: patternMatches >= 2,
            confidence: averageConfidence,
            details: `Matched ${patternMatches} frontrunning patterns`
        };
    }

    private checkGasPattern(
        transactions: TransactionWithTo[]
    ): { matches: boolean; confidence: number } {
        const gasPrices = transactions.map(tx => Number(tx.gasPrice || 0));
        const maxGas = Math.max(...gasPrices);
        const baseGas = gasPrices[0];

        if (maxGas > baseGas * this.MEV_PATTERNS.FRONTRUN.minGasIncrease) {
            const increase = (maxGas - baseGas) / baseGas;
            const confidence = Math.min(100, increase * 50);
            return { matches: true, confidence };
        }

        return { matches: false, confidence: 0 };
    }

    private checkForSuddenSpikes(
        transactions: TransactionWithTo[]
    ): { detected: boolean; confidence: number } {
        const gasPrices = transactions.map(tx => Number(tx.gasPrice || 0));
        const avgGas = gasPrices.reduce((a, b) => a + b, 0) / gasPrices.length;
        const spikes = gasPrices.filter(gas => gas > avgGas * 2);

        return {
            detected: spikes.length > 0,
            confidence: Math.min(100, (spikes.length / gasPrices.length) * 100)
        };
    }

    private checkRepeatedAddresses(
        transactions: TransactionWithTo[]
    ): { detected: boolean; confidence: number } {
        const addressCounts = new Map<string, number>();
        
        transactions.forEach(tx => {
            if (tx.from) {
                const count = addressCounts.get(tx.from) || 0;
                addressCounts.set(tx.from, count + 1);
            }
        });

        const maxRepeats = Math.max(...Array.from(addressCounts.values()));
        return {
            detected: maxRepeats > 1,
            confidence: Math.min(100, maxRepeats * 25)
        };
    }

    private detectBackrunning(
        transactions: TransactionWithTo[]
    ): { detected: boolean; confidence: number; details: string } {
        if (transactions.length < 2) {
            return { detected: false, confidence: 0, details: '' };
        }

        const patterns = this.MEV_PATTERNS.BACKRUN.suspiciousPatterns;
        let patternMatches = 0;
        let totalConfidence = 0;

        // Check for delayed high gas transactions
        if (patterns.includes('delayed-high-gas')) {
            const delayedCheck = this.checkDelayedHighGas(transactions);
            if (delayedCheck.detected) {
                patternMatches++;
                totalConfidence += delayedCheck.confidence;
            }
        }

        // Check for mempool camping
        if (patterns.includes('mempool-camping')) {
            const campingCheck = this.checkMempoolCamping(transactions);
            if (campingCheck.detected) {
                patternMatches++;
                totalConfidence += campingCheck.confidence;
            }
        }

        const averageConfidence = patternMatches > 0 ? totalConfidence / patternMatches : 0;
        return {
            detected: patternMatches > 0,
            confidence: averageConfidence,
            details: `Matched ${patternMatches} backrunning patterns`
        };
    }

    private checkDelayedHighGas(
        transactions: TransactionWithTo[]
    ): { detected: boolean; confidence: number } {
        const gasPrices = transactions.map(tx => Number(tx.gasPrice || 0));
        const lastGas = gasPrices[gasPrices.length - 1];
        const avgGas = gasPrices.reduce((a, b) => a + b, 0) / gasPrices.length;

        return {
            detected: lastGas > avgGas * this.MEV_PATTERNS.BACKRUN.minGasIncrease,
            confidence: Math.min(100, ((lastGas / avgGas) - 1) * 50)
        };
    }

    private checkMempoolCamping(
        transactions: TransactionWithTo[]
    ): { detected: boolean; confidence: number } {
        // Look for transactions that wait in mempool and suddenly get included
        const timestamps = transactions.map(tx => tx.blockTimestamp || 0);
        const delays = timestamps.slice(1).map((t, i) => t - timestamps[i]);
        const suspiciousDelays = delays.filter(d => d > this.MEV_PATTERNS.BACKRUN.maxDelay);

        return {
            detected: suspiciousDelays.length > 0,
            confidence: Math.min(100, (suspiciousDelays.length / delays.length) * 100)
        };
    }

    private detectTimingAttack(
        transactions: TransactionWithTo[]
    ): { detected: boolean; confidence: number; details: string } {
        const patterns = this.MEV_PATTERNS.TIMING.suspiciousPatterns;
        let patternMatches = 0;
        let totalConfidence = 0;

        // Check for repeated failures
        if (patterns.includes('repeated-failures')) {
            const failureCheck = this.checkRepeatedFailures(transactions);
            if (failureCheck.detected) {
                patternMatches++;
                totalConfidence += failureCheck.confidence;
            }
        }

        // Check for time correlation
        if (patterns.includes('time-correlation')) {
            const correlationCheck = this.checkTimeCorrelation(transactions);
            if (correlationCheck.detected) {
                patternMatches++;
                totalConfidence += correlationCheck.confidence;
            }
        }

        const averageConfidence = patternMatches > 0 ? totalConfidence / patternMatches : 0;
        return {
            detected: patternMatches > 0,
            confidence: averageConfidence,
            details: `Matched ${patternMatches} timing attack patterns`
        };
    }

    private checkRepeatedFailures(
        transactions: TransactionWithTo[]
    ): { detected: boolean; confidence: number } {
        // Count transactions from same addresses that fail repeatedly
        const failedTxs = new Map<string, number>();
        
        transactions.forEach(tx => {
            if (tx.from) {
                const count = failedTxs.get(tx.from) || 0;
                failedTxs.set(tx.from, count + 1);
            }
        });

        const maxFailures = Math.max(...Array.from(failedTxs.values()));
        return {
            detected: maxFailures >= this.MEV_PATTERNS.TIMING.maxRepeatCount,
            confidence: Math.min(100, maxFailures * 20)
        };
    }

    private checkTimeCorrelation(
        transactions: TransactionWithTo[]
    ): { detected: boolean; confidence: number } {
        const timestamps = transactions.map(tx => tx.blockTimestamp || 0);
        const intervals = timestamps.slice(1).map((t, i) => t - timestamps[i]);
        
        // Look for regular patterns in timing
        const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
        const regularPatterns = intervals.filter(i => Math.abs(i - avgInterval) < avgInterval * 0.1);

        return {
            detected: regularPatterns.length > intervals.length * 0.5,
            confidence: (regularPatterns.length / intervals.length) * 100
        };
    }

    private async calculateMEVProtection(
        tokenIn: string,
        tokenOut: string,
        amount: bigint
    ): Promise<{
        gasPrice: bigint;
        maxSlippage: number;
        waitBlocks: number;
        shouldAbort: boolean;
    }> {
        // Get current mempool state
        const provider = new ethers.JsonRpcProvider();
        const pendingBlock = await provider.getBlock('pending', true);
        if (!pendingBlock?.transactions) {
            return this.getDefaultProtection();
        }

        // Analyze MEV risk
        const relevantTxs = this.filterAndCastTransactions(pendingBlock.transactions);
        const mevAttack = await this.detectMEVAttack(relevantTxs, tokenIn, tokenOut);

        // Calculate gas price protection
        const baseGas = await this.provider.getFeeData();
        if (!baseGas.gasPrice) return this.getDefaultProtection();

        let protectedGasPrice = baseGas.gasPrice;
        let maxSlippage = this.MEV_PROTECTION.SLIPPAGE.baseSlippage;
        let waitBlocks = 0;

        // Get pair-specific optimal gas price
        const pairKey = `${tokenIn}-${tokenOut}`;
        protectedGasPrice = this.pairGasOptimizer.getOptimalGasPrice(pairKey, protectedGasPrice);

        if (mevAttack.isAttack) {
            // Increase protection based on attack type and confidence
            const riskMultiplier = mevAttack.confidence / 100;

            // Adjust gas price with both MEV and pair-specific optimization
            protectedGasPrice = protectedGasPrice * 
                BigInt(Math.floor(this.MEV_PROTECTION.GAS.priorityMultiplier * 100 * (1 + riskMultiplier))) / 100n;

            // Adjust slippage
            maxSlippage = Math.min(
                this.MEV_PROTECTION.SLIPPAGE.maxDynamic,
                this.MEV_PROTECTION.SLIPPAGE.baseSlippage * (1 + riskMultiplier * this.MEV_PROTECTION.SLIPPAGE.impactMultiplier)
            );

            // Adjust timing
            waitBlocks = Math.min(
                this.MEV_PROTECTION.TIMING.maxBlockDelay,
                Math.ceil(riskMultiplier * this.MEV_PROTECTION.TIMING.maxBlockDelay)
            );

            // Check if we should abort
            const shouldAbort = mevAttack.confidence > 90 || 
                              mevAttack.type === 'sandwich' && amount > ethers.parseEther('10');

            return {
                gasPrice: protectedGasPrice,
                maxSlippage,
                waitBlocks,
                shouldAbort
            };
        }

        return {
            gasPrice: protectedGasPrice,
            maxSlippage: this.MEV_PROTECTION.SLIPPAGE.baseSlippage,
            waitBlocks: 0,
            shouldAbort: false
        };
    }

    private getDefaultProtection(): {
        gasPrice: bigint;
        maxSlippage: number;
        waitBlocks: number;
        shouldAbort: boolean;
    } {
        return {
            gasPrice: BigInt(Math.floor(this.MEV_PROTECTION.GAS.minPriority * 1e9)),
            maxSlippage: this.MEV_PROTECTION.SLIPPAGE.baseSlippage,
            waitBlocks: 0,
            shouldAbort: false
        };
    }

    private async applyMEVProtection(
        transaction: ethers.TransactionRequest,
        protection: {
            gasPrice: bigint;
            maxSlippage: number;
            waitBlocks: number;
            shouldAbort: boolean;
        }
    ): Promise<ethers.TransactionRequest> {
        if (protection.shouldAbort) {
            throw new Error('Transaction aborted due to high MEV risk');
        }

        // Apply gas price protection
        transaction.gasPrice = protection.gasPrice;

        // Apply slippage protection if the transaction includes swap data
        if (transaction.data && transaction.data.toString().includes('swap')) {
            transaction.data = this.updateSlippageInCalldata(
                transaction.data.toString(),
                protection.maxSlippage
            );
        }

        // Wait for specified number of blocks if needed
        if (protection.waitBlocks > 0) {
            const currentBlock = await this.provider.getBlockNumber();
            const targetBlock = currentBlock + protection.waitBlocks;
            
            while (await this.provider.getBlockNumber() < targetBlock) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }

        return transaction;
    }

    private updateSlippageInCalldata(
        data: string,
        maxSlippage: number
    ): string {
        // This is a placeholder - implement actual calldata modification based on your DEX's ABI
        // You would need to decode the calldata, update the slippage parameter, and re-encode
        return data;
    }

    private async executeProtectedTransaction(
        transaction: ethers.TransactionRequest,
        tokenIn: string,
        tokenOut: string,
        amount: bigint
    ): Promise<ethers.TransactionReceipt | null> {
        // Get current block's base fee
        const currentBlock = await this.provider.getBlock('latest');
        const baseFee = currentBlock?.baseFeePerGas || 0n;

        // Calculate MEV protection parameters
        const protection = await this.calculateMEVProtection(tokenIn, tokenOut, amount);

        // Apply protection measures to the transaction
        const protectedTx = await this.applyMEVProtection(transaction, protection);

        try {
            const tx = await this.signer.sendTransaction(protectedTx);
            const receipt = await tx.wait();
            
            if (receipt) {
                this.updateGasStats(
                    tokenIn,
                    tokenOut,
                    receipt.gasUsed,
                    BigInt(receipt.gasPrice || 0),
                    true,
                    baseFee
                );
            }
            
            return receipt;
        } catch (error) {
            this.updateGasStats(
                tokenIn,
                tokenOut,
                0n, // We don't know gas used for failed tx
                BigInt(transaction.gasPrice || 0),
                false,
                baseFee
            );
            throw error;
        }
    }

    private retryCount: number = 0;

    private isMEVRelatedError(error: any): boolean {
        const errorMessage = error.message?.toLowerCase() || '';
        return errorMessage.includes('revert') || 
               errorMessage.includes('insufficient output amount') ||
               errorMessage.includes('price impact too high') ||
               errorMessage.includes('k value') ||
               errorMessage.includes('slippage');
    }

    // Update the swap execution method to use dynamic sizing
    private async _swapOnDEX(
        dex: ProtocolConfig,
        tokenIn: string,
        tokenOut: string,
        amount: bigint
    ): Promise<bigint> {
        // Calculate optimal trade size
        const sizeAdjustment = await this.calculateOptimalTradeSize(tokenIn, tokenOut, amount);
        
        // Log adjustment if significant
        if (sizeAdjustment.optimalSize !== amount) {
            console.log(`Trade size adjusted: ${sizeAdjustment.adjustmentReason}`);
            console.log(`Original: ${amount}, Adjusted: ${sizeAdjustment.optimalSize}`);
        }

        // Use adjusted amount for the swap
        const adjustedAmount = sizeAdjustment.optimalSize;
        
        // Prepare the swap transaction
        const swapTx = await this.prepareSwapTransaction(dex, tokenIn, tokenOut, adjustedAmount);
        
        // Execute with MEV protection
        const response = await this.executeProtectedTransaction(
            swapTx,
            tokenIn,
            tokenOut
        );

        // Reset retry count after successful execution
        this.retryCount = 0;

        // Get and verify the output amount
        const receipt = await response.wait();
        if (!receipt) {
            throw new Error('Transaction receipt not found');
        }
        
        const outputAmount = this.getOutputAmountFromReceipt(receipt);
        
        // Verify the output meets our requirements
        this.verifyTradeOutput(outputAmount, adjustedAmount, tokenIn, tokenOut);
        
        return outputAmount;
    }

    private async prepareSwapTransaction(
        dex: ProtocolConfig,
        tokenIn: string,
        tokenOut: string,
        amount: bigint
    ): Promise<ethers.TransactionRequest> {
        // This is a placeholder - implement actual swap transaction preparation
        // based on your DEX's interface
        return {
            to: dex.address,
            value: 0n,
            data: '0x', // Actual swap calldata would go here
            gasLimit: 300000n
        };
    }

    private getOutputAmountFromReceipt(
        receipt: ethers.TransactionReceipt
    ): bigint {
        // This is a placeholder - implement actual output amount extraction
        // from transaction receipt based on your DEX's events
        return 0n;
    }

    private verifyTradeOutput(
        outputAmount: bigint,
        inputAmount: bigint,
        tokenIn: string,
        tokenOut: string
    ): void {
        // Verify the trade output meets our requirements
        const expectedPrice = this.getExpectedPrice(tokenIn, tokenOut);
        const actualPrice = Number(outputAmount * ethers.parseEther('1') / inputAmount);
        const priceDeviation = Math.abs(actualPrice - expectedPrice) / expectedPrice;

        if (priceDeviation > this.MEV_PROTECTION.SLIPPAGE.maxDynamic / 10000) {
            throw new Error('Trade output verification failed: Price deviation too high');
        }
    }

    private getExpectedPrice(tokenIn: string, tokenOut: string): number {
        // This is a placeholder - implement actual price fetching logic
        return 0;
    }

    private async calculateOptimalTradeSize(
        tokenIn: string,
        tokenOut: string,
        baseAmount: bigint
    ): Promise<{
        optimalSize: bigint;
        maxSize: bigint;
        confidence: number;
        adjustmentReason: string;
    }> {
        // Get comprehensive liquidity analysis
        const depthAnalysis = await this.analyzeLiquidityDepth(tokenIn, baseAmount);
        const volumeAnalysis = await this.analyzeVolume(tokenIn);
        
        // Calculate size constraints based on liquidity depth
        const maxByDepth = depthAnalysis.currentDepth * 
            BigInt(Math.floor(this.TRADE_SIZE_LIMITS.MAX_LIQUIDITY_RATIO * 100)) / 100n;
        
        // Adjust based on volume metrics
        const volumeAdjustment = this.calculateVolumeBasedAdjustment(volumeAnalysis);
        
        // Adjust for volatility
        const volatilityAdjustment = this.calculateVolatilityAdjustment(tokenIn);
        
        // Combine all factors
        const combinedMultiplier = (
            volumeAdjustment * this.TRADE_SIZE_LIMITS.VOLUME_WEIGHT +
            (depthAnalysis.stability.score / 100) * this.TRADE_SIZE_LIMITS.DEPTH_WEIGHT +
            volatilityAdjustment * this.TRADE_SIZE_LIMITS.VOLATILITY_WEIGHT
        );

        // Calculate optimal size
        const optimalSize = (maxByDepth * BigInt(Math.floor(combinedMultiplier * 100))) / 100n;
        
        // Apply safety multiplier
        const safeSize = (optimalSize * BigInt(Math.floor(this.TRADE_SIZE_LIMITS.SAFETY_MULTIPLIER * 100))) / 100n;
        
        // Calculate confidence score
        const confidence = Math.min(100, Math.floor(combinedMultiplier * 100));
        
        // Determine adjustment reason
        const reason = this.determineAdjustmentReason(
            baseAmount,
            safeSize,
            depthAnalysis,
            volumeAnalysis,
            volatilityAdjustment
        );

        return {
            optimalSize: safeSize,
            maxSize: maxByDepth,
            confidence,
            adjustmentReason: reason
        };
    }

    private calculateVolumeBasedAdjustment(volumeAnalysis: VolumeAnalysis): number {
        // Start with base multiplier
        let multiplier = 1.0;

        // Adjust based on volume consistency
        multiplier *= volumeAnalysis.patterns.consistency / 100;

        // Adjust based on trade size distribution
        if (volumeAnalysis.patterns.distribution.largeTradesPercent > 30) {
            multiplier *= 0.8; // Reduce size if too many large trades
        }

        // Adjust based on recent volume trend
        if (volumeAnalysis.historical.trend === 'decreasing') {
            multiplier *= 0.7;
        } else if (volumeAnalysis.historical.trend === 'increasing') {
            multiplier *= 0.9;
        }

        // Cap the adjustment
        return Math.max(0.1, Math.min(1.0, multiplier));
    }

    private calculateVolatilityAdjustment(tokenAddress: string): number {
        const volatility = this.getPriceVolatility(tokenAddress);
        
        // Higher volatility = lower size
        if (volatility > 50) {
            return 0.3;  // Significant reduction for high volatility
        } else if (volatility > 30) {
            return 0.5;  // Moderate reduction
        } else if (volatility > 15) {
            return 0.7;  // Slight reduction
        }
        
        return 1.0;  // No reduction for low volatility
    }

    private determineAdjustmentReason(
        baseAmount: bigint,
        adjustedAmount: bigint,
        depthAnalysis: DepthAnalysis,
        volumeAnalysis: VolumeAnalysis,
        volatilityAdjustment: number
    ): string {
        const reasons: string[] = [];

        if (adjustedAmount < baseAmount) {
            if (depthAnalysis.stability.score < 70) {
                reasons.push('Low liquidity stability');
            }
            if (volumeAnalysis.patterns.consistency < 70) {
                reasons.push('Inconsistent volume patterns');
            }
            if (volatilityAdjustment < 0.7) {
                reasons.push('High price volatility');
            }
        }

        if (reasons.length === 0) {
            return 'Optimal conditions';
        }

        return reasons.join(', ');
    }

    private async calculateLiquidityMetrics(
        tokenIn: string,
        tokenOut: string
    ): Promise<LiquidityMetrics> {
        // Calculate depth score based on liquidity pool reserves
        const depthScore = await this.calculatePoolImpact(tokenIn, tokenOut);
        
        // Calculate volatility score based on recent price movements
        const volatilityScore = await this.calculateDepthVolatility(tokenIn, tokenOut);
        
        // Calculate volume score based on recent trading activity
        const volumeScore = await this.calculateBlockVolume(tokenIn, tokenOut);

        // Calculate trade size distribution
        const tradeStats = await this.getTradeStatistics(tokenIn, tokenOut);
        const largeTradesRatio = tradeStats.distribution.largeTradesPercent / 100;
        const mediumTradesRatio = tradeStats.distribution.mediumTradesPercent / 100;
        const smallTradesRatio = tradeStats.distribution.smallTradesPercent / 100;

        return {
            depth: depthScore,
            volatility: volatilityScore,
            volume: volumeScore,
            tradeDistribution: {
                largeTradesRatio,
                mediumTradesRatio,
                smallTradesRatio
            }
        };
    }

    private async getTradeStatistics(
        tokenIn: string,
        tokenOut: string
    ): Promise<{
        spikes: number;
        consistency: number;
        distribution: {
            largeTradesPercent: number;
            mediumTradesPercent: number;
            smallTradesPercent: number;
        };
    }> {
        // Get recent trades from the mempool monitoring
        const recentTrades = await this.getMempoolTrades(tokenIn, tokenOut);
        
        // Calculate trade size distribution
        const totalTrades = recentTrades.length;
        const largeTrades = recentTrades.filter((t: { value: bigint }) => t.value > this.LARGE_TRADE_THRESHOLD).length;
        const mediumTrades = recentTrades.filter((t: { value: bigint }) => 
            t.value <= this.LARGE_TRADE_THRESHOLD && 
            t.value > this.SMALL_TRADE_THRESHOLD
        ).length;
        const smallTrades = recentTrades.filter((t: { value: bigint }) => t.value <= this.SMALL_TRADE_THRESHOLD).length;

        return {
            spikes: await this.calculatePriceVolatility(recentTrades),
            consistency: await this.calculateVolumeConsistency(tokenIn, tokenOut),
            distribution: {
                largeTradesPercent: (largeTrades / totalTrades) * 100,
                mediumTradesPercent: (mediumTrades / totalTrades) * 100,
                smallTradesPercent: (smallTrades / totalTrades) * 100
            }
        };
    }

    private async analyzeLiquidityQuality(
        tokenA: string,
        tokenB: string,
        dex: DEX
    ): Promise<LiquidityAnalysis> {
        // Get recent trades and liquidity data
        const recentTrades = await this.getRecentTrades(tokenA, tokenB, dex);
        const poolData = await this.getPoolData(tokenA, tokenB, dex);
        
        // Calculate volume metrics
        const volumeScore = this.calculateVolumeScore(recentTrades);
        
        // Calculate depth metrics (how much liquidity is available at different price levels)
        const depthScore = this.calculateDepthScore(poolData);
        
        // Calculate volatility metrics
        const volatilityScore = this.calculateVolatilityScore(recentTrades);
        
        // Calculate overall health score
        const healthScore = this.calculateHealthScore(volumeScore, depthScore, volatilityScore);
        
        // Analyze recent trades
        const tradeAnalysis = {
            count: recentTrades.length,
            averageSize: this.calculateAverageTradeSize(recentTrades),
            largestTrade: this.findLargestTrade(recentTrades),
            timeWeightedVolume: this.calculateTimeWeightedVolume(recentTrades)
        };
        
        return {
            volumeScore,
            depthScore,
            volatilityScore,
            healthScore,
            recentTrades: tradeAnalysis
        };
    }

    private calculateVolumeScore(trades: any[]): number {
        const HOUR = 3600;
        const recentVolume = trades
            .filter(t => (Date.now() / 1000) - t.timestamp < HOUR)
            .reduce((sum, t) => sum + Number(t.amount), 0);
            
        // Score based on volume thresholds
        if (recentVolume > 1000000) return 1.0;  // High volume
        if (recentVolume > 100000) return 0.8;   // Good volume
        if (recentVolume > 10000) return 0.6;    // Moderate volume
        if (recentVolume > 1000) return 0.4;     // Low volume
        return 0.2;                              // Very low volume
    }

    private calculateDepthScore(poolData: any): number {
        const { reserves, totalLiquidity } = poolData;
        
        // Calculate liquidity concentration at different price levels
        const depthLevels = [0.1, 0.5, 1.0, 2.0, 5.0].map(level => {
            return this.getLiquidityAtPriceImpact(reserves, totalLiquidity, level);
        });
        
        // Score based on liquidity distribution
        const depthScore = depthLevels.reduce((score, liquidity, index) => {
            const weight = 1 / Math.pow(2, index);  // Higher weight for closer price levels
            return score + (liquidity / totalLiquidity) * weight;
        }, 0);
        
        return Math.min(depthScore, 1.0);
    }

    private calculateVolatilityScore(trades: any[]): number {
        const prices = trades.map(t => t.price);
        if (prices.length < 2) return 0.5;  // Not enough data
        
        // Calculate price volatility
        const volatility = this.calculatePriceVolatility(prices);
        
        // Score inversely proportional to volatility
        // Lower volatility = higher score
        return Math.max(0, 1 - (volatility / 0.1));  // 10% volatility threshold
    }

    private calculateHealthScore(
        volumeScore: number,
        depthScore: number,
        volatilityScore: number
    ): number {
        const weights = {
            volume: 0.3,
            depth: 0.4,
            volatility: 0.3
        };
        
        return (
            volumeScore * weights.volume +
            depthScore * weights.depth +
            volatilityScore * weights.volatility
        );
    }

    private calculateTimeWeightedVolume(trades: any[]): number {
        const now = Date.now() / 1000;
        return trades.reduce((twv, trade) => {
            const timeDiff = now - trade.timestamp;
            const weight = Math.exp(-timeDiff / 3600);  // Exponential decay over time
            return twv + (Number(trade.amount) * weight);
        }, 0);
    }

    // Add to existing executeArbitrage method
    private async validateAndOptimizeArbitrage(
        sourceDex: DEX,
        targetDex: DEX,
        tokenIn: string,
        tokenOut: string,
        amount: bigint
    ): Promise<{ isValid: boolean; optimizedAmount: bigint; expectedProfit: bigint }> {
        // Analyze liquidity quality for both DEXes
        const sourceLiquidity = await this.analyzeLiquidityQuality(tokenIn, tokenOut, sourceDex);
        const targetLiquidity = await this.analyzeLiquidityQuality(tokenIn, tokenOut, targetDex);
        
        // Validate if arbitrage conditions are favorable
        const isValid = this.validateArbitrageConditions(sourceLiquidity, targetLiquidity);
        if (!isValid) {
            return { isValid: false, optimizedAmount: 0n, expectedProfit: 0n };
        }
        
        // Calculate optimal trade size based on liquidity analysis
        const optimizedAmount = this.calculateOptimalTradeSize(
            amount,
            sourceLiquidity,
            targetLiquidity
        );
        
        // Calculate expected profit with optimized amount
        const expectedProfit = await this.calculateExpectedProfit(
            sourceDex,
            targetDex,
            tokenIn,
            tokenOut,
            optimizedAmount
        );
        
        return {
            isValid: true,
            optimizedAmount,
            expectedProfit
        };
    }

    private async getRecentTrades(
        tokenA: string,
        tokenB: string,
        dex: string
    ): Promise<Trade[]> {
        // Get trades from the mempool and recent blocks
        const mempoolTrades = await this.getMempoolTrades(tokenA, tokenB);
        const blockTrades = await this.getBlockTrades(tokenA, tokenB, 100); // Last 100 blocks
        
        return [...mempoolTrades, ...blockTrades].sort((a, b) => b.timestamp - a.timestamp);
    }

    private async getPoolData(
        tokenA: string,
        tokenB: string,
        dex: string
    ): Promise<PoolData> {
        const pair = await this.getPairContract(tokenA, tokenB, dex);
        const [reserve0, reserve1] = await pair.getReserves();
        const totalLiquidity = await pair.totalSupply();
        
        return {
            reserves: {
                reserve0,
                reserve1
            },
            totalLiquidity
        };
    }

    private calculateAverageTradeSize(trades: Trade[]): number {
        if (trades.length === 0) return 0;
        const total = trades.reduce((sum, trade) => sum + Number(trade.amount), 0);
        return total / trades.length;
    }

    private findLargestTrade(trades: Trade[]): number {
        if (trades.length === 0) return 0;
        return Math.max(...trades.map(trade => Number(trade.amount)));
    }

    private getLiquidityAtPriceImpact(
        reserves: { reserve0: bigint; reserve1: bigint },
        totalLiquidity: bigint,
        priceImpact: number
    ): number {
        const k = reserves.reserve0 * reserves.reserve1;
        const newReserve0 = reserves.reserve0 * BigInt(Math.floor((1 + priceImpact) * 1000)) / 1000n;
        const newReserve1 = k / newReserve0;
        
        return Number(totalLiquidity) * (1 - Math.abs(Number(newReserve1 - reserves.reserve1)) / Number(reserves.reserve1));
    }

    private calculatePriceVolatility(prices: string[]): number {
        if (prices.length < 2) return 0;
        
        const priceNumbers = prices.map(p => Number(p));
        const mean = priceNumbers.reduce((a, b) => a + b) / priceNumbers.length;
        
        const variance = priceNumbers.reduce((sum, price) => {
            const diff = price - mean;
            return sum + (diff * diff);
        }, 0) / (priceNumbers.length - 1);
        
        return Math.sqrt(variance) / mean; // Return coefficient of variation
    }

    private validateArbitrageConditions(
        sourceLiquidity: LiquidityAnalysis,
        targetLiquidity: LiquidityAnalysis
    ): boolean {
        // Minimum health scores required
        const MIN_HEALTH_SCORE = 0.7;
        const MIN_VOLUME_SCORE = 0.5;
        const MIN_DEPTH_SCORE = 0.6;
        
        // Check health scores
        if (sourceLiquidity.healthScore < MIN_HEALTH_SCORE || 
            targetLiquidity.healthScore < MIN_HEALTH_SCORE) {
            return false;
        }
        
        // Check volume scores
        if (sourceLiquidity.volumeScore < MIN_VOLUME_SCORE || 
            targetLiquidity.volumeScore < MIN_VOLUME_SCORE) {
            return false;
        }
        
        // Check depth scores
        if (sourceLiquidity.depthScore < MIN_DEPTH_SCORE || 
            targetLiquidity.depthScore < MIN_DEPTH_SCORE) {
            return false;
        }
        
        // Check recent trade activity
        if (sourceLiquidity.recentTrades.count < 5 || 
            targetLiquidity.recentTrades.count < 5) {
            return false;
        }
        
        return true;
    }

    private async calculateExpectedProfit(
        sourceDex: string,
        targetDex: string,
        tokenIn: string,
        tokenOut: string,
        amount: bigint
    ): Promise<bigint> {
        // Get expected output from source DEX
        const sourceOutput = await this._getPrice(sourceDex, tokenIn, tokenOut, amount);
        
        // Get expected output from target DEX
        const targetOutput = await this._getPrice(targetDex, tokenOut, tokenIn, sourceOutput);
        
        // Calculate profit
        return targetOutput > amount ? targetOutput - amount : 0n;
    }

    private async analyzePairVolume(
        token0: string,
        token1: string,
        dex: DEX
    ): Promise<{
        volumeScore: number;
        isViable: boolean;
        reasons: string[];
    }> {
        const volumeData = await this.getHistoricalVolume(token0, token1, dex);
        const analysis = this.volumeAnalyzer.calculatePairPriority(volumeData);

        const isViable = analysis.priority >= QUALITY_THRESHOLDS.MIN_VOLUME_SCORE &&
            volumeData[volumeData.length - 1].volume24h >= QUALITY_THRESHOLDS.MIN_VOLUME_24H;

        return {
            volumeScore: analysis.priority,
            isViable,
            reasons: analysis.reasons
        };
    }

    private async getHistoricalVolume(
        token0: string,
        token1: string,
        dex: DEX
    ): Promise<VolumeData[]> {
        const now = Math.floor(Date.now() / 1000);
        const oneDayAgo = now - 24 * 60 * 60;
        
        // Get historical trades
        const trades = await this.dexDataProvider.getHistoricalTrades(
            token0,
            token1,
            dex,
            oneDayAgo
        );

        // Process trades into volume data
        const volumeByHour: { [hour: number]: VolumeData } = {};
        
        for (const trade of trades) {
            const hour = Math.floor(trade.timestamp / 3600) * 3600;
            
            if (!volumeByHour[hour]) {
                volumeByHour[hour] = {
                    timestamp: hour,
                    volume: 0,
                    volume1h: 0,
                    volume24h: 0,
                    volumeChange1h: 0,
                    volumeChange24h: 0,
                    tradeCount: 0,
                    averageTradeSize: 0
                };
            }

            const hourData = volumeByHour[hour];
            hourData.volume += Number(trade.amount);
            hourData.tradeCount++;
            hourData.averageTradeSize = hourData.volume / hourData.tradeCount;
        }

        // Calculate rolling metrics
        const sortedHours = Object.keys(volumeByHour)
            .map(Number)
            .sort((a, b) => a - b);

        const result: VolumeData[] = [];
        
        for (const hour of sortedHours) {
            const hourData = volumeByHour[hour];
            
            // Calculate 1h volume
            hourData.volume1h = hourData.volume;
            
            // Calculate 24h volume
            hourData.volume24h = sortedHours
                .filter(h => h >= hour - 24 * 3600 && h <= hour)
                .reduce((sum, h) => sum + volumeByHour[h].volume, 0);

            // Calculate volume changes
            const prevHour = volumeByHour[hour - 3600];
            const prev24Hour = volumeByHour[hour - 24 * 3600];
            
            hourData.volumeChange1h = prevHour ? 
                (hourData.volume1h - prevHour.volume1h) / prevHour.volume1h * 100 : 0;
            
            hourData.volumeChange24h = prev24Hour ?
                (hourData.volume24h - prev24Hour.volume24h) / prev24Hour.volume24h * 100 : 0;

            result.push(hourData);
        }

        return result;
    }

    private async prioritizePairs(
        pairs: Array<{
            token0: string;
            token1: string;
            dex: DEX;
        }>
    ): Promise<Array<{
        token0: string;
        token1: string;
        dex: DEX;
        priority: number;
        reasons: string[];
    }>> {
        const results = await Promise.all(
            pairs.map(async pair => {
                const volumeAnalysis = await this.analyzePairVolume(
                    pair.token0,
                    pair.token1,
                    pair.dex
                );

                return {
                    ...pair,
                    priority: volumeAnalysis.isViable ? volumeAnalysis.volumeScore : 0,
                    reasons: volumeAnalysis.reasons
                };
            })
        );

        // Sort by priority descending
        return results.sort((a, b) => b.priority - a.priority);
    }

    // Add method to update gas stats after trade
    private updateGasStats(
        tokenIn: string,
        tokenOut: string,
        gasUsed: bigint,
        gasPrice: bigint,
        success: boolean,
        baseFee: bigint
    ): void {
        const pairKey = `${tokenIn}-${tokenOut}`;
        this.pairGasOptimizer.updatePairGasStats(pairKey, gasUsed, gasPrice, success, baseFee);
    }
}

// Start the bot if running directly
if (require.main === module) {
    const bot = new ArbitrageBot();
    
    // Handle shutdown gracefully
    process.on('SIGINT', () => {
        console.log('Received SIGINT. Shutting down...');
        bot.stop();
    });
    
    bot.start().catch(console.error);
} 